<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>REACT 面试题</title>
      <link href="/2023/07/22/react-mian-shi-ti-zheng-li/"/>
      <url>/2023/07/22/react-mian-shi-ti-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="REACT-面试题"><a href="#REACT-面试题" class="headerlink" title="REACT 面试题"></a>REACT 面试题</h1><h2 id="1-如何创建-React-项目20qz-pylcc"><a href="#1-如何创建-React-项目20qz-pylcc" class="headerlink" title="1. 如何创建 React 项目20qz-pylcc"></a>1. 如何创建 React 项目<font color="white">20qz-pylcc</font></h2><pre class="line-numbers language-none"><code class="language-none">npm install create-react-app -gcreate-react-app ./react-basiccd react-basicnpm startnpm init react-app ./react-basic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-如何理解-JSX"><a href="#2-如何理解-JSX" class="headerlink" title="2. 如何理解 JSX"></a>2. 如何理解 JSX</h2><pre class="line-numbers language-none"><code class="language-none">JSX 是 Facebook 创建的 JavaScript 语法扩展,React 中使用 JSX 来构建用户界面.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-在使用-JSX-时有哪些注意事项"><a href="#3-在使用-JSX-时有哪些注意事项" class="headerlink" title="3. 在使用 JSX 时有哪些注意事项"></a>3. 在使用 JSX 时有哪些注意事项</h2><pre class="line-numbers language-none"><code class="language-none">1. JSX 必须有根元素 &lt;&gt;&lt;/&gt;2. 单标记必须闭合 &lt;img src="" /&gt;3. 在 JSX 的外部可以加上小括号用于美化其对其方式4. 只有表达式才可以嵌入到 JSX 中, 非表达式不可以 if else for switch5. 属性名称遵循驼峰式命名法6. Null undefined true false 可以被渲染 但是渲染的结果是空7. JSX 中不能直接渲染对象8. 使用 className 替换 class、使用 htmlFor 替换 for<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-如何将对象类型的数据直接嵌入-JSX-中"><a href="#4-如何将对象类型的数据直接嵌入-JSX-中" class="headerlink" title="4. 如何将对象类型的数据直接嵌入 JSX 中"></a>4. 如何将对象类型的数据直接嵌入 JSX 中</h2><pre class="line-numbers language-none"><code class="language-none">要将对象转换为对象的字符串格式才可以。JSON.stringify(obj)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-什么是条件渲染-在-React-中有哪些手段可以实现条件渲染。"><a href="#5-什么是条件渲染-在-React-中有哪些手段可以实现条件渲染。" class="headerlink" title="5. 什么是条件渲染, 在 React 中有哪些手段可以实现条件渲染。"></a>5. 什么是条件渲染, 在 React 中有哪些手段可以实现条件渲染。</h2><pre class="line-numbers language-none"><code class="language-none">根据条件决定渲染什么内容if 三元运算 逻辑运算<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-如何实现列表渲染"><a href="#6-如何实现列表渲染" class="headerlink" title="6. 如何实现列表渲染"></a>6. 如何实现列表渲染</h2><pre class="line-numbers language-none"><code class="language-none">1. 先通过 map 方法将纯数据数组转换为 JSX 数组2. 将 JSX 数组放入插入表达式中让其自动展开<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-在-React-中如何使用本地图片"><a href="#7-在-React-中如何使用本地图片" class="headerlink" title="7. 在 React 中如何使用本地图片"></a>7. 在 React 中如何使用本地图片</h2><pre class="line-numbers language-none"><code class="language-none">import img from "some/path";const img = require("some/path");&lt;img src={img} /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-简要说明如何为元素绑定事件"><a href="#8-简要说明如何为元素绑定事件" class="headerlink" title="8. 简要说明如何为元素绑定事件"></a>8. 简要说明如何为元素绑定事件</h2><pre class="line-numbers language-none"><code class="language-none">事件名称采用驼峰式命名法, 将事件名称直接作为属性添加到元素的身上事件名称对应的值,就是事件处理函数本身&lt;element onClick={() =&gt; {}}&gt;&lt;/element&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-什么是组件、组件为开发者带来了哪些好处"><a href="#9-什么是组件、组件为开发者带来了哪些好处" class="headerlink" title="9. 什么是组件、组件为开发者带来了哪些好处"></a>9. 什么是组件、组件为开发者带来了哪些好处</h2><pre class="line-numbers language-none"><code class="language-none">组件就是可以被组合的零部件, React 采用组件化的方式构建用户界面就是将一个完整的页面拆分成一个一个小的部分再组合一个组件就是页面中的一小块区域, 要包含 html 结构、css 样式、javascript 逻辑React 中有两种组件：函数式组件和class组件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-如何为组件添加组件级样式"><a href="#10-如何为组件添加组件级样式" class="headerlink" title="10. 如何为组件添加组件级样式"></a>10. 如何为组件添加组件级样式</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">1. 创建样式表文件, 文件名称必须以 .module.css 结尾, 名称前面一般约定写组件名称, 比如 App.module.css2. 在组件中通过 import styles from "./App.module.css" 的方式导入样式表3. 在组件中通过 className 使用样式表中的样式&lt;element className={styles.样式表中的类名}/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="11-类组件如何声明组件状态、如何获取组件状态、如何修改组件状态"><a href="#11-类组件如何声明组件状态、如何获取组件状态、如何修改组件状态" class="headerlink" title="11. 类组件如何声明组件状态、如何获取组件状态、如何修改组件状态"></a>11. 类组件如何声明组件状态、如何获取组件状态、如何修改组件状态</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">将组件状态存储到 state 属性中, state 属性的值是对象类型, 对象中的属性就是状态在 render 方法中: this.state.状态this.setState()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="12-类组件中的-constructor-方法、render-方法中的-this-指向谁"><a href="#12-类组件中的-constructor-方法、render-方法中的-this-指向谁" class="headerlink" title="12. 类组件中的 constructor 方法、render 方法中的 this 指向谁?"></a>12. 类组件中的 constructor 方法、render 方法中的 this 指向谁?</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">当前类的实例对象<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="13-如何使事件处理函数中的-this-指向当前组件的实例对象"><a href="#13-如何使事件处理函数中的-this-指向当前组件的实例对象" class="headerlink" title="13. 如何使事件处理函数中的 this 指向当前组件的实例对象"></a>13. 如何使事件处理函数中的 this 指向当前组件的实例对象</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">1. 将事件处理函数更改为箭头函数2. 使用 bind 更改事件处理函数中的this3. &lt;element onClick={() =&gt; this.clickHandler()} /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="14-在类组件中如何获取-DOM-对象"><a href="#14-在类组件中如何获取-DOM-对象" class="headerlink" title="14. 在类组件中如何获取 DOM 对象"></a>14. 在类组件中如何获取 DOM 对象</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">import { createRef } from "react";class App extends React.Component {divRef = createRef();render() {return &lt;div ref={divRef} onClick={() =&gt; console.log(divRef.current)}&gt;&lt;/div&gt;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="15-什么是受控表单、如何实现受控表单"><a href="#15-什么是受控表单、如何实现受控表单" class="headerlink" title="15. 什么是受控表单、如何实现受控表单"></a>15. 什么是受控表单、如何实现受控表单</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">表单的值由组件状态进行控制, 用户在表单中实时输入的时候, 我们要将用户输入的内容同步到组件状态之中, 开发者要想获取表单值, 只需要从组件状态中进行获取即可.class App extends React.Component {state = {text: ""}render() {return &lt;input type="text" value={this.state.text} onChange={(event) =&gt; this.setState({text: event.target.value})}/&gt;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="16-什么是组件通讯"><a href="#16-什么是组件通讯" class="headerlink" title="16. 什么是组件通讯"></a>16. 什么是组件通讯</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">数据能够在不同的组件之间进行流动。父组件能够将自己的状态传递到子组件, 子组件可以修改父组件中定义的状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></code></pre><h2 id="17-如果向组件内部传递数据、如何在组件内部获取数据"><a href="#17-如果向组件内部传递数据、如何在组件内部获取数据" class="headerlink" title="17. 如果向组件内部传递数据、如何在组件内部获取数据"></a>17. 如果向组件内部传递数据、如何在组件内部获取数据</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">通过组件属性的方式(props)&lt;App name="张三"/&gt;class App extends React.Component {render() {this.props.name}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="18-什么是单向数据流动"><a href="#18-什么是单向数据流动" class="headerlink" title="18. 什么是单向数据流动"></a>18. 什么是单向数据流动</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">数据在组件之间进行流动的时候, 方向只能是从上到下, 也就是说, 只能上层组件中的数据传递到下层组件使数据流动变得简单, 程序更加好维护.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></code></pre><h2 id="19-props-为什么是只读的"><a href="#19-props-为什么是只读的" class="headerlink" title="19. props 为什么是只读的."></a>19. props 为什么是只读的.</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">为了实现单向实现数据流动, 如果 props 不是只读的, 是可以修改的, 那么单向数据流动将无法实现.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="20-在子组件中如何更新父组件中的状态"><a href="#20-在子组件中如何更新父组件中的状态" class="headerlink" title="20. 在子组件中如何更新父组件中的状态"></a>20. 在子组件中如何更新父组件中的状态</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">父组件定义修改状态的方法, 父组件将修改状态的方式传递到子组件, 子组件通过父组件传递下来的方法进行状态的修改。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="21-如何实现兄弟组件通讯"><a href="#21-如何实现兄弟组件通讯" class="headerlink" title="21. 如何实现兄弟组件通讯"></a>21. 如何实现兄弟组件通讯</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">利用状态提升思想, 将兄弟组件之间需要共享的状态提供至它们之间公共的父级中, 然后通过 props 的方式再将状态分别传递到兄弟组件中.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="22-如何实现跨级组件通讯20qz-pylcc"><a href="#22-如何实现跨级组件通讯20qz-pylcc" class="headerlink" title="22. 如何实现跨级组件通讯20qz-pylcc"></a>22. 如何实现跨级组件通讯<font color="white">20qz-pylcc</font></h2><pre><code><pre class="line-numbers language-none"><code class="language-none">利用上下文对象实现.import { createContext } from "react";// Provider 用来保存状态并提供状态// Consumer 用来获取状态const { Provider, Consumer } = createContext();&lt;Provider value={{name: "张三"}}&gt;&lt;App /&gt;&lt;/Provider&gt;&lt;Consumer&gt;{ (value) =&gt; &lt;div&gt;{value.name}&lt;/div&gt; }&lt;/Consumer&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="23-组件属性校验的意义是什么"><a href="#23-组件属性校验的意义是什么" class="headerlink" title="23. 组件属性校验的意义是什么"></a>23. 组件属性校验的意义是什么</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">1. 防止组件的调用者传递错误的属性值类型, 导致组件内部的代码执行出错2. 当组件的调用者传递了错误的属性值时, 给组件的调用者更加精准的错误提示npm install prop-typesimport PropTypes from "prop-types";class App extends React.Component {static propTypes = {colors: PropTypes.array.isRequired}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="24-什么是组件属性的默认值"><a href="#24-什么是组件属性的默认值" class="headerlink" title="24. 什么是组件属性的默认值"></a>24. 什么是组件属性的默认值</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">我们在定义组件的时候, 可以为即将接收的外部数据设置默认值, 组件的调用者在传值的情况下组件使用调用者传递的值, 没传就是用默认值, 这样可以防止组件代码执行出错.class App extends React.Component {static defaultProps = {};}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="25-什么是组件的生命周期"><a href="#25-什么是组件的生命周期" class="headerlink" title="25. 什么是组件的生命周期"></a>25. 什么是组件的生命周期</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">从组件创建到销毁, 它经历的整个过程被称之为组件的生命周期.开发者通过组件生命周期函数将业务逻辑插入到组件运行的各个阶段.所谓生命周期函数就是 React 提供的一些固定名字的函数, 在组件运行的各个阶段被自动调用.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="26-React-类组件中组件生命周期函数有几大阶段-分别对应哪些常见的生命周期函数"><a href="#26-React-类组件中组件生命周期函数有几大阶段-分别对应哪些常见的生命周期函数" class="headerlink" title="26. React 类组件中组件生命周期函数有几大阶段, 分别对应哪些常见的生命周期函数"></a>26. React 类组件中组件生命周期函数有几大阶段, 分别对应哪些常见的生命周期函数</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">1. 挂载阶段创建组件、渲染组件视图constructor render componentDidMountconstructor: 做一些初始化的工作, 比如更改组件中的函数的this 指向、初始化状态对象、创建引用对象、创建业务逻辑需要的公共属性render: 渲染视图、不能直接调用 setState 更新状态componentDidMount: 操作DOM、发送网络请求、更新组件状态2. 更新阶段1. 什么情况下会触发组件更新1. 组件状态发生变化2. 父组件更新3. 强制更新 forceUpdate2. render componentDidUpdatecomponentDidUpdate: 操作DOM、发送网络请求、有条件的更新组件状态3. 卸载阶段componentWillUnMount清理操作、清除定时器、清除事件、清除订阅、清除全局状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="27-页面初始渲染时要请求的数据要写在哪个生命周期函数中"><a href="#27-页面初始渲染时要请求的数据要写在哪个生命周期函数中" class="headerlink" title="27. 页面初始渲染时要请求的数据要写在哪个生命周期函数中"></a>27. 页面初始渲染时要请求的数据要写在哪个生命周期函数中</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">componentDidMount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="28-组件卸载之前需要干些什么事情"><a href="#28-组件卸载之前需要干些什么事情" class="headerlink" title="28. 组件卸载之前需要干些什么事情"></a>28. 组件卸载之前需要干些什么事情</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">清理操作、清除定时器、清除事件、清除订阅、清除全局状态<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="29-在调用-setState-方法时传递对象作为参数和传递函数作为参数主要的区别在哪"><a href="#29-在调用-setState-方法时传递对象作为参数和传递函数作为参数主要的区别在哪" class="headerlink" title="29. 在调用 setState 方法时传递对象作为参数和传递函数作为参数主要的区别在哪"></a>29. 在调用 setState 方法时传递对象作为参数和传递函数作为参数主要的区别在哪</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">区别主要体现在同时多次调用 setState 方法时, 传递对象在做状态合并时, 它是覆盖式合并, 传递函数时, 它是累计性合并.this.setState({count: 1})this.setState({count: 1})this.setState((state) =&gt; ({count: state.count + 1}))this.setState((state) =&gt; ({count: state.count + 1}))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="30-为什么在调用-setState-方法之后不能立即获取到更新之后的状态值"><a href="#30-为什么在调用-setState-方法之后不能立即获取到更新之后的状态值" class="headerlink" title="30. 为什么在调用 setState 方法之后不能立即获取到更新之后的状态值"></a>30. 为什么在调用 setState 方法之后不能立即获取到更新之后的状态值</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">在 React 中，当调用 setState 方法更新组件的状态时，React 并不会立即更新组件的状态，而是会将状态更新请求放入更新队列中，以便在适当的时候进行更新。这是因为 React 会将多个 setState 方法调用进行合并，以提高性能和优化更新。因此，如果在调用 setState 后立即尝试访问状态值，可能会得到之前的状态值，因为此时更新队列尚未被处理。如果需要在更新完成后访问更新后的状态值，可以使用 setState 的第二个参数，即回调函数。回调函数会在组件状态更新完成后被调用，可以在回调函数中访问更新后的状态值。this.setState({count: this.state.count + 1}, () =&gt; {  console.log(this.state.count); // 在回调函数中访问更新后的状态值});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="31-什么是浅比较"><a href="#31-什么是浅比较" class="headerlink" title="31. 什么是浅比较"></a>31. 什么是浅比较</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">在 React 中，当一个组件的状态或属性更新时，React 会进行一个称为“比较”的过程来确定是否需要重新渲染组件。浅比较是 React 中一种比较对象的方式，用于检查两个对象是否相等。浅比较只会比较对象的引用，而不会比较对象的值。如果两个对象的引用不同，即使它们的值相同，浅比较也会认为它们是不相等的。如果两个对象的引用相同，即使它们的值已经发生了变化，浅比较仍然认为它们是相等的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="32-PureComponent-类的作用是什么"><a href="#32-PureComponent-类的作用是什么" class="headerlink" title="32. PureComponent 类的作用是什么"></a>32. PureComponent 类的作用是什么</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">可以防止组件的无效渲染.在组件即将更新之前, PureComponent 会拿着上一次更新组件时使用的 props 和 即将更新组件时使用的 prop 进行比较如果比较结果是相同的, 阻止组件渲染, 因为即使重新渲染, 得到的最终结果也是一样的.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="33-shouldComponentUpdate-生命周期函数的作用是什么"><a href="#33-shouldComponentUpdate-生命周期函数的作用是什么" class="headerlink" title="33. shouldComponentUpdate 生命周期函数的作用是什么"></a>33. shouldComponentUpdate 生命周期函数的作用是什么</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">通过 shouldComponentUpdate 生命周期函数的返回值可以决定组件是否继续更新. true 继续更新 false 阻止更新.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="34-组件状态管理存在什么问题"><a href="#34-组件状态管理存在什么问题" class="headerlink" title="34. 组件状态管理存在什么问题"></a>34. 组件状态管理存在什么问题</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">当组件与组件之间要进行状态共享的时候, 状态需要在不同的组件之间通过 props 的方式进行传递, 传递过程非常复杂.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="35-和组件状态管理相比-全局状态管理有什么优势"><a href="#35-和组件状态管理相比-全局状态管理有什么优势" class="headerlink" title="35. 和组件状态管理相比, 全局状态管理有什么优势"></a>35. 和组件状态管理相比, 全局状态管理有什么优势</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">全局状态管理是指将状态存储到一个脱离于组件的地方进行管理, 所有组件都可以直接获取状态, 直接修改状态, 避免了组件状态管理中的 状态需要在不同的组件之间进行传递的复杂过程.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="36-简要描述-Redux-管理状态的模式"><a href="#36-简要描述-Redux-管理状态的模式" class="headerlink" title="36. 简要描述 Redux 管理状态的模式"></a>36. 简要描述 Redux 管理状态的模式</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">在 Redux 中通过 store 对象进行状态的管理, store 对象可以存储状态, 有提供了管理状态的方法.通过 store.getState 获取状态, 通过 store.dispatch 修改状态, 通过 store.subscribe 订阅状态的变化.在 Redux 中对状态进行的任何修改都需要通过 action 对象进行描述, action 对象中有 type 属性, 它就是具体的用来描述的属性视图中要想修改状态, 必须调用 dispatch 方法接收 action 对象, 该命令会被 reducer 函数接收, 在 reducer 函数要对 action.type 进行匹配根据 action 的类型对状态进行不同的处理, 处理完成之后要返回, 给 store 进行存储.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="37-在-Redux-中通过什么方法创建-store-对象-并描述该方法的使用方式"><a href="#37-在-Redux-中通过什么方法创建-store-对象-并描述该方法的使用方式" class="headerlink" title="37. 在 Redux 中通过什么方法创建 store 对象, 并描述该方法的使用方式"></a>37. 在 Redux 中通过什么方法创建 store 对象, 并描述该方法的使用方式</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">const store = createStore(reducer, initialState)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="38-描述-action-对象的作用是什么、什么是-action-creator、为什么会有-action-creator-这样的概念"><a href="#38-描述-action-对象的作用是什么、什么是-action-creator、为什么会有-action-creator-这样的概念" class="headerlink" title="38. 描述 action 对象的作用是什么、什么是 action creator、为什么会有 action creator 这样的概念"></a>38. 描述 action 对象的作用是什么、什么是 action creator、为什么会有 action creator 这样的概念</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">在 Redux 中, action 对象用于描述当前要对状态进行怎样的操作, 它就是一个命令, 通过 dispatch 进行发送.action creator 就是一个用于返回 action 对象的函数它存在的目的是消除相似 action 对象的重复定义{ type: "increment", payload: 1 }{ type: "increment", payload: 2 }{ type: "increment", payload: 3 }const increment = (payload) =&gt; ({type: "increment", payload})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="39-简要描述-reducer-函数的用法"><a href="#39-简要描述-reducer-函数的用法" class="headerlink" title="39. 简要描述 reducer 函数的用法"></a>39. 简要描述 reducer 函数的用法</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">reducer 就是一个函数, 在 Redux 中用于对状态进行更新, 是具体的写更新状态代码的地方.reducer 函数接收两个参数, 第一个参数是要管理的状态对象, 第二个参数是 action 对象在 reducer 函数内部, 我们通常通过编写 switch case 对 action 类型进行匹配, 根据不同的 action 类型, 对状态进行不同的更新.在状态更新完成之后, 必须要返回新的状态, 如果没有匹配到 action type, 默认就返回当前状态.在 reducer 中不能做任何和修改状态无关的事情, 比如发送 ajax 请求, 开启定时器等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="40-在-redux-中使用什么方法获取状态仓库中存储的状态对象"><a href="#40-在-redux-中使用什么方法获取状态仓库中存储的状态对象" class="headerlink" title="40. 在 redux 中使用什么方法获取状态仓库中存储的状态对象"></a>40. 在 redux 中使用什么方法获取状态仓库中存储的状态对象</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">在 Redux 中获取状态仓库中存储的状态对象，可以使用 Redux 提供的 getState() 方法。getState() 方法是 Redux Store 对象中的一个函数，用于返回当前的状态树对象。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="41-在-redux-中使用什么方法分发-action-对象"><a href="#41-在-redux-中使用什么方法分发-action-对象" class="headerlink" title="41. 在 redux 中使用什么方法分发 action 对象"></a>41. 在 redux 中使用什么方法分发 action 对象</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">在 Redux 中分发 action 对象，可以使用 Redux 提供的 dispatch() 方法。dispatch() 方法是 Redux Store 对象中的一个函数，用于向 reducer 发送 action 对象，并触发 state 的更新。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="42-react-redux-这个库的作用是什么"><a href="#42-react-redux-这个库的作用是什么" class="headerlink" title="42. react-redux 这个库的作用是什么?"></a>42. react-redux 这个库的作用是什么?</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">解决 redux 状态更新组件不更新的问题<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="43-简要描述-react-redux-中提供的-connect-方法的作用及用法"><a href="#43-简要描述-react-redux-中提供的-connect-方法的作用及用法" class="headerlink" title="43. 简要描述 react-redux 中提供的 connect 方法的作用及用法"></a>43. 简要描述 react-redux 中提供的 connect 方法的作用及用法</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">react-redux 提供了 connect 方法让组件获取状态connect 方法有两个参数都是函数, 第一个函数用于将 redux 状态映射到组件的 props 对象中第二个函数用于将修改状态的逻辑映射到组件的 props 对象中connect 方法在调用之后又返回一个函数, 通过调用该函数告诉 redux 状态及修改状态的逻辑要映射到哪一个组件中connect 方法返回的方法在调用之后返回了一个被增强了的组件, 外部要渲染该组件export default connect(mapStateToProps, mapDispatchToProps)(App)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="44-为什么要将-action-对象中的-type-属性值定义为常量-20qz-pylcc"><a href="#44-为什么要将-action-对象中的-type-属性值定义为常量-20qz-pylcc" class="headerlink" title="44. 为什么要将 action 对象中的 type 属性值定义为常量 20qz-pylcc"></a>44. 为什么要将 action 对象中的 type 属性值定义为常量 <font color="white">20qz-pylcc</font></h2><pre><code><pre class="line-numbers language-none"><code class="language-none">在 Redux 中，将 action 对象中的 type 属性值定义为常量，可以提高应用的可维护性和可重用性。具体来说，将 action 类型定义为常量，可以避免由于手误或代码错误而导致的拼写错误，从而避免出现难以追踪的 bug。此外，常量还可以更好地传达代码中的含义，从而提高代码的可读性和可维护性。另外，定义 action 类型为常量还可以增加代码的重用性。在 Redux 应用中，可能有多个 reducer 需要处理相同的 action 类型，如果将 action 类型定义为常量，可以将这些常量集中到一个文件中，然后在多个 reducer 中重复使用，从而减少重复的代码。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="45-reducer-函数为什么要被分解再组合20qz-pylcc"><a href="#45-reducer-函数为什么要被分解再组合20qz-pylcc" class="headerlink" title="45. reducer 函数为什么要被分解再组合20qz-pylcc"></a>45. reducer 函数为什么要被分解再组合<font color="white">20qz-pylcc</font></h2><pre><code><pre class="line-numbers language-none"><code class="language-none">在 Redux 应用中，reducer 函数被分解再组合可以提高应用的可维护性和可扩展性。具体来说，将 reducer 函数分解成多个小的 reducer 函数，可以将不同部分的状态分开管理，从而使代码更加清晰和易于维护。Redux 提供了 combineReducers() 函数，它可以将多个 reducer 函数合并成一个 reducer 函数，并生成一个新的状态树对象。这样，我们可以将不同部分的状态分开管理，并将它们组合成一个完整的状态树，从而使代码更加清晰、易于维护和可扩展。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="46-如何理解-redux-中间件"><a href="#46-如何理解-redux-中间件" class="headerlink" title="46. 如何理解 redux 中间件"></a>46. 如何理解 redux 中间件</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">redux 中间件允许开发者在修改状态的过程中加入一些中间环节, 在 reducer 函数中不能做的事情, 全部都要在中间件中去做比如异步请求、定时器、控制台输出、DOM 操作、localStorage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></code></pre><h2 id="47-redux-thunk-中间件的作用是什么-如何使用该中间件。"><a href="#47-redux-thunk-中间件的作用是什么-如何使用该中间件。" class="headerlink" title="47. redux-thunk 中间件的作用是什么, 如何使用该中间件。"></a>47. redux-thunk 中间件的作用是什么, 如何使用该中间件。</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">扩展了 dispatch 方法的功能, 使 dispatch 方法可以接收函数作为参数, 开发者可以将副作用代码写在该函数中, 比如异步请求,其实就是让开发者在 redux 的工作流程中加入异步代码.npm install redux-thunkimport thunk from "redux-thunk";createStore(reducer, applyMiddleware(thunk));dispatch(async (dispatch) =&gt; {// 异步操作dispatch();})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="48-BrowserRouter-内部使用的是什么-API-实现的路由功能"><a href="#48-BrowserRouter-内部使用的是什么-API-实现的路由功能" class="headerlink" title="48. BrowserRouter 内部使用的是什么 API 实现的路由功能"></a>48. BrowserRouter 内部使用的是什么 API 实现的路由功能</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">在 React Router 库中，BrowserRouter 使用 HTML5 的 history API 实现了路由功能。history API 是 HTML5 中引入的一组 API，用于在浏览器中操作浏览器的历史记录和地址栏。使用 history API，我们可以通过 JavaScript 修改 URL，同时还可以监听 URL 的变化，从而实现前端路由功能。BrowserRouter 组件使用了 history API 中的 pushState() 和 replaceState() 方法，将 URL 中的路径与组件进行匹配，以确定要渲染的组件。当 URL 发生变化时，BrowserRouter 会通过 props 将新的 location 信息传递给子组件，从而触发重新渲染。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="49-在-react-router-dom-路由库中使用什么组件配置路由规则-使用的是什么属性"><a href="#49-在-react-router-dom-路由库中使用什么组件配置路由规则-使用的是什么属性" class="headerlink" title="49. 在 react-router-dom 路由库中使用什么组件配置路由规则, 使用的是什么属性"></a>49. 在 react-router-dom 路由库中使用什么组件配置路由规则, 使用的是什么属性</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">&lt;Route path="/home" component={Home} /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="50-使用哪些组件可以实现-a-链接跳转-它们之间有什么区别"><a href="#50-使用哪些组件可以实现-a-链接跳转-它们之间有什么区别" class="headerlink" title="50. 使用哪些组件可以实现 a 链接跳转? 它们之间有什么区别"></a>50. 使用哪些组件可以实现 a 链接跳转? 它们之间有什么区别</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">&lt;Link&gt;&lt;/Link&gt;&lt;NavLink&gt;&lt;/NavLink&gt;NavLink 链接被激活之后有高亮的类名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="51-使用哪些方法可以实现编程式导航-它们之间有什么区别"><a href="#51-使用哪些方法可以实现编程式导航-它们之间有什么区别" class="headerlink" title="51. 使用哪些方法可以实现编程式导航? 它们之间有什么区别"></a>51. 使用哪些方法可以实现编程式导航? 它们之间有什么区别</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">push      正常跳转, 记录会被添加到浏览器的历史记录中, 可以回退replace   跳转, 但是跳转记录不会被添加到浏览器的历史记录中, 不可以回退<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></code></pre><h2 id="52-什么是查询参数？"><a href="#52-什么是查询参数？" class="headerlink" title="52. 什么是查询参数？"></a>52. 什么是查询参数？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">查询参数是指 URL 中的一部分，通常用于向服务器传递额外的信息。查询参数以 "?" 符号开始，后面是一系列键值对，多个键值对之间使用 "&amp;" 符号分隔。https://www.example.com/search?q=react&amp;lang=en<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></code></pre><h2 id="53-如何传递查询参数"><a href="#53-如何传递查询参数" class="headerlink" title="53. 如何传递查询参数"></a>53. 如何传递查询参数</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">&lt;Link to="/detail?aid=1"&gt;&lt;/Link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="54-如何接收查询参数20qz-pylcc"><a href="#54-如何接收查询参数20qz-pylcc" class="headerlink" title="54. 如何接收查询参数20qz-pylcc"></a>54. 如何接收查询参数<font color="white">20qz-pylcc</font></h2><pre><code><pre class="line-numbers language-none"><code class="language-none">qs.parse(this.props.location.search, {ignoreQueryPrefix: true})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="55-如何实现路径参数的路由传参"><a href="#55-如何实现路径参数的路由传参" class="headerlink" title="55. 如何实现路径参数的路由传参"></a>55. 如何实现路径参数的路由传参</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">1. 在路由规则中指定要进入到当前路由需要传递参数&lt;Route path="/detail/:id" /&gt;2. 在链接中传递参数&lt;Link to="/detail/1"&gt;&lt;/Link&gt;3. 接收参数match.params<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="56-Switch-组件的作用是什么"><a href="#56-Switch-组件的作用是什么" class="headerlink" title="56. Switch 组件的作用是什么"></a>56. Switch 组件的作用是什么</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">默认情况下, 路由规则是从上到下进行匹配的, 直到匹配完所有的路由规则, 匹配到哪些, 就渲染哪些路由规则对应的组件Switch 组件可以指定在匹配到一个规则以后停止匹配<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></code></pre><h2 id="57-在路由规则中匹配请求路径时-它的匹配方式模式有哪些"><a href="#57-在路由规则中匹配请求路径时-它的匹配方式模式有哪些" class="headerlink" title="57. 在路由规则中匹配请求路径时, 它的匹配方式模式有哪些?"></a>57. 在路由规则中匹配请求路径时, 它的匹配方式模式有哪些?</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">精确匹配: 路由规则和请求路径完全吻合才能匹配成功, 要启用精确匹配, 需要 Route 组件的身上添加 exact 属性模糊匹配(默认行为): 只要路由规则被请求路径所包裹即可匹配成功 /home =&gt; / 、 /home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="58-在路由规则中如何定义-404-页面组件对应的路由规则"><a href="#58-在路由规则中如何定义-404-页面组件对应的路由规则" class="headerlink" title="58. 在路由规则中如何定义 404 页面组件对应的路由规则."></a>58. 在路由规则中如何定义 404 页面组件对应的路由规则.</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">路由规则从上到下依次进行匹配, 如果所有的路由规则都没有匹配成功, 就让它匹配最后一条&lt;Route component={NotFound}/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="59-如何在普通组件中获取路由相关的信息"><a href="#59-如何在普通组件中获取路由相关的信息" class="headerlink" title="59. 如何在普通组件中获取路由相关的信息."></a>59. 如何在普通组件中获取路由相关的信息.</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">withRouter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="60-路由守卫组件的作用是什么"><a href="#60-路由守卫组件的作用是什么" class="headerlink" title="60. 路由守卫组件的作用是什么."></a>60. 路由守卫组件的作用是什么.</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">对路由组件进行的保护, 在进入组件之前, 判断你可以不以进入, 如果可以就让你进， 否则就不让你进.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="61-路由组件懒加载有什么好处-如何实现路由组件懒加载"><a href="#61-路由组件懒加载有什么好处-如何实现路由组件懒加载" class="headerlink" title="61. 路由组件懒加载有什么好处? 如何实现路由组件懒加载"></a>61. 路由组件懒加载有什么好处? 如何实现路由组件懒加载</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">提升首页加载速度.lazy Suspense<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="62-如何在-JSX-中通过组件的方式进行页面跳转"><a href="#62-如何在-JSX-中通过组件的方式进行页面跳转" class="headerlink" title="62. 如何在 JSX 中通过组件的方式进行页面跳转."></a>62. 如何在 JSX 中通过组件的方式进行页面跳转.</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">&lt;Redirect to=""/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="63-React-中的-render-的用途是什么？"><a href="#63-React-中的-render-的用途是什么？" class="headerlink" title="63. React 中的 render()的用途是什么？"></a>63. React 中的 render()的用途是什么？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">在class组件中使用Render()，来返回在组件中显示的HTML。 它被用作读取props和state并将JSX代码返回到应用的根组件。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="64-什么是-Props？"><a href="#64-什么是-Props？" class="headerlink" title="64. 什么是 Props？"></a>64. 什么是 Props？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">Props也被称作属性。它们将数据从一个组件传递到另一个组件（从父组件到子组件）。它们通常被用来呈现动态数据。子组件永远不能将props发送到父组件，因为此流程是单向的（父到子）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></code></pre><h2 id="65-如何区分-State-和-Props"><a href="#65-如何区分-State-和-Props" class="headerlink" title="65. 如何区分 State 和 Props"></a>65. 如何区分 State 和 Props</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">State和props是具有不同功能的JavaScript对象。props用于将数据从父组件传输到子组件，而state是对本地数据的存储，仅对当前组件可用，不能与其他组件共享。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="66-useState-是什么？20qz-pylcc"><a href="#66-useState-是什么？20qz-pylcc" class="headerlink" title="66. useState 是什么？20qz-pylcc"></a>66. useState 是什么？<font color="white">20qz-pylcc</font></h2><pre><code><pre class="line-numbers language-none"><code class="language-none">useState Hook是一个可以在函数组件中使用状态变量的存储。你可以把初始状态传给这个函数，它将返回一个包含当前状态值（不一定是初始状态）的变量和另一个更新这个值的函数。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="67-useEffect-是什么？"><a href="#67-useEffect-是什么？" class="headerlink" title="67. useEffect 是什么？"></a>67. useEffect 是什么？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">useEffect Hook允许你在组件中执行副作用，例如数据获取、直接更新DOM、使用setTimeout()之类的计时器等等。这个hook接受两个参数：回调函数和依赖项，它们允许您控制何时执行副作用。注意：第二个参数是可选的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="68-useMemo-hook-的用途是什么？"><a href="#68-useMemo-hook-的用途是什么？" class="headerlink" title="68. useMemo() hook 的用途是什么？"></a>68. useMemo() hook 的用途是什么？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">useMemo() hook在函数组件中使用来记忆昂贵的函数，以便它们仅在设定的输入更改时调用，而不是每次渲染都调用。它类似于useCallback hook，用于优化React函数组件的渲染行为。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></code></pre><h2 id="69-React-的功能是什么？"><a href="#69-React-的功能是什么？" class="headerlink" title="69. React 的功能是什么？"></a>69. React 的功能是什么？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">1.它使用虚拟DOM而不是真实DOM。2.它使用服务器端渲染。3.它遵循单向数据流或数据绑定。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="70-列出-React-的一些主要优点。"><a href="#70-列出-React-的一些主要优点。" class="headerlink" title="70. 列出 React 的一些主要优点。"></a>70. 列出 React 的一些主要优点。</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">它提高了应用程序的性能它可以方便地在客户端和服务器端使用由于有了JSX，代码的可读性提高了React易于与其他框架（如Meteor，Angular等）集成使用React，编写UI测试用例变得非常容易<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="71-对-Virtual-DOM-有什么了解？解释它的工作。"><a href="#71-对-Virtual-DOM-有什么了解？解释它的工作。" class="headerlink" title="71. 对 Virtual DOM 有什么了解？解释它的工作。"></a>71. 对 Virtual DOM 有什么了解？解释它的工作。</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">虚拟DOM是轻量级的JavaScript对象，其最初只是真实DOM的副本。 它是一个节点树，列出了元素，它们的属性和内容作为对象及其属性。React的render函数从React组件中创建一个节点树。然后，它会响应由用户或系统执行的各种操作引起的数据模型中的突变来更新此树。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="72-state-和-props-有何区别？"><a href="#72-state-和-props-有何区别？" class="headerlink" title="72. state 和 props 有何区别？"></a>72. state 和 props 有何区别？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">定义位置不同：state 是在组件内部定义的，而 props 是从组件的父组件传递进来的。可变性不同：state 是组件的内部状态，可以通过调用 setState() 方法来更新它的值，而 props 是从父组件传递进来的，通常是不可变的。作用不同：state 用于存储组件的数据和状态，可以用来更新组件的视图。props 则用于从父组件向子组件传递数据和方法，用于子组件的渲染。访问方式不同：在组件内部可以通过 this.state 来访问组件的 state 值，而在组件内部可以通过 this.props 来访问父组件传递给子组件的 props 值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="73-什么是高阶组件？"><a href="#73-什么是高阶组件？" class="headerlink" title="73. 什么是高阶组件？"></a>73. 什么是高阶组件？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">高阶组件是重用组件逻辑的高级方法。基本上，这是从React的组成性质衍生的模式。HOC是自定义组件，在其中包裹了另一个组件。他们可以接受任何动态提供的子组件，但不会修改或复制其输入组件中的任何行为。您可以说HOC是“纯”组件。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="74-Redux-遵循的三个原则是什么？"><a href="#74-Redux-遵循的三个原则是什么？" class="headerlink" title="74. Redux 遵循的三个原则是什么？"></a>74. Redux 遵循的三个原则是什么？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">1.单一事实来源：整个应用程序的状态存储在单个存储中的对象/状态树中。单一状态树使跟踪随时间变化以及调试或检查应用程序变得更加容易。2.状态是只读的：更改状态的唯一方法是触发操作。动作是描述更改的普通JS对象。就像状态是数据的最小表示一样，操作是数据更改的最小表示。3.使用纯函数进行更改： 为了指定操作如何转换状态树，您需要纯函数。纯函数是那些返回值仅取决于其参数值的函数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="75-对-React-refs-的理解？应用场景？"><a href="#75-对-React-refs-的理解？应用场景？" class="headerlink" title="75. 对 React refs 的理解？应用场景？"></a>75. 对 React refs 的理解？应用场景？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">在 React 中，Refs 是一种允许我们访问 DOM 节点或者组件实例的方法。Refs 提供了一种方式，允许我们直接操作 DOM 节点或组件实例，而无需经过 React 的 Virtual DOM。Refs 的主要作用是解决访问组件内部 DOM 节点的问题。在 React 中，由于组件的渲染是通过 Virtual DOM 实现的，因此在某些情况下需要直接访问组件内部的 DOM 节点，比如进行动画效果、获取输入框的值等等。应用场景：获取组件内部的 DOM 节点，比如获取表单元素的值、滚动条的位置等。与第三方库或原生 API 集成，比如集成 Google 地图、视频播放器等，需要访问 DOM 节点或组件实例。控制组件的生命周期，比如手动触发组件的某些生命周期函数。处理焦点、选择等问题，比如实现自动聚焦、选中文本等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="76-React-Router-的路由模式有哪些？"><a href="#76-React-Router-的路由模式有哪些？" class="headerlink" title="76. React-Router 的路由模式有哪些？"></a>76. React-Router 的路由模式有哪些？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">BrowserRouter：基于 HTML5 的 History API，使用 HTML5 中的 pushState() 和 replaceState() 方法来实现路由跳转。HashRouter：使用 URL 中的哈希值来实现路由跳转，这是一种旧的路由实现方式。MemoryRouter：使用内存中的 history 实现路由跳转，不会改变 URL。StaticRouter：用于服务器端渲染，通过将 URL 作为 props 传递给组件来实现路由跳转。NativeRouter：用于 React Native 开发，提供了与 React Native 导航 API 一致的路由实现方式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="77-React-中的-key-有什么作用？"><a href="#77-React-中的-key-有什么作用？" class="headerlink" title="77. React 中的 key 有什么作用？"></a>77. React 中的 key 有什么作用？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">跟Vue一样，React 也存在 Diff算法，而元素key属性的作用是用于判断元素是新创建的还是被移动的元素，从而减少不必要的Diff因此key的值需要为每一个元素赋予一个确定的标识<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="78-设置-key-的注意事项有哪些？"><a href="#78-设置-key-的注意事项有哪些？" class="headerlink" title="78. 设置 key 的注意事项有哪些？"></a>78. 设置 key 的注意事项有哪些？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">key 应该是唯一的key不要使用随机值（随机数在下一次 render 时，会重新生成一个数字）避免使用 index 作为 key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="79-什么是-HTTP"><a href="#79-什么是-HTTP" class="headerlink" title="79. 什么是 HTTP?"></a>79. 什么是 HTTP?</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">HTTP（Hypertext Transfer Protocol）是一种用于传输超文本的协议。它是 Web 的基础，用于客户端和服务器之间的通信，客户端通过 HTTP 请求获取 Web 页面或资源，服务器通过 HTTP 响应返回 Web 页面或资源。HTTP 通常使用 TCP（Transmission Control Protocol）作为传输协议，在传输层之上实现了一个面向请求和响应的客户端和服务器之间的通信。HTTP 请求由客户端发起，包含请求方法、URL、HTTP 版本号、请求头和请求正文等信息；HTTP 响应由服务器返回，包含响应状态码、响应头和响应正文等信息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></code></pre><h2 id="80-什么是-HTTPS？"><a href="#80-什么是-HTTPS？" class="headerlink" title="80. 什么是 HTTPS？"></a>80. 什么是 HTTPS？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">HTTPS（Hypertext Transfer Protocol Secure）是基于 HTTP 协议的安全版本，它使用了 SSL/TLS 加密协议来保护数据传输的安全性和完整性。HTTPS 通过 SSL/TLS 协议对通信进行加密，可以防止数据在传输过程中被窃听和篡改。 HTTPS 的 URL 以 "https://" 开头，常用于传输敏感信息的 Web 应用，比如银行、电商等。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="81-HTTP-和-HTTPS-的区别"><a href="#81-HTTP-和-HTTPS-的区别" class="headerlink" title="81. HTTP 和 HTTPS 的区别?"></a>81. HTTP 和 HTTPS 的区别?</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">安全性：HTTP 不加密，数据传输容易被窃听和篡改；HTTPS 使用 SSL/TLS 加密协议，保证数据传输的安全性和完整性。端口号：HTTP 默认使用端口号 80，HTTPS 默认使用端口号 443。证书：HTTPS 需要使用 SSL/TLS 数字证书，用于验证服务器的身份和建立安全通道；而 HTTP 不需要证书。性能：HTTPS 比 HTTP 的传输速度慢，因为 HTTPS 需要进行加密和解密操作，增加了服务器的负担和网络延迟。SEO：HTTPS 可以提升网站的搜索引擎排名，因为谷歌等搜索引擎将 HTTPS 作为一个排名因素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="82-为什么说-HTTPS-比-HTTP-安全"><a href="#82-为什么说-HTTPS-比-HTTP-安全" class="headerlink" title="82. 为什么说 HTTPS 比 HTTP 安全?"></a>82. 为什么说 HTTPS 比 HTTP 安全?</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">HTTPS 比 HTTP 更安全，主要是因为 HTTPS 在数据传输的过程中使用了 SSL/TLS 协议来加密和验证数据的完整性，从而保证了数据的安全性和完整性。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="83-HTTPS-是如何保证安全的？"><a href="#83-HTTPS-是如何保证安全的？" class="headerlink" title="83. HTTPS 是如何保证安全的？"></a>83. HTTPS 是如何保证安全的？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">加密通信：HTTPS 使用 SSL/TLS 协议对通信过程进行加密，防止数据在传输过程中被窃听和篡改。SSL/TLS 协议通过使用公钥和私钥来建立安全通道，加密传输数据。身份验证：HTTPS 使用 SSL/TLS 数字证书对服务器和客户端进行身份验证，防止中间人攻击。SSL/TLS 数字证书是由受信任的第三方机构颁发的，用于验证服务器的身份和建立安全通道。数据完整性：HTTPS 使用消息摘要算法对传输的数据进行验证，保证数据的完整性，防止数据在传输过程中被篡改。消息摘要算法使用哈希函数将原始数据转换成固定长度的摘要值，然后将摘要值发送给接收方进行验证，如果验证失败，则说明数据已经被篡改。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="84-如何理解-UDP-和-TCP-区别"><a href="#84-如何理解-UDP-和-TCP-区别" class="headerlink" title="84. 如何理解 UDP 和 TCP? 区别?"></a>84. 如何理解 UDP 和 TCP? 区别?</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">UDP（User Datagram Protocol）和 TCP（Transmission Control Protocol）都是用于在网络中传输数据的协议连接性：TCP 是一种面向连接的协议，而 UDP 是一种无连接的协议。TCP 在传输数据之前需要先建立连接，而 UDP 不需要建立连接。可靠性：TCP 是一种可靠的协议，它通过确认和重传机制来保证数据传输的可靠性。UDP 是一种不可靠的协议，它不提供数据重传机制。消息大小限制：TCP 没有消息大小的限制，而 UDP 的消息大小被限制在 65,507 个字节以内。传输效率：由于 TCP 需要建立连接、确认和重传数据等机制，因此其传输效率相对较低。而 UDP 没有这些机制，因此其传输效率相对较高。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="85-DNS-协议-是什么？"><a href="#85-DNS-协议-是什么？" class="headerlink" title="85. DNS 协议 是什么？"></a>85. DNS 协议 是什么？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">DNS（Domain Names System），域名系统，是互联网一项服务，是进行域名和与之相对应的 IP 地址进行转换的服务器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="86-说说-DNS-完整的查询过程"><a href="#86-说说-DNS-完整的查询过程" class="headerlink" title="86. 说说 DNS 完整的查询过程?"></a>86. 说说 DNS 完整的查询过程?</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">首先搜索浏览器的 DNS 缓存，缓存中维护一张域名与 IP 地址的对应表若没有命中，则继续搜索操作系统的 DNS 缓存若仍然没有命中，则操作系统将域名发送至本地域名服务器，本地域名服务器采用递归查询自己的 DNS 缓存，查找成功则返回结果若本地域名服务器的 DNS 缓存没有命中，则本地域名服务器向上级域名服务器进行迭代查询首先本地域名服务器向根域名服务器发起请求，根域名服务器返回顶级域名服务器的地址给本地服务器本地域名服务器拿到这个顶级域名服务器的地址后，就向其发起请求，获取权限域名服务器的地址本地域名服务器根据权限域名服务器的地址向其发起请求，最终得到该域名对应的 IP 地址本地域名服务器将得到的 IP 地址返回给操作系统，同时自己将 IP 地址缓存起来操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起至此，浏览器就得到了域名对应的 IP 地址，并将 IP 地址缓存起<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="87-说说地址栏输入-URL-敲下回车后发生了什么？"><a href="#87-说说地址栏输入-URL-敲下回车后发生了什么？" class="headerlink" title="87. 说说地址栏输入 URL 敲下回车后发生了什么？"></a>87. 说说地址栏输入 URL 敲下回车后发生了什么？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">URL解析DNS 查询TCP 连接HTTP 请求响应请求页面渲染<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="88-说说-HTTP1-0-x2F-1-1-x2F-2-0-的区别-20qz-pylcc"><a href="#88-说说-HTTP1-0-x2F-1-1-x2F-2-0-的区别-20qz-pylcc" class="headerlink" title="88. 说说 HTTP1.0/1.1/2.0 的区别?20qz-pylcc"></a>88. 说说 HTTP1.0/1.1/2.0 的区别?<font color="white">20qz-pylcc</font></h2><pre><code><pre class="line-numbers language-none"><code class="language-none">HTTP1.0：浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接HTTP1.1：引入了持久连接，即TCP连接默认不关闭，可以被多个请求复用在同一个TCP连接里面，客户端可以同时发送多个请求虽然允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的，服务器只有处理完一个请求，才会接着处理下一个请求。如果前面的处理特别慢，后面就会有许多请求排队等着新增了一些请求方法新增了一些请求头和响应头HTTP2.0：采用二进制格式而非文本格式完全多路复用，而非有序并阻塞的、只需一个连接即可实现并行使用报头压缩，降低开销服务器推送<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="89-说说-HTTP-常见的状态码有哪些，适用场景？"><a href="#89-说说-HTTP-常见的状态码有哪些，适用场景？" class="headerlink" title="89. 说说 HTTP 常见的状态码有哪些，适用场景？"></a>89. 说说 HTTP 常见的状态码有哪些，适用场景？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">1 表示消息2 表示成功3 表示重定向4 表示请求错误5 表示服务器错误100：客户端在发送POST数据给服务器前，征询服务器情况，看服务器是否处理POST的数据，如果不处理，客户端则不上传POST数据，如果处理，则POST上传数据。常用于POST大数据传输206：一般用来做断点续传，或者是视频文件等大文件的加载301：永久重定向会缓存。新域名替换旧域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名302：临时重定向不会缓存，常用 于未登陆的用户访问用户中心重定向到登录页面304：协商缓存，告诉客户端有缓存，直接使用缓存中的数据，返回页面的只有头部信息，是没有内容部分400：参数有误，请求无法被服务器识别403：告诉客户端进制访问该站点或者资源，如在外网环境下，然后访问只有内网IP才能访问的时候则返回404：服务器找不到资源时，或者服务器拒绝请求又不想说明理由时503：服务器停机维护时，主动用503响应请求或 nginx 设置限速，超过限速，会返回503504：网关超时<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="90-说一下-GET-和-POST-的区别？"><a href="#90-说一下-GET-和-POST-的区别？" class="headerlink" title="90. 说一下 GET 和 POST 的区别？"></a>90. 说一下 GET 和 POST 的区别？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">GET在浏览器回退时是无害的，而POST会再次提交请求。GET产生的URL地址可以被Bookmark，而POST不可以。GET请求会被浏览器主动cache，而POST不会，除非手动设置。GET请求只能进行url编码，而POST支持多种编码方式。GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。GET请求在URL中传送的参数是有长度限制的，而POST没有。对参数的数据类型，GET只接受ASCII字符，而POST没有限制。GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。GET参数通过URL传递，POST放在Request body中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="91-常用的版本管理工具有哪些？"><a href="#91-常用的版本管理工具有哪些？" class="headerlink" title="91. 常用的版本管理工具有哪些？"></a>91. 常用的版本管理工具有哪些？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">git   SVN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="92-谈谈你对-git-的理解。"><a href="#92-谈谈你对-git-的理解。" class="headerlink" title="92. 谈谈你对 git 的理解。"></a>92. 谈谈你对 git 的理解。</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">git是一个分布式版本控制软件，最初目的是为更好地管理Linux内核开发而设计<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="93-git-常见的命令"><a href="#93-git-常见的命令" class="headerlink" title="93. git 常见的命令"></a>93. git 常见的命令</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">git addgit commitgit pushgit pullgit clonegit checkout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="94-说说-Git-中-fork-clone-branch-这三个概念，有什么区别"><a href="#94-说说-Git-中-fork-clone-branch-这三个概念，有什么区别" class="headerlink" title="94. 说说 Git 中 fork, clone,branch 这三个概念，有什么区别?"></a>94. 说说 Git 中 fork, clone,branch 这三个概念，有什么区别?</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">fork 只能对代码仓进行操作，且 fork 不属于 git 的命令，通常用于代码仓托管平台的一种“操作”clone 是 git 的一种命令，它的作用是将文件从远程代码仓下载到本地，从而形成一个本地代码仓branch 特征与 fork 很类似，fork 得到的是一个新的、自己的代码仓，而 branch 得到的是一个代码仓的一个新分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="95-说说对-git-pull-和-git-fetch-的理解？有什么区别？"><a href="#95-说说对-git-pull-和-git-fetch-的理解？有什么区别？" class="headerlink" title="95. 说说对 git pull 和 git fetch 的理解？有什么区别？"></a>95. 说说对 git pull 和 git fetch 的理解？有什么区别？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">git fetch 命令用于从另一个存储库下载对象和引用git pull 命令用于从另一个存储库或本地分支获取并集成(整合)相同点：在作用上他们的功能是大致相同的，都是起到了更新代码的作用不同点：git pull是相当于从远程仓库获取最新版本，然后再与本地分支merge，即git pull = git fetch + git merge相比起来，git fetch 更安全也更符合实际要求，在 merge 前，我们可以查看更新情况，根据实际情况再决定是否合并<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="96-如何解决-git-冲突？"><a href="#96-如何解决-git-冲突？" class="headerlink" title="96. 如何解决 git 冲突？"></a>96. 如何解决 git 冲突？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">当Git无法自动合并分支时，就必须首先解决冲突，解决冲突后，再提交，合并完成解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="97-说说-git-发生冲突的场景？"><a href="#97-说说-git-发生冲突的场景？" class="headerlink" title="97. 说说 git 发生冲突的场景？"></a>97. 说说 git 发生冲突的场景？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">一般情况下，出现分支的场景有如下：多个分支代码合并到一个分支时多个分支向同一个远端分支推送<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="98-git-reset-干什么的？"><a href="#98-git-reset-干什么的？" class="headerlink" title="98. git reset 干什么的？"></a>98. git reset 干什么的？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">reset用于回退版本，可以遗弃不再使用的提交执行遗弃时，需要根据影响的范围而指定不同的参数，可以指定是否复原索引或工作树内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="99-git-revert-是干什么的？"><a href="#99-git-revert-是干什么的？" class="headerlink" title="99. git revert 是干什么的？"></a>99. git revert 是干什么的？</h2><pre><code><pre class="line-numbers language-none"><code class="language-none">跟git reset用法基本一致，git revert 撤销某次操作，此次操作之前和之后的 commit和history都会保留，并且把这次撤销，作为一次最新的提交<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h2 id="100-get-reset-和-git-revert-的区别20qz-pylcc"><a href="#100-get-reset-和-git-revert-的区别20qz-pylcc" class="headerlink" title="100. get reset 和 git revert 的区别20qz-pylcc"></a>100. get reset 和 git revert 的区别<font color="white">20qz-pylcc</font></h2><pre><code> <pre class="line-numbers language-none"><code class="language-none">git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commitgit reset 是把HEAD向后移动了一下，而git revert是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容在回滚这一操作上看，效果差不多。但是在日后继续 merge 以前的老版本时有区别<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="101-当你开发到一半，现在要修改别的分支问题的时候，怎么处理？"><a href="#101-当你开发到一半，现在要修改别的分支问题的时候，怎么处理？" class="headerlink" title="101. 当你开发到一半，现在要修改别的分支问题的时候，怎么处理？"></a>101. 当你开发到一半，现在要修改别的分支问题的时候，怎么处理？</h2><pre><code> <pre class="line-numbers language-none"><code class="language-none">可以使用git stash缓存当前区域的代码git stash：保存开发到一半的代码git commit -m '修改问题'git stash pop：将代码追加到最新的提交之后<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> REACT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>易错点整理</title>
      <link href="/2023/07/15/yi-cuo-dian-zheng-li/"/>
      <url>/2023/07/15/yi-cuo-dian-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="易错点整理"><a href="#易错点整理" class="headerlink" title="易错点整理"></a>易错点整理</h1><h2 id="1-什么是虚拟-DOM"><a href="#1-什么是虚拟-DOM" class="headerlink" title="1.什么是虚拟 DOM?"></a>1.什么是虚拟 DOM?</h2><p>虚拟 DOM(Virtual DOM)是一种用于提升 Web 应用性能的概念和技术。<br>它是通过在 JavaScript 内存中创建 DOM 树的轻量级副本来实现的，<br>而不是直接操作浏览器中的实际 DOM.虚拟 DOM 可以被看作是对实际 DOM 树的抽象表示。<br>虚拟 DOM 的工作流程如下：</p><p>1、初始化阶段：在初始渲染时，应用程序的视图层（通常是由组件组成的）会被映射到内存中的虚拟 DOM 树，即创建虚拟 DOM 树。<br>2、更新阶段：当应用程序的状态发生变化时，重新渲染视图时，会创建一个新的虚拟 DOM 树。<br>3、对比变化：将新的虚拟 DOM 树与旧的虚拟 DOM 树进行比较，找出两个树之间的差异，这个过程称为虚拟 DOM diff(差异)算法。<br>4、更新实际 DOM:只将前面得到的差异所对应的最小节点更新到实际的 DOM 树中，而不是重新渲染整个视图。</p><p>这种比较和更新的方式相对于直接操作实际 DOM 来说，更加高效。<br>因为直接操作实际 DOM 可能会导致频繁的重排和重绘操作，而虚拟 DOM 的比较过程可以更加智能地优化 DOM 操作，以减少实际 DOM 的操作次数，从而提高性能。</p><p>虚拟 DOM 的优势在于简化了对视图的操作，提高了开发效率和用户体验。<br>它通过尽可能少地操作实际 DOM,减少了性能上的开销，同时也提供了更灵活的抽象层，使得开发者能够专注于业务逻辑的实现。<br>常见的虚拟 DOM 实现有 React 的 Virtual DOM 和 Vue 的 Virtual DOM.</p><h2 id="2-css-的定位以及区别有哪些"><a href="#2-css-的定位以及区别有哪些" class="headerlink" title="2.css 的定位以及区别有哪些?"></a>2.css 的定位以及区别有哪些?</h2><p>CSS 中的定位主要有以下几种方式，每种方式都有不同的特点和用途：<br>1、静态定位(Static Positioning):默认的定位方式，元素按照文档流进行布局，不受其他定位方式的影响。<br>2、相对定位(Relative Positioning):通过 position:relative 属性设置，元素在正常文档流中仍占据原有的空间，但可以通过设置 top、right、bottom 和 left 属性来相对于原来的位置进行微调。<br>3、绝对定位(Absolute Positioning) :通过 position:absolute 属性设置，元素从正常文档流中脱离，并相对于最近的已定位祖先元素或者整个页面进行定位。可以通过设置 top、right、bottom 和 left 属性来确定元素的位置。<br>4、固定定位(Fixed Positioning):通过 position:fixed 属性设置，元素相对于浏览器窗口进行定位，即使滚动页面，元素也会保持在固定的位置。可以通过设置 top、right、bottom 和 left 属性来确定元素的位置。<br>5、黏性定位(Sticky Positioning) :通过 position:sticky 属性设置，元素在位置未超过指定阈值时表现为相对定位，超过阈值后则表现为固定定位。可以通过设置 top、right、bottom 和 left 属性以及 top、right、bottom 和 left 的阈值来确定元素的位置。</p><p>这些定位方式之间的区别在于元素的定位方式、参考点以及是否会对其他元素的布局产生影响。通过合理地使用不同的定位方式，可以实现复杂的布局效果和交互效果。</p><h2 id="3-事件冒泡和事件捕捉有什么区别"><a href="#3-事件冒泡和事件捕捉有什么区别" class="headerlink" title="3.事件冒泡和事件捕捉有什么区别?"></a>3.事件冒泡和事件捕捉有什么区别?</h2><p>事件冒泡和事件捕捉是描述浏览器中事件传播的两种不同方式。<br>事件冒泡 (Event Bubbling)是指当一个元素触发了某个事件时，事件会从触发元素开始向上冒泡传播到其父元素，再传播到更高层级的祖先元素，直至传播到文档（即＜ html&gt;元素）。<br>例如，当在一个按钮上点击时，点击事件将首先在按钮元素上触发，然后冒泡到按钮的父元素，再冒泡到父元素的父元素，依此类推，直到冒泡到文档根节点。</p><p>事件捕捉(Event Capturing)是指触发事件的元素的祖先元素优先捕获该事件，然后事件传播到触发元素本身。捕捉阶段发生在冒泡阶段之前。<br>事件捕捉的流程是从文档（即＜ html&gt;元素）开始，然后逐级向下捕获事件，直至捕获到触发事件的元素。<br>在事件传播过程中，可以通过调用 addEventListener 方法的第三个参数，将事件处理程序设置为在捕获阶段进行处理还是冒泡阶段进行处理。默认情况下，addEventListener 的第三个参数为 false,即在冒泡阶段进行处理。如果将其设置为 true,则事件将在捕获阶段进行处理。</p><p>区别总结：<br>★ 事件冒泡从目标元素开始，向上冒泡至祖先元素，触发顺序是从内向外。<br>★ 事件捕获从最顶层的父元素开始，向下捕获至子元素，触发顺序是从外向内。<br>★ 事件模型规定，DOM 树中的每个节点在一个事件传播阶段只能触发一次，即事件捕获或事件冒泡。<br>★ 在使用 addEventListener 方法时，可以通过第三个参数(布尔值)来控制事件是在捕获阶段触发还是在冒泡阶段触发，传入 true 表示在捕获阶段触发，传入 false(默认)表示在冒泡阶段触发。</p><h2 id="4-数组的常用方法"><a href="#4-数组的常用方法" class="headerlink" title="4.数组的常用方法"></a>4.数组的常用方法</h2><p>数组是一种常见的数据结构，它可以存储多个相同类型的元素。在编程中，数组提供了许多方法来操作和处理数据。以下是一些常用的数组方法及其常见的应用场景：<br>1.push():在数组末尾添加一个或多个元素。常见场景：向数组中添加新的数据项。<br>2.pop():删除并返回数组的最后一个元素。常见场景：从数组中删除最后一个元素。<br>3.shift():删除并返回数组的第一个元素。常见场景：从数组中删除第一个元素。<br>4.unshift():在数组开头添加一个或多个元素。常见场景：向数组开头添加新的数据项。<br>5.concat():连接两个或多个数组，并返回一个新数组。常见场景：合并多个数组。<br>6.slice():返回数组的一部分，不修改原数组。常见场景：提取数组的子集。<br>7.splice():修改原数组，删除、替换或插入元素。常见场景：在指定位置进行数组元素的增删改操作。<br>8.indexOf():返回指定元素在数组中首次出现的索引，如果不存在则返回－1.常见场景：查找元素在数组中的位置。<br>9.includes():判断数组是否包含指定元素，返回布尔值。常见场景：判断元素是否存在于数组中。<br>10.join():将数组的所有元素转换为字符串，并使用指定的分隔符连接。常见场景：将数组转换为字符串。<br>11.map():遍历数组的每个元素，并通过回调函数对元素进行处理，返回一个新数组。常见场景：对数组中的每个元素进行操作或转换。<br>12.filter():遍历数组的每个元素，并通过回调函数对元素进行过滤，返回一个新数组。常见场景：根据条件筛选出符合要求的元素。<br>13.reduce():遍历数组的每个元素，并通过回调函数对元素进行累计计算，返回一个值。常见场景：对数组元素进行求和、求平均值等操作。</p><h2 id="5-let-和-var-的区别"><a href="#5-let-和-var-的区别" class="headerlink" title="5.let 和 var 的区别"></a>5.let 和 var 的区别</h2><p>在 JavaScript 中，let 和 var 都是用来声明变量的关键字，但是它们有一些不同的特性。<br>1、变量作用域：let 声明的变量是块级作用域，即只在当前代码块中有效，而 var 声明的变量是函数作用域或全局作用域，即在函数内部或全局范围内都有效。<br>2、变量提升：var 声明的变量会被提升到函数或全局作用域的顶部，即可以在声明之前使用，而 let 声明的变量不会被提升，即必须先声明后使用。<br>3、重复声明：在同一个作用域内，使用 var 声明同名变量会被覆盖，而使用 let 声明同名变量会报错。<br>4、循环中的使用：在 for 循环中使用 var 声明的变量会存在变量提升和变量共享的问题，而使用 let 声明的变量则不会。</p><p>总之，let 更符合块级作用域的概念，避免了变量提升和重复声明等问题，使代码更加健壮和可维护</p>]]></content>
      
      
      
        <tags>
            
            <tag> 易错点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人简历</title>
      <link href="/2023/05/29/ge-ren-jian-li/"/>
      <url>/2023/05/29/ge-ren-jian-li/</url>
      
        <content type="html"><![CDATA[<p>这是作者本人的个人简历</p><h1 id="邢瀚"><a href="#邢瀚" class="headerlink" title="邢瀚 "></a>邢瀚 <img src="/2023/05/29/ge-ren-jian-li/2.png" width="100" height="100" div="" align="right"></h1><p>求职意向：web 前端<br>性别：男<br>电话：18547162936<br>邮箱：<a href="mailto:2936541941@qq.com">2936541941@qq.com</a></p><!-- ![](./个人简历/2.png) --><h2 id="专业技能"><a href="#专业技能" class="headerlink" title="专业技能"></a>专业技能</h2><ol><li>熟练掌握 HTML5 标准标记语言，包括语法规则、标签元素、表单处理、媒体元素等。能够构建语义化的网页结构。</li><li>熟练掌握 CSS3 层叠样式表，包括选择器、盒模型、布局、动画、渐变等。能够实现精美的样式设计和页面布局。</li><li>熟练 JavaScript 语法、变量、函数、DOM 操作、事件处理等基础知识并进行网页交互和动态效果实现。</li><li>熟练使用主流的前端框架 Vue 和 React ，能够独立开发前端页面。了解它们的组件化开发思想、数据驱动视图的特性，能够实现复杂的前端应用逻辑。</li><li>熟悉 Element UI 等前端 UI 库，能够利用其提供的组件和样式快速构建用户界面。</li><li>熟悉 Less 和 Sass CSS 预处理器，能够使用其提供的变量、嵌套、混合等特性，提高 CSS 代码的可维护性和重用性。</li><li>有使用 Node.js 的 Express 后端框架的经验，能够搭建和开发服务器端应用，处理请求和响应。</li><li>有使用 MySQL 和 Redis 数据库的经验，能够进行数据存储和查询操作，并了解数据库性能优化和缓存技术。</li><li>熟悉 Git 版本控制工具，能够进行代码管理、分支操作和团队协作。熟悉常用的 Git 命令和工作流程。</li></ol><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><h3 id="茶意天成移动端商城平台-2022-09-2023-01"><a href="#茶意天成移动端商城平台-2022-09-2023-01" class="headerlink" title="茶意天成移动端商城平台 2022.09-2023.01"></a>茶意天成移动端商城平台 2022.09-2023.01</h3><h4 id="项目描述："><a href="#项目描述：" class="headerlink" title="项目描述："></a>项目描述：</h4><p>该项目是一个移动端电商平台的开发，旨在为用户提供方便、快捷的购物体验。采用前后端分离的架构设计，前端使用 Vue.js 作为主要开发技术，后端使用 Node.js 和 Express 框架，并结合 MySQL 数据库进行数据存储和管理，实现了灵活可扩展的用户界面。</p><h4 id="项目技术栈："><a href="#项目技术栈：" class="headerlink" title="项目技术栈："></a>项目技术栈：</h4><p>Vue2 框架：作为主要的前端开发技术，利用 Vue 的组件化和响应式特态管理，通过验证 Token 确保用户的身份和权限。<br>Vue Router：通过 Vue Router 实现了页面路由跳转和导航守卫，提供了流畅的页面切换和权限控制。<br>Vuex：利用 Vuex 进行全局状态管理，集中管理应用的共享数据，确保数据的一致性和可维护性。<br>Axios：使用 Axios 进行异步数据请求和响应处理，与后端 API 进行数据交互，实现前后端的数据通信。<br>Token 认证：使用 Token 进行用户登录状态管理，通过验证 Token 确保用户的身份和权限。<br>Flexible.js：使用 Flexible.js 进行屏幕自适应布局，使得应用能够适配不同尺寸的移动设备。<br>Element UI 和 Mint-UI：使用这两个 UI 组件库进行页面的美化和优化，提供了丰富的可复用组件。<br>Node.js 和 Express：作为后端开发技术，使用 Node.js 和 Express 搭建了后端服务器，处理前端的请求和响应。<br>MySQL 数据库：使用 MySQL 数据库存储用户信息、商品列表、购物车、地址管理和订单信息等数据，并进行规范化处理。</p><h4 id="项目功能："><a href="#项目功能：" class="headerlink" title="项目功能："></a>项目功能：</h4><ol><li>用户注册页：实现了用户注册功能，用户需填写手机号码、短信验证码和密码完成注册。注册成功后可使用手机号码和密码登录。</li><li>用户登录页：实现了用户登录功能，可使用用户名和密码登录，也可使用短信验证码登录。提供找回密码功能。登录成功后生成并保存 token 用于身份验证。</li><li>商品列表页：展示商品信息，支持筛选条件。用户可将商品加入购物车或查看详情。</li><li>搜索页：实现商品搜索功能，用户输入关键词进行搜索，展示符合要求的商品列表。</li><li>分类页：展示商品分类信息，支持分类条件筛选。用户可将商品加入购物车或查看详情。</li><li>商品详情页：展示商品详细信息，包括名称、价格、描述等。用户可将商品加入购物车。</li><li>购物车页：展示购物车中的商品信息，支持删除和修改操作。用户可进行下单操作。</li><li>地址管理页：管理用户的收货地址，包括添加、删除、修改和设置默认地址功能。</li><li>订单页：查看订单信息，支持提交订单等操作。</li><li>支付页：完成用户的支付操作，调用第三方支付接口进行支付。</li></ol><h3 id="优医问诊-2023-02-2023-06"><a href="#优医问诊-2023-02-2023-06" class="headerlink" title="优医问诊 2023.02-2023.06"></a>优医问诊 2023.02-2023.06</h3><h4 id="项目描述：-1"><a href="#项目描述：-1" class="headerlink" title="项目描述："></a>项目描述：</h4><p>优医问诊是一个基于 Vue.js 和 Node.js 的全栈项目，旨在提供在线医疗问诊服务。</p><h4 id="项目技术栈：-1"><a href="#项目技术栈：-1" class="headerlink" title="项目技术栈："></a>项目技术栈：</h4><p>Vue.js：使用 Vue.js 作为前端开发框架，实现了组件化的开发方式，提高了代码的可维护性和复用性。<br>Vue Router：利用 Vue Router 实现了前端路由功能，实现页面间的无刷新跳转和导航。<br>Vuex：使用 Vuex 进行状态管理，统一管理全局状态，方便不同组件间的数据共享和通信。<br>Axios：通过 Axios 库进行异步数据请求，与后端进行数据交互和处理。</p><h4 id="项目功能：-1"><a href="#项目功能：-1" class="headerlink" title="项目功能："></a>项目功能：</h4><ol><li>用户认证与授权：实现用户注册、登录和权限验证功能，保护用户信息的安全性和访问权限的控制。</li><li>医生列表与搜索：用户可以查看医生列表，包括医生的姓名、职称、所属科室等信息。用户可以通过关键词搜索医生。</li><li>问诊咨询：用户可以向医生发起在线咨询，包括文字聊天和语音通话等形式。医生可以及时回复用户的咨询并提供医疗建议。</li><li>问诊记录与管理：用户可以查看自己的问诊记录，包括历史咨询的医生、咨询时间、咨询内容等信息。用户也可以对问诊记录进行管理，如删除或查看详情。</li><li>医生排班与预约：医生可以设置自己的出诊时间和预约限额，用户可以根据医生的排班情况进行预约。</li><li>支付与订单管理：用户在进行问诊服务时，可以进行在线支付。系统会生成订单，并提供订单管理功能，包括查看订单状态、取消订单等操作。</li></ol><h2 id="自我评价"><a href="#自我评价" class="headerlink" title="自我评价"></a>自我评价</h2><p>工作积极认真，细心负责，熟练运用办公自动化软件，善于在工作中提出问题、发现问题、解决问题，有较强的分析能力；勤奋好学，踏实肯干，动手能力强，认真负责，有很强的社会责任感；坚毅不拔，吃苦耐劳，喜欢迎接新挑战。</p><h2 id="教育经历"><a href="#教育经历" class="headerlink" title="教育经历"></a>教育经历</h2><p>上海开放大学 本科 软件工程</p>]]></content>
      
      
      
        <tags>
            
            <tag> 简历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE 问题</title>
      <link href="/2023/05/21/vue-chang-jian-wen-ti-zheng-li/"/>
      <url>/2023/05/21/vue-chang-jian-wen-ti-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="VUE-常见问题整理"><a href="#VUE-常见问题整理" class="headerlink" title="VUE 常见问题整理"></a>VUE 常见问题整理</h1><h2 id="1-vue-优点？"><a href="#1-vue-优点？" class="headerlink" title="1.vue 优点？"></a>1.vue 优点？</h2><p>轻量级框架：只关注视图层，是一个构建数据的视图集合，大小只有几十 kb ；<br>简单易学：国人开发，中文文档，不存在语言障碍 ，易于理解和学习；<br>双向数据绑定：保留了 angular 的特点，在数据操作方面更为简单；<br>组件化：保留了 react 的优点，实现了 html 的封装和重用，在构建单页面应用方面有着独特的优势；<br>视图，数据，结构分离：使数据的更改更为简单，不需要进行逻辑代码的修改，只需要操作数据就能完成相关操作；<br>虚拟 DOM：dom 操作是非常耗费性能的， 不再使用原生的 dom 操作节点，极大解放 dom 操作，但具体操作的还是 dom 不过是换了另一种方式；<br>运行速度更快：相比较于 react 而言，同样是操作虚拟 dom ，就性能而言， vue 存在很大的优势。</p><h2 id="2-vue-父组件向子组件传递数据？"><a href="#2-vue-父组件向子组件传递数据？" class="headerlink" title="2.vue 父组件向子组件传递数据？"></a>2.vue 父组件向子组件传递数据？</h2><p>1.vue 优点？<br>答：通过 props</p><h2 id="3-子组件像父组件传递事件？"><a href="#3-子组件像父组件传递事件？" class="headerlink" title="3.子组件像父组件传递事件？"></a>3.子组件像父组件传递事件？</h2><p>答：$emit 方法</p><h2 id="4-v-show-和-v-if-指令的共同点和不同点？"><a href="#4-v-show-和-v-if-指令的共同点和不同点？" class="headerlink" title="4.v-show 和 v-if 指令的共同点和不同点？"></a>4.v-show 和 v-if 指令的共同点和不同点？</h2><p>答:</p><p>共同点： 都能控制元素的显示和隐藏；</p><p>不同点： 实现本质方法不同，v-show 本质就是通过控制 css 中的 display 设置为 none，控制隐藏，只会编译一次；v-if 是动态的向 DOM 树内添加或者删除 DOM 元素，若初始值为 false ，就不会编译了。而且 v-if 不停的销毁和创建比较消耗性能。总结：如果要频繁切换某节点，使用 v-show (切换开销比较小，初始开销较大)。如果不需要频繁切换某节点使用 v-if（初始渲染开销较小，切换开销比较大）。</p><h2 id="5-如何让-CSS-只在当前组件中起作用"><a href="#5-如何让-CSS-只在当前组件中起作用" class="headerlink" title="5. 如何让 CSS 只在当前组件中起作用?"></a>5. 如何让 CSS 只在当前组件中起作用?</h2><p>答：在组件中的 style 前面加上 scoped</p><h2 id="6-的作用是什么"><a href="#6-的作用是什么" class="headerlink" title="6.  的作用是什么?"></a>6. <keep-alive></keep-alive> 的作用是什么?</h2><p>答: keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。</p><h2 id="7-如何获取-dom"><a href="#7-如何获取-dom" class="headerlink" title="7.如何获取 dom?"></a>7.如何获取 dom?</h2><p>答：ref=”domName” 用法：this.$refs.domName</p><h2 id="8-说出几种-vue-当中的指令和它的用法？"><a href="#8-说出几种-vue-当中的指令和它的用法？" class="headerlink" title="8.说出几种 vue 当中的指令和它的用法？"></a>8.说出几种 vue 当中的指令和它的用法？</h2><p>答：v-model 双向数据绑定；</p><p>v-for 循环；</p><p>v-if v-show 显示与隐藏；</p><p>v-on 事件；v-once : 只绑定一次。</p><h2 id="9-vue-loader-是什么？使用它的用途有哪些？"><a href="#9-vue-loader-是什么？使用它的用途有哪些？" class="headerlink" title="9. vue-loader 是什么？使用它的用途有哪些？"></a>9. vue-loader 是什么？使用它的用途有哪些？</h2><p>答：vue 文件的一个加载器，将 template/js/style 转换成 js 模块。</p><p>用途：js 可以写 es6 、 style 样式可以 scss 或 less 、 template 可以加 jade 等</p><h2 id="10-为什么使用-key"><a href="#10-为什么使用-key" class="headerlink" title="10.为什么使用 key?"></a>10.为什么使用 key?</h2><p>答：需要使用 key 来给每个节点做一个唯一标识， Diff 算法就可以正确的识别此节点。作用主要是为了高效的更新虚拟 DOM。</p><h2 id="11-axios-及安装"><a href="#11-axios-及安装" class="headerlink" title="11.axios 及安装?"></a>11.axios 及安装?</h2><p>答：请求后台资源的模块。npm install axios —save 装好， js 中使用 import 进来，然后 .get 或 .post 。返回在 .then 函数中如果成功，失败则是在 .catch 函数中。</p><h2 id="12-v-modal-的使用"><a href="#12-v-modal-的使用" class="headerlink" title="12.v-modal 的使用"></a>12.v-modal 的使用</h2><p>答：v-model 用于表单数据的双向绑定，其实它就是一个语法糖，这个背后就做了两个操作：v-bind 绑定一个 value 属性；v-on 指令给当前元素绑定 input 事件。</p><h2 id="13-请说出-vue-cli-项目中-src-目录每个文件夹和文件的用法？"><a href="#13-请说出-vue-cli-项目中-src-目录每个文件夹和文件的用法？" class="headerlink" title="13.请说出 vue.cli 项目中 src 目录每个文件夹和文件的用法？"></a>13.请说出 vue.cli 项目中 src 目录每个文件夹和文件的用法？</h2><p>答：assets 文件夹是放静态资源；components 是放组件；router 是定义路由相关的配置; app.vue 是一个应用主组件；main.js 是入口文件。</p><h2 id="14-分别简述-computed-和-watch-的使用场景"><a href="#14-分别简述-computed-和-watch-的使用场景" class="headerlink" title="14.分别简述 computed 和 watch 的使用场景"></a>14.分别简述 computed 和 watch 的使用场景</h2><p>答：<br>computed : 当一个属性受多个属性影响的时候就需要用到 computed ，最典型的栗子：购物车商品结算的时候<br>watch : 当一条数据影响多条数据的时候就需要用 watch ，栗子：搜索数据</p><h2 id="15-v-on-可以监听多个方法吗？"><a href="#15-v-on-可以监听多个方法吗？" class="headerlink" title="15.v-on 可以监听多个方法吗？"></a>15.v-on 可以监听多个方法吗？</h2><p>答：可以</p><pre class="line-numbers language-none"><code class="language-none">&lt;input type="text" v-on="{ input:onInput,focus:onFocus,blur:onBlur, }"&gt;。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="16-nextTick-的使用"><a href="#16-nextTick-的使用" class="headerlink" title="16.$nextTick 的使用"></a>16.$nextTick 的使用</h2><p>答：当你修改了 data 的值然后马上获取这个 dom 元素的值，是不能获取到更新后的值， 你需要使用 $nextTick 这个回调，让修改后的 data 值渲染更新到 dom 元素之后在获取，才能成功。</p><h2 id="17-vue-组件中-data-为什么必须是一个函数？"><a href="#17-vue-组件中-data-为什么必须是一个函数？" class="headerlink" title="17.vue 组件中 data 为什么必须是一个函数？"></a>17.vue 组件中 data 为什么必须是一个函数？</h2><p>答：因为 JavaScript 的特性所导致，在 component 中，data 必须以函数的形式存在，不可以是对象。组建中的 data 写成一个函数，数据以函数返回值的形式定义，这样每次复用组件的时候，都会返回一份新的 data ，相当于每个组件实例都有自己私有的数据空间，它们只负责各自维护的数据，不会造成混乱。而单纯的写成对象形式，就是所有的组件实例共用了一个 data ，这样改一个全都改了。</p><h2 id="18-渐进式框架的理解"><a href="#18-渐进式框架的理解" class="headerlink" title="18.渐进式框架的理解"></a>18.渐进式框架的理解</h2><p>答：主张最少；可以根据不同的需求选择不同的层级；</p><h2 id="19-Vue-中双向数据绑定是如何实现的？"><a href="#19-Vue-中双向数据绑定是如何实现的？" class="headerlink" title="19.Vue 中双向数据绑定是如何实现的？"></a>19.Vue 中双向数据绑定是如何实现的？</h2><p>答：vue 双向数据绑定是通过 数据劫持 结合 发布订阅模式的方式来实现的， 也就是说数据和视图同步，数据发生变化，视图跟着变化，视图变化，数据也随之发生改变；核心：关于 VUE 双向数据绑定，其核心是 Object.defineProperty() 方法。</p><h2 id="20-单页面应用和多页面应用区别及优缺点"><a href="#20-单页面应用和多页面应用区别及优缺点" class="headerlink" title="20.单页面应用和多页面应用区别及优缺点"></a>20.单页面应用和多页面应用区别及优缺点</h2><p>答：单页面应用（SPA），通俗一点说就是指只有一个主页面的应用，浏览器一开始要加载所有必须的 html, js, css。所有的页面内容都包含在这个所谓的主页面中。但在写的时候，还是会分开写（页面片段），然后在交互的时候由路由程序动态载入，单页面的页面跳转，仅刷新局部资源。多应用于 pc 端。</p><p>多页面（MPA），就是指一个应用中有多个页面，页面跳转时是整页刷新</p><p>单页面的优点：用户体验好，快，内容的改变不需要重新加载整个页面，基于这一点 spa 对服务器压力较小；前后端分离；页面效果会比较炫酷（比如切换页面内容时的专场动画）。</p><p>单页面缺点：不利于 seo；导航不可用，如果一定要导航需要自行实现前进、后退。（由于是单页面不能用浏览器的前进后退功能，所以需要自己建立堆栈管理）；初次加载时耗时多；页面复杂度提高很多。</p><h2 id="21-v-if-和-v-for-的优先级"><a href="#21-v-if-和-v-for-的优先级" class="headerlink" title="21.v-if 和 v-for 的优先级"></a>21.v-if 和 v-for 的优先级</h2><p>答：当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级，这意味着 v-if 将分别重复运行于每个 v-for 循环中。所以，不推荐 v-if 和 v-for 同时使用。如果 v-if 和 v-for 一起用的话，vue 中的的会自动提示 v-if 应该放到外层去。</p><h2 id="22-assets-和-static-的区别"><a href="#22-assets-和-static-的区别" class="headerlink" title="22.assets 和 static 的区别"></a>22.assets 和 static 的区别</h2><p>答：相同点： assets 和 static 两个都是存放静态资源文件。项目中所需要的资源文件图片，字体图标，样式文件等都可以放在这两个文件下，这是相同点</p><p>不相同点：assets 中存放的静态资源文件在项目打包时，也就是运行 npm run build 时会将 assets 中放置的静态资源文件进行打包上传，所谓打包简单点可以理解为压缩体积，代码格式化。而压缩后的静态资源文件最终也都会放置在 static 文件中跟着 index.html 一同上传至服务器。static 中放置的静态资源文件就不会要走打包压缩格式化等流程，而是直接进入打包好的目录，直接上传至服务器。因为避免了压缩直接进行上传，在打包时会提高一定的效率，但是 static 中的资源文件由于没有进行压缩等操作，所以文件的体积也就相对于 assets 中打包后的文件提交较大点。在服务器中就会占据更大的空间。</p><p>建议： 将项目中 template 需要的样式文件 js 文件等都可以放置在 assets 中，走打包这一流程。减少体积。而项目中引入的第三方的资源文件如 iconfoont.css 等文件可以放置在 static 中，因为这些引入的第三方文件已经经过处理，我们不再需要处理，直接上传。</p><h2 id="23-vue-常用的修饰符"><a href="#23-vue-常用的修饰符" class="headerlink" title="23.vue 常用的修饰符"></a>23.vue 常用的修饰符</h2><p>答：<br>.stop：等同于 JavaScript 中的 event.stopPropagation() ，防止事件冒泡；<br>.prevent ：等同于 JavaScript 中的 event.preventDefault() ，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）；<br>.capture ：与事件冒泡的方向相反，事件捕获由外到内；<br>.self ：只会触发自己范围内的事件，不包含子元素；<br>.once ：只会触发一次。</p><h2 id="24-vue-的两个核心点"><a href="#24-vue-的两个核心点" class="headerlink" title="24.vue 的两个核心点"></a>24.vue 的两个核心点</h2><p>答：数据驱动、组件系统</p><p>数据驱动： ViewModel，保证数据和视图的一致性。<br>组件系统： 应用类 UI 可以看作全部是由组件树构成的。</p><h2 id="25-vue-和-jQuery-的区别"><a href="#25-vue-和-jQuery-的区别" class="headerlink" title="25.vue 和 jQuery 的区别"></a>25.vue 和 jQuery 的区别</h2><p>答：jQuery 是使用选择器（ $ ）选取 DOM 对象，对其进行赋值、取值、事件绑定等操作，其实和原生的 HTML 的区别只在于可以更方便的选取和操作 DOM 对象，而数据和界面是在一起的。比如需要获取 label 标签的内容：$(“lable”).val(); ,它还是依赖 DOM 元素的值。Vue 则是通过 Vue 对象将数据和 View 完全分离开来了。对数据进行操作不再需要引用相应的 DOM 对象，可以说数据和 View 是分离的，他们通过 Vue 对象这个 vm 实现相互的绑定。这就是传说中的 MVVM。</p><h2 id="26-引进组件的步骤"><a href="#26-引进组件的步骤" class="headerlink" title="26. 引进组件的步骤"></a>26. 引进组件的步骤</h2><p>答: 在 template 中引入组件；在 script 的第一行用 import 引入路径；用 component 中写上组件名称。</p><h2 id="27-delete-和-Vue-delete-删除数组的区别"><a href="#27-delete-和-Vue-delete-删除数组的区别" class="headerlink" title="27.delete 和 Vue.delete 删除数组的区别"></a>27.delete 和 Vue.delete 删除数组的区别</h2><p>答：delete 只是被删除的元素变成了 empty/undefined 其他的元素的键值还是不变。Vue.delete 直接删除了数组 改变了数组的键值。</p><h2 id="28-SPA-首屏加载慢如何解决"><a href="#28-SPA-首屏加载慢如何解决" class="headerlink" title="28.SPA 首屏加载慢如何解决"></a>28.SPA 首屏加载慢如何解决</h2><p>答：安装动态懒加载所需插件；使用 CDN 资源。</p><h2 id="29-Vue-router-跳转和-location-href-有什么区别"><a href="#29-Vue-router-跳转和-location-href-有什么区别" class="headerlink" title="29.Vue-router 跳转和 location.href 有什么区别"></a>29.Vue-router 跳转和 location.href 有什么区别</h2><p>答：使用 location.href= /url 来跳转，简单方便，但是刷新了页面；使用 history.pushState( /url ) ，无刷新页面，静态跳转；引进 router ，然后使用 router.push( /url ) 来跳转，使用了 diff 算法，实现了按需加载，减少了 dom 的消耗。其实使用 router 跳转和使用 history.pushState() 没什么差别的，因为 vue-router 就是用了 history.pushState() ，尤其是在 history 模式下。</p><h2 id="30-vue-slot"><a href="#30-vue-slot" class="headerlink" title="30. vue slot"></a>30. vue slot</h2><p>答：简单来说，假如父组件需要在子组件内放一些 DOM，那么这些 DOM 是显示、不显示、在哪个地方显示、如何显示，就是 slot 分发负责的活。</p><h2 id="31-你们-vue-项目是打包了一个-js-文件，一个-css-文件，还是有多个文件？"><a href="#31-你们-vue-项目是打包了一个-js-文件，一个-css-文件，还是有多个文件？" class="headerlink" title="31.你们 vue 项目是打包了一个 js 文件，一个 css 文件，还是有多个文件？"></a>31.你们 vue 项目是打包了一个 js 文件，一个 css 文件，还是有多个文件？</h2><p>答：根据 vue-cli 脚手架规范，一个 js 文件，一个 CSS 文件。</p><h2 id="32-Vue-里面-router-link-在电脑上有用，在安卓上没反应怎么解决？"><a href="#32-Vue-里面-router-link-在电脑上有用，在安卓上没反应怎么解决？" class="headerlink" title="32.Vue 里面 router-link 在电脑上有用，在安卓上没反应怎么解决？"></a>32.Vue 里面 router-link 在电脑上有用，在安卓上没反应怎么解决？</h2><p>答：Vue 路由在 Android 机上有问题，babel 问题，安装 babel polypill 插件解决。</p><h2 id="33-Vue2-中注册在-router-link-上事件无效解决方法"><a href="#33-Vue2-中注册在-router-link-上事件无效解决方法" class="headerlink" title="33.Vue2 中注册在 router-link 上事件无效解决方法"></a>33.Vue2 中注册在 router-link 上事件无效解决方法</h2><p>答：使用 @click.native 。原因：router-link 会阻止 click 事件，.native 指直接监听一个原生事件。</p><h2 id="34-RouterLink-在-IE-和-Firefox-中不起作用（路由不跳转）的问题"><a href="#34-RouterLink-在-IE-和-Firefox-中不起作用（路由不跳转）的问题" class="headerlink" title="34.RouterLink 在 IE 和 Firefox 中不起作用（路由不跳转）的问题"></a>34.RouterLink 在 IE 和 Firefox 中不起作用（路由不跳转）的问题</h2><p>答: 方法一：只用 a 标签，不适用 button 标签；方法二：使用 button 标签和 Router.navigate 方法</p><h2 id="35-axios-的特点有哪些"><a href="#35-axios-的特点有哪些" class="headerlink" title="35.axios 的特点有哪些"></a>35.axios 的特点有哪些</h2><p>答：<br>从浏览器中创建 XMLHttpRequests；</p><p>node.js 创建 http 请求；</p><p>支持 Promise API；</p><p>拦截请求和响应；</p><p>转换请求数据和响应数据；</p><p>取消请求；</p><p>自动换成 json。</p><p>axios 中的发送字段的参数是 data 跟 params 两个，两者的区别在于 params 是跟请求地址一起发送的，data 的作为一个请求体进行发送</p><p>params 一般适用于 get 请求，data 一般适用于 post put 请求。</p><h2 id="36-请说下封装-vue-组件的过程？"><a href="#36-请说下封装-vue-组件的过程？" class="headerlink" title="36.请说下封装 vue 组件的过程？"></a>36.请说下封装 vue 组件的过程？</h2><p>答：<br>建立组件的模板，先把架子搭起来，写写样式，考虑好组件的基本逻辑。(os：思考 1 小时，码码 10 分钟，程序猿的准则。) 　　<br>准备好组件的数据输入。即分析好逻辑，定好 props 里面的数据、类型。　　<br>准备好组件的数据输出。即根据组件逻辑，做好要暴露出来的方法。　　<br>封装完毕了，直接调用即可</p><h2 id="37-params-和-query-的区别"><a href="#37-params-和-query-的区别" class="headerlink" title="37.params 和 query 的区别"></a>37.params 和 query 的区别</h2><p>答：用法：query 要用 path 来引入，params 要用 name 来引入，接收参数都是类似的，分别是 this.$route.query.name 和 this.$route.params.name 。url 地址显示：query 更加类似于我们 ajax 中 get 传参，params 则类似于 post，说的再简单一点，前者在浏览器地址栏中显示参数，后者则不显示</p><p>注意点：query 刷新不会丢失 query 里面的数据 params 刷新 会 丢失 params 里面的数据。</p><h2 id="38-vue-初始化页面闪动问题"><a href="#38-vue-初始化页面闪动问题" class="headerlink" title="38.vue 初始化页面闪动问题"></a>38.vue 初始化页面闪动问题</h2><p>答：使用 vue 开发时，在 vue 初始化之前，由于 div 是不归 vue 管的，所以我们写的代码在还没有解析的情况下会容易出现花屏现象，看到类似于  的字样，虽然一般情况下这个时间很短暂，但是我们还是有必要让解决这个问题的。首先：在 css 里加上 [v-cloak] { display: none; } 。如果没有彻底解决问题，则在根元素加上 style=”display: none;” :style=”{display: block }”</p><h2 id="39-vue-更新数组时触发视图更新的方法"><a href="#39-vue-更新数组时触发视图更新的方法" class="headerlink" title="39.vue 更新数组时触发视图更新的方法"></a>39.vue 更新数组时触发视图更新的方法</h2><p>答:push()；pop()；shift()；unshift()；splice()；sort()；reverse()</p><h2 id="40-vue-常用的-UI-组件库"><a href="#40-vue-常用的-UI-组件库" class="headerlink" title="40.vue 常用的 UI 组件库"></a>40.vue 常用的 UI 组件库</h2><p>答：Mint UI，element，VUX</p><h2 id="41-vue-修改打包后静态资源路径的修改"><a href="#41-vue-修改打包后静态资源路径的修改" class="headerlink" title="41.vue 修改打包后静态资源路径的修改"></a>41.vue 修改打包后静态资源路径的修改</h2><p>答：cli2 版本：将 config/index.js 里的 assetsPublicPath 的值改为 ./ 。</p><pre class="line-numbers language-none"><code class="language-none">build: {// ...assetsPublicPath: ./ ,// ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>cli3 版本：在根目录下新建 vue.config.js 文件，然后加上以下内容：（如果已经有此文件就直接修改）</p><pre class="line-numbers language-none"><code class="language-none">module.exports = {publicPath: , // 相对于 HTML 页面（目录相同）}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>生命周期函数面试题篇</p><h2 id="42-什么是-vue-生命周期？有什么作用？"><a href="#42-什么是-vue-生命周期？有什么作用？" class="headerlink" title="42.什么是 vue 生命周期？有什么作用？"></a>42.什么是 vue 生命周期？有什么作用？</h2><p>答：每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做 生命周期钩子 的函数，这给了用户在不同阶段添加自己的代码的机会。（ps：生命周期钩子就是生命周期函数）例如，如果要通过某些插件操作 DOM 节点，如想在页面渲染完后弹出广告窗， 那我们最早可在 mounted 中进行。</p><h2 id="43-第一次页面加载会触发哪几个钩子？"><a href="#43-第一次页面加载会触发哪几个钩子？" class="headerlink" title="43.第一次页面加载会触发哪几个钩子？"></a>43.第一次页面加载会触发哪几个钩子？</h2><p>答：beforeCreate， created， beforeMount， mounted</p><h2 id="44-简述每个周期具体适合哪些场景"><a href="#44-简述每个周期具体适合哪些场景" class="headerlink" title="44.简述每个周期具体适合哪些场景"></a>44.简述每个周期具体适合哪些场景</h2><p>答：<br>beforeCreate： 在 new 一个 vue 实例后，只有一些默认的生命周期钩子和默认事件，其他的东西都还没创建。在 beforeCreate 生命周期执行的时候，data 和 methods 中的数据都还没有初始化。不能在这个阶段使用 data 中的数据和 methods 中的方法</p><p>create： data 和 methods 都已经被初始化好了，如果要调用 methods 中的方法，或者操作 data 中的数据，最早可以在这个阶段中操作</p><p>beforeMount： 执行到这个钩子的时候，在内存中已经编译好了模板了，但是还没有挂载到页面中，此时，页面还是旧的</p><p>mounted： 执行到这个钩子的时候，就表示 Vue 实例已经初始化完成了。此时组件脱离了创建阶段，进入到了运行阶段。如果我们想要通过插件操作页面上的 DOM 节点，最早可以在和这个阶段中进行</p><p>beforeUpdate： 当执行这个钩子时，页面中的显示的数据还是旧的，data 中的数据是更新后的， 页面还没有和最新的数据保持同步</p><p>updated： 页面显示的数据和 data 中的数据已经保持同步了，都是最新的</p><p>beforeDestory： Vue 实例从运行阶段进入到了销毁阶段，这个时候上所有的 data 和 methods ， 指令， 过滤器 ……都是处于可用状态。还没有真正被销毁</p><p>destroyed： 这个时候上所有的 data 和 methods ， 指令， 过滤器 ……都是处于不可用状态。组件已经被销毁了。</p><h2 id="45-created-和-mounted-的区别"><a href="#45-created-和-mounted-的区别" class="headerlink" title="45.created 和 mounted 的区别"></a>45.created 和 mounted 的区别</h2><p>答：created:在模板渲染成 html 前调用，即通常初始化某些属性值，然后再渲染成视图。mounted:在模板渲染成 html 后调用，通常是初始化页面完成后，再对 html 的 dom 节点进行一些需要的操作。</p><h2 id="46-vue-获取数据在哪个周期函数"><a href="#46-vue-获取数据在哪个周期函数" class="headerlink" title="46.vue 获取数据在哪个周期函数"></a>46.vue 获取数据在哪个周期函数</h2><p>答：一般 created/beforeMount/mounted 皆可. 比如如果你要操作 DOM , 那肯定 mounted 时候才能操作.</p><h2 id="47-请详细说下你对-vue-生命周期的理解？"><a href="#47-请详细说下你对-vue-生命周期的理解？" class="headerlink" title="47.请详细说下你对 vue 生命周期的理解？"></a>47.请详细说下你对 vue 生命周期的理解？</h2><p>答：总共分为 8 个阶段创建前/后，载入前/后，更新前/后，销毁前/后。</p><p>创建前/后： 在 beforeCreated 阶段，vue 实例的挂载元素 $el 和 数据对象 data 都为 undefined，还未初始化。在 created 阶段，vue 实例的数据对象 data 有了， $el 还没有。</p><p>载入前/后： 在 beforeMount 阶段，vue 实例的 $el 和 data 都初始化了，但还是挂载之前为虚拟的 dom 节点，data.message 还未替换。在 mounted 阶段，vue 实例挂载完成，data.message 成功渲染。</p><p>更新前/后： 当 data 变化时，会触发 beforeUpdate 和 updated 方法。</p><p>销毁前/后： 在执行 destroy 方法后，对 data 的改变不会再触发周期函数，说明此时 vue 实例已经解除了事件监听以及和 dom 的绑定，但是 dom 结构依然存在。</p><h1 id="vue-路由面试题篇"><a href="#vue-路由面试题篇" class="headerlink" title="vue 路由面试题篇"></a>vue 路由面试题篇</h1><h2 id="48-mvvm-框架是什么？"><a href="#48-mvvm-框架是什么？" class="headerlink" title="48.mvvm 框架是什么？"></a>48.mvvm 框架是什么？</h2><p>答：vue 是实现了双向数据绑定的 mvvm 框架，当视图改变更新模型层，当模型层改变更新视图层。在 vue 中，使用了双向绑定技术，就是 View 的变化能实时让 Model 发生变化，而 Model 的变化也能实时更新到 View。</p><h2 id="49-vue-router-是什么-它有哪些组件"><a href="#49-vue-router-是什么-它有哪些组件" class="headerlink" title="49.vue-router 是什么?它有哪些组件"></a>49.vue-router 是什么?它有哪些组件</h2><p>答：vue 用来写路由一个插件。router-link、router-view</p><h2 id="50-active-class-是哪个组件的属性？"><a href="#50-active-class-是哪个组件的属性？" class="headerlink" title="50.active-class 是哪个组件的属性？"></a>50.active-class 是哪个组件的属性？</h2><p>答：vue-router 模块的 router-link 组件。children 数组来定义子路由</p><h2 id="51-怎么定义-vue-router-的动态路由-怎么获取传过来的值？"><a href="#51-怎么定义-vue-router-的动态路由-怎么获取传过来的值？" class="headerlink" title="51.怎么定义 vue-router 的动态路由? 怎么获取传过来的值？"></a>51.怎么定义 vue-router 的动态路由? 怎么获取传过来的值？</h2><p>答：在 router 目录下的 index.js 文件中，对 path 属性加上/:id。使用 router 对象的 params.id。</p><h2 id="52-vue-router-有哪几种导航钩子"><a href="#52-vue-router-有哪几种导航钩子" class="headerlink" title="52.vue-router 有哪几种导航钩子?"></a>52.vue-router 有哪几种导航钩子?</h2><p>答：三种，</p><p>第一种： 是全局导航钩子：router.beforeEach(to,from,next)，作用：跳转前进行判断拦截。</p><p>第二种： 组件内的钩子</p><p>第三种： 单独路由独享组件</p><h2 id="53-route-和-router-的区别"><a href="#53-route-和-router-的区别" class="headerlink" title="53. $route 和 $router 的区别"></a>53. <code>$route</code> 和 <code>$router</code> 的区别</h2><p>答：$router 是 VueRouter 的实例，在 script 标签中想要导航到不同的 URL,使用 $router.push 方法。返回上一个历史 history 用 $router.to(-1)</p><p><code>$route</code> 为当前 router 跳转对象。里面可以获取当前路由的 name,path,query,params 等。</p><h2 id="54-vue-router-的两种模式"><a href="#54-vue-router-的两种模式" class="headerlink" title="54. vue-router 的两种模式"></a>54. vue-router 的两种模式</h2><p>答: hash 模式： 即地址栏 URL 中的 # 符号；</p><p>history 模式： window.history 对象打印出来可以看到里边提供的方法和记录长度。利用了 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。（需要特定浏览器支持）。</p><h2 id="55-vue-router-实现路由懒加载（-动态加载路由-）"><a href="#55-vue-router-实现路由懒加载（-动态加载路由-）" class="headerlink" title="55.vue-router 实现路由懒加载（ 动态加载路由 ）"></a>55.vue-router 实现路由懒加载（ 动态加载路由 ）</h2><p>答:三种方式</p><p>第一种： vue 异步组件技术 ==== 异步加载，vue-router 配置路由 , 使用 vue 的异步组件技术 , 可以实现按需加载 .但是,这种情况下一个组件生成一个 js 文件。</p><p>第二种： 路由懒加载(使用 import)。</p><p>第三种： webpack 提供的 require.ensure()，vue-router 配置路由，使用 webpack 的 require.ensure 技术，也可以实现按需加载。这种情况下，多个路由指定相同的 chunkName，会合并打包成一个 js 文件。</p><h1 id="vuex-常见面试题篇"><a href="#vuex-常见面试题篇" class="headerlink" title="vuex 常见面试题篇"></a>vuex 常见面试题篇</h1><h2 id="56-vuex-是什么？怎么使用？哪种功能场景使用它？"><a href="#56-vuex-是什么？怎么使用？哪种功能场景使用它？" class="headerlink" title="56.vuex 是什么？怎么使用？哪种功能场景使用它？"></a>56.vuex 是什么？怎么使用？哪种功能场景使用它？</h2><p>答：vue 框架中状态管理。在 main.js 引入 store，注入。</p><p>新建了一个目录 store.js，….. export 。</p><p>场景有：单页应用中，组件之间的状态。音乐播放、登录状态、加入购物车</p><h2 id="57-vuex-有哪几种属性？"><a href="#57-vuex-有哪几种属性？" class="headerlink" title="57.vuex 有哪几种属性？"></a>57.vuex 有哪几种属性？</h2><p>答：有五种，分别是 State、 Getter、Mutation 、Action、 Module</p><p>state =&gt; 基本数据(数据源存放地)</p><p>getters =&gt; 从基本数据派生出来的数据</p><p>mutations =&gt; 提交更改数据的方法，同步！</p><p>actions =&gt; 像一个装饰器，包裹 mutations，使之可以异步。</p><p>modules =&gt; 模块化 Vuex</p><h2 id="58-Vue-js-中-ajax-请求代码应该写在组件的-methods-中还是-vuex-的-actions-中？"><a href="#58-Vue-js-中-ajax-请求代码应该写在组件的-methods-中还是-vuex-的-actions-中？" class="headerlink" title="58.Vue.js 中 ajax 请求代码应该写在组件的 methods 中还是 vuex 的 actions 中？"></a>58.Vue.js 中 ajax 请求代码应该写在组件的 methods 中还是 vuex 的 actions 中？</h2><p>答：如果请求来的数据是不是要被其他组件公用，仅仅在请求的组件内使用，就不需要放入 vuex 的 state 里。</p><p>如果被其他地方复用，这个很大几率上是需要的，如果需要，请将请求放入 action 里，方便复用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> VUE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS面试题</title>
      <link href="/2023/03/29/css-mian-shi-ti-zheng-li/"/>
      <url>/2023/03/29/css-mian-shi-ti-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-面试题"><a href="#CSS-面试题" class="headerlink" title="CSS 面试题"></a>CSS 面试题</h1><h2 id="01-盒模型宽度计算"><a href="#01-盒模型宽度计算" class="headerlink" title="01. 盒模型宽度计算"></a>01. 盒模型宽度计算</h2><p>在如下代码中类名为 box 的 div，它的 offsetWidth 是多少?</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">#box</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10pxs    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid skyblue<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> bor  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>offsetWidth = 内容宽度 + 内边距 + 边框</p><p>box 的内容宽度为 100、左右内边距各为 10、左右边框各为 1、所以盒子的 offsetWidth 为 122。</p><p>通过 box-sizing 可以设置到底要如何计算一个元素的总宽度和总高度。</p><p>它的默认值为 content-box，即指定 width 属性值为内容宽度，盒子的实际宽度为内容宽度 + 内边距 + 边框。</p><p>它的值也可以是 border-box，即指定 width 属性值为盒子的总宽度，在设置了内边距和边框的情况下会挤压盒子内容的宽度。</p><h2 id="02-外边距负值"><a href="#02-外边距负值" class="headerlink" title="02. 外边距负值"></a>02. 外边距负值</h2><p>外边距在四个方向上设置负值会产生什么效果。</p><p>margin-top 设置正值元素向下移动、设置负值向上移动。</p><p>margin-left 设置正值元素向右移动、设置负值向左移动。</p><p>margin-right 设置正值右侧元素向右移动、设置负值右侧元素向左移动。</p><p>margin-bottom 设置正值下方元素向下移动，设置负值下方元素向上移动。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">.box1</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.box2</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="03-外边距重叠"><a href="#03-外边距重叠" class="headerlink" title="03. 外边距重叠"></a>03. 外边距重叠</h2><p>① 什么是外边距重叠</p><p>两个块级元素的上外边距和下外边距可能会合并为一个外边距，这种现象被称之为外边距重叠。</p><p>外边距重叠只发生在垂直方向，水平方向不会重叠。浮动的元素和绝对定位的元素的外边距不会折叠。</p><p>② 外边距重叠的计算方式</p><p>(1) 如果两者都是正数，取最大值为最终的外边距值。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">.box1</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.box2</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 如果两者一正一负，使用正值减去负值的绝对值，得到的结果为最终的外边距值。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">.box1</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.box2</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3) 如果两者都是负值，使用 0 减去两个值中绝对值大的那个，得到的结果为最终的外边距值</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">.box1</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -20px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.box2</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③ 如何解决外边距重叠</p><p>(1) 不要同时为两个相邻的块级元素设置垂直方向上的边距(推荐)</p><p>(2) 为下层元素设置浮动或定位(绝对定位、固定定位)或 inline-block</p><h2 id="04-外边距塌陷"><a href="#04-外边距塌陷" class="headerlink" title="04. 外边距塌陷"></a>04. 外边距塌陷</h2><p>① 什么是外边距塌陷</p><p>两个嵌套关系的(一般为父子关系)块元素，当父元素有上外边距子元素也有上外边距时，两个上外边距会合成一个上外边距。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">body</span> <span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.box1</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.box2</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>② 如何解决外边距塌陷</p><p>(1) 为父元素设置 overflow: auto/hidden</p><p>(2) 为父元素设置浮动</p><p>(3) 为父元素设置 display: inline-block</p><p>(4) 为父元素设置 border: 1px solid transparent</p><p>(5) 为父元素设置 padding: 1px</p><h2 id="05-清除浮动"><a href="#05-清除浮动" class="headerlink" title="05. 清除浮动"></a>05. 清除浮动</h2><p>子元素浮动后父元素高度撑不开的问题如何解决</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">.parent</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.item</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>① 为父级元素添加 overflow: hidden 或 overflow: auto</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">{</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>② 通过伪类元素解决浮动父级元素高度问题</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix::after</span> <span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent clearfix<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="06-理解-BFC"><a href="#06-理解-BFC" class="headerlink" title="06. 理解 BFC"></a>06. 理解 BFC</h2><p>① 什么是 BFC</p><p>BFC 全称 Block Formatting Context， 意为块级格式化上下文。</p><p>BFC 其实就是指一块能够独立渲染的区域，并对这块区域内部的块级元素如何布局进行了规定。</p><p>比如块级元素默认在盒子的左上角进行渲染、块级盒子独占一行垂直排列、块级盒子之间的间距由 margin 设置。</p><p>由于通过 BFC 产生了一块独立渲染的区域，所以该区域内的元素无论怎样布局都不会影响到区域以外的元素。</p><p>只有块级元素可以具备 BFC 特性。</p><p>通过理解和 BFC 相关的知识能够对布局过程中产生问题进行快速解决，比如外边距重叠、外边距塌陷、浮动父级高度无法撑开等问题。</p><hr><p>② 如何使元素具有 BFC 特性</p><p>(1) 根元素(HTML)</p><p>(2) 浮动之后的元素(float 属性的值不为 none)</p><p>(3) 绝对定位和固定定位之后的元素</p><p>(4) 行内块元素</p><p>(5) 表格单元格(display: table-cell)、表格标题(display: table-caption)</p><p>(6) overflow 属性值不为 visible 的块元素</p><p>(7) 弹性盒元素(display: flex)</p><p>(8) 网格元素 (display: grid)</p><hr><p>③ BFC 特性</p><p>在同一个 BFC 中相邻的两个块级元素垂直方向上的外边距会被折叠</p><p>BFC 盒子的不会与浮动盒子产生交集而是紧贴着浮动元素的边缘</p><p>计算 BFC 盒子的高度时也会检测浮动盒子的高度</p><p>④ 代码示例一：清除浮动</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">.container</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token comment">/* display: inline-block; */</span>    <span class="token comment">/* float: left; */</span>    <span class="token comment">/* position: fixed; */</span>    <span class="token comment">/* display: table; */</span>  <span class="token punctuation">}</span>  <span class="token selector">.float-left</span> <span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.normal-box</span> <span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>float-left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>normal-box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑤ 代码示例二：防止元素被浮动元素覆盖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">.container</span> <span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.float-left</span> <span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.bfc</span> <span class="token punctuation">{</span>    <span class="token comment">/* 触发 BFC, 使盒子变成一块独立渲染的区域, 独立渲染的区域不会与其它元素发生重叠 */</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>float-left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bfc<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑥ 代码示例三：防止外边距重叠</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">.separate</span> <span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.box</span> <span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.box-1</span> <span class="token punctuation">{</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.box-2</span> <span class="token punctuation">{</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box box-1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>separate<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box box-2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="07-圣杯布局"><a href="#07-圣杯布局" class="headerlink" title="07. 圣杯布局"></a>07. 圣杯布局</h2><p>① 什么是圣杯布局</p><p>圣杯布局是指三栏布局，左右两栏宽度固定、中间宽度自适应。</p><p>在圣杯布局中要求中间一栏最先加载出来。</p><img src="/2023/03/29/css-mian-shi-ti-zheng-li/01.webp" align="left" width="100%"><p>② 实现圣杯布局</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">body</span> <span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.container</span> <span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0 150px 0 200px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.column</span> <span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.left</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.center</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.right</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> palegreen<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -150px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.clearfix::after</span> <span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container clearfix<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center column<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>center<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left column<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right column<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="08-双飞翼布局"><a href="#08-双飞翼布局" class="headerlink" title="08. 双飞翼布局"></a>08. 双飞翼布局</h2><p>① 什么是双飞翼布局</p><p>双飞翼布局和圣杯布局一样都是要实现三栏布局，两侧栏宽度固定，中间栏宽度自适应。</p><p>② 实现双飞翼布局</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">body</span> <span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.main-wrap</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.main</span> <span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 150px 0 200px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.column</span> <span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.left</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.right</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> palegreen<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -150px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.clearfix::after</span> <span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container clearfix<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main-wrap column<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>center<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left column<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right column<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="09-弹性盒布局"><a href="#09-弹性盒布局" class="headerlink" title="09. 弹性盒布局"></a>09. 弹性盒布局</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">.container</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid #000<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.item</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.item_1</span> <span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.item_2</span> <span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.item_3</span> <span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> orangered<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item_1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item_2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item_3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/29/css-mian-shi-ti-zheng-li/02.png"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>  <span class="token comment">/*     通过 display: flex 将 container 设置为弹性容器    container 的直接一级子元素自动成为弹性盒子    弹性盒子默认按照主轴方向进行排列, 而主轴方向默认又是水平的, 从左到右    所以当 container 被设置为弹性容器以后, 弹性盒子自动在水平方向上从左到右排列  */</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/29/css-mian-shi-ti-zheng-li/03.png"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>  <span class="token comment">/*    通过 justify-content 可以设置弹性盒子在主轴方向上的对应方式    flex-start: 左对齐    flex-end: 右对齐    center: 居中对齐    space-between: 盒子与盒子之间平均分配空间(不包含第一个盒子的左边和最后一个盒子的右边, 即那两边没有间距)    space-evenly: 在盒子与盒子之间平均分配间距, 即盒子与盒子之间的间距是相等的    space-around: 在盒子的两边平均分配间距, 每一个盒子自身, 两边的间距是相等的  */</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/29/css-mian-shi-ti-zheng-li/04.png"><img src="/2023/03/29/css-mian-shi-ti-zheng-li/05.png"><img src="/2023/03/29/css-mian-shi-ti-zheng-li/06.png"><img src="/2023/03/29/css-mian-shi-ti-zheng-li/07.png"><img src="/2023/03/29/css-mian-shi-ti-zheng-li/08.png"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>  <span class="token comment">/*     通过 align-items 可以设置弹性盒子在侧轴方向上的对齐方式    flex-start: 顶对齐    flex-end: 底对齐    center: 垂直居中对齐  stretch: 默认值, 子元素没有设置高度的情况下撑满父元素高度, 子元素设置了高度就使用设置的  */</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/29/css-mian-shi-ti-zheng-li/09.png"><img src="/2023/03/29/css-mian-shi-ti-zheng-li/10.png"><img src="/2023/03/29/css-mian-shi-ti-zheng-li/11.png"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.item_3</span> <span class="token punctuation">{</span>  <span class="token comment">/* 通过 align-self 属性可以单独设置某一个弹性盒子的侧轴方向上的对齐方式 */</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/29/css-mian-shi-ti-zheng-li/12.png"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>  <span class="token comment">/* 设置弹性盒子在主轴方向上左对齐 */</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.item_3</span> <span class="token punctuation">{</span>  <span class="token comment">/* 通过 margin auto 可以单独设置某一个弹性盒子在主轴方向上位置 */</span>  <span class="token comment">/* 将第三个盒子推向最右侧 */</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/29/css-mian-shi-ti-zheng-li/13.png"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item_2</span> <span class="token punctuation">{</span>  <span class="token comment">/* 当父级有剩余空间时, 通过扩展当前元素的宽度占据所有剩余空间 */</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/29/css-mian-shi-ti-zheng-li/14.png"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 将父级剩余空间划分为4分, 通过扩展弹性盒子占据剩余空间, item_1, item_3 占四分之一, item_2 占四分之二*/</span><span class="token selector">.item_1</span> <span class="token punctuation">{</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.item_2</span> <span class="token punctuation">{</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.item_3</span> <span class="token punctuation">{</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/29/css-mian-shi-ti-zheng-li/15.png"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.item</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*   当父级宽度不足以放置所有弹性盒子时, 所有弹性盒子的宽度默认会被缩减, 直到父级可以放置所有弹性盒子*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/29/css-mian-shi-ti-zheng-li/16.png"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item_1</span> <span class="token punctuation">{</span>  <span class="token comment">/*     通过 flex-shrink 属性可以改变盒子缩减行为, 它的默认值为1, 即每个盒子的缩减比例一致    可以将 flex-shrink 属性的值设置为 0, 表示不缩减当前盒子, 增加其他盒子的缩减比例  */</span>  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/29/css-mian-shi-ti-zheng-li/17.png"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/29/css-mian-shi-ti-zheng-li/18.png"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>  <span class="token comment">/* 当弹性容器的宽度不够时, 可以通过设置 flex-wrap: wrap 让弹性盒子换行显示 */</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/29/css-mian-shi-ti-zheng-li/19.png"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>  <span class="token comment">/* 通过 align-content 属性可以设置弹性盒子的行对齐方式 */</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/29/css-mian-shi-ti-zheng-li/20.png"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 通过 order 属性可以调整元素的显示顺序 */</span><span class="token selector">.item_1</span> <span class="token punctuation">{</span>  <span class="token property">order</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.item_2</span> <span class="token punctuation">{</span>  <span class="token property">order</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.item_3</span> <span class="token punctuation">{</span>  <span class="token property">order</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/29/css-mian-shi-ti-zheng-li/21.png"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>  <span class="token comment">/*    通过设置 flex-direction 属性可以调整主轴方向, 默认值为 row, 即主轴方向为水平, 盒子从左到右排列    flex-direction: column 设置主轴方向为垂直, 盒子从上到下排列    flex-direction: column-reverse 设置主轴方向为垂直, 盒子从下到上排列    flex-direction: row-reverse 设置主轴方向为水平, 盒子从右到左排列  */</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>  <span class="token comment">/* 设置盒子在主轴方向居中对齐 (垂直) */</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token comment">/* 设置盒子在侧轴方向居中对齐 (水平) */</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/29/css-mian-shi-ti-zheng-li/22.png"><h2 id="10-定位"><a href="#10-定位" class="headerlink" title="10. 定位"></a>10. 定位</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token comment">/*    定位是指确定元素的位置    元素位置的调整可以有不同的参考目标    可以参考自身, 可以参考有定位的父级, 可以参考浏览器窗口    css 中可以通过 position 属性来确定元素位置调整时的参考对象  */</span>  <span class="token comment">/*    静态定位 position: static;     元素在不设置定位时, 元素的 position 属性值就是 static    一般在使用它时都是在取消该元素的其他定位特性.  */</span>  <span class="token comment">/*     相对定位 position: relative    相对定位的元素是相对于元素自身在文档流中原本的位置进行定位    采用相对定位的元素没有脱离文档流, 所以当相对定位的元素被调整位置时, 原有位置会被保留, 不会影响文档流中的其他元素的位置    一般在进行网页布局时, 极少改变相对定位元素的位置    极大多数情况下, 相对定位的元素都是为绝对定位的元素提供位置参考  */</span>  <span class="token comment">/*     绝对定位 position: absolute    绝对定位的元素参考它最近的有定位的父级元素进行定位, 该定位可以是 sticky relative absolute fixed    若没有定位父级, 则参考窗口元素的位置进行定位    设置了绝对定位的元素会脱离正常的文档流, 元素原有位置将会被其他元素占据，可以使用绝对定位实现盒子堆叠效果  */</span>  <span class="token comment">/*    固定定位 position: fixed;    设置了固定定位的元素, 它的位置参考浏览器窗口, 在页面内容滚动时, 它的位置不会改变。    设置了固定定位的元素会脱离文档流, 原有位置将会被其他元素占据。  */</span>  <span class="token comment">/*    黏性定位 position: sticky    相对于父级进行固定定位, 当父级元素出现在窗口中并进行滚动时, 粘性定位的元素出现固定定位效果    当父级元素离开窗口后, 粘性定位随父级元素离开窗口    注意父级元素不需要设置任何定位  */</span>  <span class="token selector">.outer</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 2000px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.inner</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> sticky<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.box</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 2000px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 问题：两个元素, 一个固定定位, 一个绝对定位, 它们两个都相对于窗口定位, 它们有什么区别。 --&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-盒子水平垂直居中"><a href="#11-盒子水平垂直居中" class="headerlink" title="11. 盒子水平垂直居中"></a>11. 盒子水平垂直居中</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 知道元素宽高的情况下 */</span><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -50px<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> -50px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 不知道元素宽高的情况下 */</span><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 知道元素宽高的情况下 */</span><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">.wrap</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid skyblue<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.box</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">.wrap</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid skyblue<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.box</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-多行文本垂直居中"><a href="#12-多行文本垂直居中" class="headerlink" title="12. 多行文本垂直居中"></a>12. 多行文本垂直居中</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">.wrap</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid skyblue<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.box</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本多行文本  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-行高如何继承"><a href="#13-行高如何继承" class="headerlink" title="13. 行高如何继承"></a>13. 行高如何继承</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">      <span class="token selector">body</span> <span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token comment">/* 直接被子元素继承, 即子元素的行高就是 20px */</span>        <span class="token comment">/* line-height: 20px; */</span>        <span class="token comment">/* 子元素继承该行高后, 会使用子元素字体大小乘以行高比例, 16 * 1.5 = 24 */</span>        <span class="token comment">/* line-height: 1.5; */</span>        <span class="token comment">/*  当行高值写成百分比以后, 会先使用当前字体大小乘以该百分比, 得到的值会被子元素继承, 20 * 2 = 40px */</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 200%<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">.wrap</span> <span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>这是一段文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-rem-单位"><a href="#14-rem-单位" class="headerlink" title="14. rem 单位"></a>14. rem 单位</h2><p>rem 是 css 中的长度单位用于实现移动端适配。</p><p>移动端适配是指页面元素的宽、高都要随着设备的宽度进行等比缩放，即移动设备的宽度大，页面元素大，移动设备的宽度小，页面元素小。</p><div style="overflow:hidden">    <img src="/2023/03/29/css-mian-shi-ti-zheng-li/23.png" align="left" width="30%" style="float:left; margin-right: 10px;">    <img src="/2023/03/29/css-mian-shi-ti-zheng-li/24.png" align="left" width="30%" style="float: left"></div><p>rem 是一个相对单位，相对于根元素的字体大小进行计算。</p><p>比如根元素的字体大小是 20px，那么 1rem 就等于 20px，那么宽度 5rem 和高度 3rem 的盒子最终的宽高就为 100px，高度就为 60px。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html</span> <span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token comment">/* 100px */</span>  <span class="token property">width</span><span class="token punctuation">:</span> 5rem<span class="token punctuation">;</span>  <span class="token comment">/* 60px */</span>  <span class="token property">height</span><span class="token punctuation">:</span> 3rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要实现移动端适配效果，rem 单位需要和 css 中的媒体查询进行配合使用。</p><p>通过媒体查询检测设备的视口宽度，针对不同的设备视口宽度为根元素设置不同的字号大小。</p><p>如果设备视口宽度较大就为其设置较大的字号大小，如果设备的视口宽度较小就为其设置较小的字号大小。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">width</span><span class="token punctuation">:</span> 375px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector">html</span> <span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">width</span><span class="token punctuation">:</span> 414px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector">html</span> <span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在真实的项目开发中针对不同的设备的视口宽度，根元素的字号大小要如何进行设置呢？</p><p>在 rem 移动端适配方案中，我们通常将网页宽度等分为十份，然后将根元素的字号大小设置为视口宽度的十分之一，这样就将视口宽度和字号进行了关联。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">width</span><span class="token punctuation">:</span> 320px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector">html</span> <span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">width</span><span class="token punctuation">:</span> 375px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector">html</span> <span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 37.5px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">width</span><span class="token punctuation">:</span> 414px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector">html</span> <span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 41.4px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设计稿的宽度是 750px，设计稿中有一个盒子的宽高分别为 100px 和 50px，如何将它们转换为 rem 单位？</p><p>我们可以将设计稿的宽度看成是某一个移动设备的视口宽度，那么在该视口宽度下根元素的字号大小为 75px。</p><p>我们只需要使用 100px 除以 75px ，50px 除以 75px，就可以得到盒子的对应的宽高 rem 值。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">width</span><span class="token punctuation">:</span> 750px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector">html</span> <span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 75px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token comment">/* 盒子原本的像素值除以根元素字号大小: 100 / 75 = 1.333   50 / 75 = 0.666 */</span>  <span class="token property">width</span><span class="token punctuation">:</span> 1.333rem<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0.666rem<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 VSCode 编辑器中的 <a href="https://marketplace.visualstudio.com/items?itemName=cipchk.cssrem">px to rem &amp; rpx &amp; vw (cssrem)</a> 插件自动计算 rem 值。</p><p>先在 VSCode 编辑器中安装该插件，然后在 VSCode 编辑器的配置文件中设置参考的根元素字号大小</p><p>触发转换的快捷键默认为 Alt+Z</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"cssrem.rootFontSize"</span><span class="token operator">:</span> <span class="token number">75</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>改进媒体查询以适配所有移动端设备</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 320px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 481px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 641px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 961px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1025px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1281px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过 flexible.js 替换媒体查询，该 js 可以动态获取设备的视口宽度，为根元素动态设置十分之一的字号大小。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">flexible</span><span class="token punctuation">(</span><span class="token parameter">window<span class="token punctuation">,</span> document</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> docEl <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>  <span class="token keyword">var</span> dpr <span class="token operator">=</span> window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// adjust body font size</span>  <span class="token keyword">function</span> <span class="token function">setBodyFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">*</span> dpr <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> setBodyFontSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">setBodyFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// set 1rem = viewWidth / 10</span>  <span class="token keyword">function</span> <span class="token function">setRemUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> rem <span class="token operator">=</span> docEl<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    docEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> rem <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">setRemUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// reset rem unit on page resize</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> setRemUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"pageshow"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>persisted<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setRemUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// detect 0.5px supports</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dpr <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> fakeBody <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> testElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    testElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">".5px solid transparent"</span><span class="token punctuation">;</span>    fakeBody<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>testElement<span class="token punctuation">)</span><span class="token punctuation">;</span>    docEl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fakeBody<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>testElement<span class="token punctuation">.</span>offsetHeight <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      docEl<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hairlines"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    docEl<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>fakeBody<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-视口单位"><a href="#15-视口单位" class="headerlink" title="15. 视口单位"></a>15. 视口单位</h2><p>vw 和 vh 是 css 中的一个相对的长度单位，被称之为视口单位。</p><p>vw 就是 viewport width，表示它相对于视口的宽度进行计算。</p><p>vh 就是 viewport height，表示它相对于视口的高度进行计算。</p><p>1vw = 1/100 视口宽度，如果视口的宽度是 375px，那么 1vw = 3.75px。</p><p>1vh = 1/100 视口高度，如果视口的高度是 667px，那么 1vh = 6.76px。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token comment">/* 如果视口宽度是 375, 50 * 3.75 = 187.5  30 * 3.75 = 112.5 */</span>  <span class="token property">width</span><span class="token punctuation">:</span> 50vw<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 30vw<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token comment">/* 如果视口高度是 667, 50 * 6.67 = 333.5  30 * 6.67 = 200.1 */</span>  <span class="token property">width</span><span class="token punctuation">:</span> 50vh<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 30vh<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设计稿的宽度是 750px，设计稿中有一个盒子的宽高分别为 100px 和 50px，如何将它们转换为 vw 单位？</p><p>我们可以将设计稿的宽度看成是某一个移动设备的视口宽度，那么在该视口宽度下 1vw = 7.5px。</p><p>我们只需要使用 100px 除以 7.5px ，50px 除以 7.5px，就可以得到盒子的对应的宽高 vw 值。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token comment">/* 设计稿宽度 750, 100 / 7.5 = 13.333vw  50 / 7.5 = 6.666vw */</span>  <span class="token property">width</span><span class="token punctuation">:</span> 13.333vw<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 6.666vw<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意一般在使用视口单位布局时，一个盒子的宽高一般不会混用 vw 和 vh，一般会基于 vw。</p><p>通过配置 cssrem 插件启用对 vw 的支持，使插件辅助我们计算最终的 vw 值。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"cssrem.vw"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"cssrem.vwHover"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CSS面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML面试题</title>
      <link href="/2023/03/21/html-mian-shi-ti-zheng-li/"/>
      <url>/2023/03/21/html-mian-shi-ti-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-面试题"><a href="#HTML-面试题" class="headerlink" title="HTML 面试题"></a>HTML 面试题</h1><h2 id="01-HTML-语义化"><a href="#01-HTML-语义化" class="headerlink" title="01. HTML 语义化"></a>01. HTML 语义化</h2><p>什么是 HTML 语义化</p><p>HTML 是一门标记语言，在这门语言中每一个标记都被赋予了特殊的含义。</p><p>开发者在构建页面布局时应使用恰当语义的 HTML 标签进行内容的展示。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 用于定义标题 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 用于定义页面头部区域或 section 区域的页眉 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 用于定义网页导航链接区域 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 用于定义页面主体内容, 一个页面只能使用一次 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 用于定义一个页面中的一块自成一体的内容, 可以有自己的 header、footer、section 等 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 在 article 外, 主要用于定义页面侧边栏区域 --&gt;</span><span class="token comment">&lt;!-- 在 article 内, 主要用于定义主要内容的附属内容 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 表示有语义化的 div, 用于标记页面中的各个部分 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 用于定义页面底部区域 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 用于定义标题组 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hgroup</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hgroup</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 用于标记强调文本 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 用于标记一个段落 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 用于标记一个独立的流内容, 比如图像、图标、代码等等 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/media/cc0-images/elephant-660-480.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Elephant at sunset<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span><span class="token punctuation">&gt;</span></span>An elephant at sunset<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figcaption</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 用于标记时间 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>time</span><span class="token punctuation">&gt;</span></span>2011-01-28<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>time</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HTML 语义化有什么好处</p><p>(1) 语义化的 HTML 代码使开发者更容易理解，增加了程序的可阅读性便于团队开发和维护</p><p>(2) 使搜索引擎能够快速定位网页中的重要内容，爬虫是依赖于标签来确定上下文和各个关键字的权重</p><p>(3) 在没有 CSS 样式情况下也能够让页面呈现出清晰的结构 (一些标记自带样式)</p><p>(4) 极大程度利用标签的特点优化用户体验，比如 img 标记的 alt 属性和 title 属性、比如 label 标记</p><h2 id="02-块级元素与行内元素"><a href="#02-块级元素与行内元素" class="headerlink" title="02. 块级元素与行内元素"></a>02. 块级元素与行内元素</h2><p>在 HTML 语言中哪些标记属于块级元素、哪些标记属于行内元素、哪些标记属于行内块元素</p><p>display 属性值为 block 或 table 的元素属于块级元素。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>display 属性值为 inline 的元素属于行内元素。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>display 属性值为 inline-block 的元素属于行内块元素</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>块级元素有什么特点</p><p>(1) 块级元素独占一行</p><p>(2) 块级元素的宽度默认为 100%</p><p>(3) 块级元素的高度、行高、外边距、内边距可控</p><p>(4) 可以包含行内元素可块级元素</p><p>行内元素有什么特点</p><p>(1) 行内元素可以与其他行内元素同在一行，在一行排不下的情况下才会换行显示</p><p>(2) 行内元素可设置水平方向上的内边距和外边距、垂直方向无效</p><p>(3) 行内元素不能设置宽度和高度，其宽度和高度由内容自动撑开</p><p>(4) 行内元素只能包含其他行内元素或文本</p><p>行内块元素有什么特点</p><p>(1) 和相邻的行内元素(行内块)在一行上但是中间会有空白的间隙</p><p>(2) 可设置宽度、但默认宽度为内容撑开的宽度</p><p>(3) 高度、内边距、外边距都可以设置</p><p>(4) 行内块元素不能转化为行内元素</p><p>通过哪些方式可以将行内元素转换为块级元素</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token comment">/* 为行内元素设置 float:left/right 后, 该元素的 display 属性会被设置 block, 且拥有浮动特性。 */</span><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token comment">/* 为行内元素设置决定定位或固定定位时, 会使得行内元素变为块级元素。 */</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="03-src-属性与-href-属性的区别"><a href="#03-src-属性与-href-属性的区别" class="headerlink" title="03. src 属性与 href 属性的区别"></a>03. src 属性与 href 属性的区别</h2><p>src 属性和 href 属性都可以用来引入外部的资源。</p><hr><p>src 全称 source，通过 src 属性指向的内容会嵌入到文档中标签所在位置比如 js 脚本、img 图片。</p><p>当浏览器解析到该元素时，会暂停其它资源下载直到将该资源加载、编译、执行完毕。</p><p>正因为该特性所以我们才建议将 js 脚本放置在页面底部加载，防止阻塞页面加载影响用户体验。</p><hr><p>href 全称 hyper reference 表示超文本引用，用于建立标签与外部资源的关系。</p><p>当浏览器解析到该元素时，会和其他资源并行下载，并不会停止对文档的解析，通常用于超链接和样式表的加载。</p><p>由于并行加载特性所以我们才建议将样式表文件防止在页面顶部加载，防止出现页面裸奔现象。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cssfile.css<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.webpage.com<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myscript.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mypic.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="04-img-标记的-title-属性与-alt-属性"><a href="#04-img-标记的-title-属性与-alt-属性" class="headerlink" title="04. img 标记的 title 属性与 alt 属性"></a>04. img 标记的 title 属性与 alt 属性</h2><p>alt 属性全称 alternate 表示备用，如果图像无法显示浏览器将渲染 alt 指定的内容。</p><p>title 属性表示图像的标题，当鼠标移动到图像上时显示 title 属性值中的内容。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>鼠标移入图像时展示的内容<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图像无法显示时展示的内容<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="05-label-标签的作用"><a href="#05-label-标签的作用" class="headerlink" title="05. label 标签的作用"></a>05. label 标签的作用</h2><p>label 标签的作用是为使用鼠标的用户改进了可用性，当用户点击 label 标签中的文本时浏览器就会自动将焦点转到和该标签相关联的表单控件上。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="06-GET-与-POST-的区别"><a href="#06-GET-与-POST-的区别" class="headerlink" title="06. GET 与 POST 的区别"></a>06. GET 与 POST 的区别</h2><p>GET 和 POST，两者都是 HTTP 协议中发送请求的方法。</p><p>GET 一般用于从服务器端获取数据，POST 一般用于向服务器端传送数据。</p><p>GET 和 POST 本质上使用的都是 TCP 链接并无差别，但由于 HTTP 的规定和浏览器/服务器的限制，导致他们在使用过程中会体现出一些区别。</p><hr><ol><li><p>GET 在浏览器回退时是无害的而 POST 会再次提交请求。</p></li><li><p>GET 产生的 URL 地址可以被存储为书签而 POST 不可以。</p></li><li><p>GET 请求会被浏览器主动缓存而 POST 不会，除非手动设置。</p></li><li><p>GET 请求只能进行 url 编码而 POST 支持多种编码方式。</p></li><li><p>GET 请求参数会被完整保留在浏览器历史记录里而 POST 中的参数不会被保留。</p></li><li><p>GET 请求在 URL 中传送的参数是有长度限制的而 POST 没有。</p></li><li><p>GET 比 POST 更不安全，因为参数直接暴露在 URL 中，所以不能用来传递敏感信息。</p></li><li><p>GET 参数通过 URL 传递，POST 放在请求体中。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> HTML面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS面试题</title>
      <link href="/2023/03/15/js-mian-shi-ti-zheng-li/"/>
      <url>/2023/03/15/js-mian-shi-ti-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="JS-面试题"><a href="#JS-面试题" class="headerlink" title="JS 面试题"></a>JS 面试题</h1><h2 id="01-变量赋值"><a href="#01-变量赋值" class="headerlink" title="01. 变量赋值"></a>01. 变量赋值</h2><p>JavaScript 中的基本数据类型包括字符串、数值、布尔值、undefined、Symbol。</p><p>JavaScript 中的引用数据类型包括对象、数组、函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// 值复制</span><span class="token keyword">let</span> n <span class="token operator">=</span> m<span class="token punctuation">;</span>m <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本数据类型在进行变量赋值时采用的是复制值的方式，n = m 其实就是将 m 变量的值 100 复制了一份给了变量 n，重新为 m 变量赋值时变量 n 不会受到影响，所以变量 n 的值依然是 100。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>p2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>复杂数据类型在进行变量赋值时采用的是复制地址的方式，p2 = p1 其实就是将变量 p1 对应的对象引用地址复制了一份给了变量 p2，此时 p1 变量和 p2 变量同时指向了同一个对</p><p>象，所以无论是使用 p1 更改 age 还是使用 p2 更改 age，双方都会受到影响。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 函数参数属于函数内部的局部变量</span>  m <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  n <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">display</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>  <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> o2 <span class="token operator">=</span> o1<span class="token punctuation">;</span><span class="token keyword">let</span> x <span class="token operator">=</span> o1<span class="token punctuation">.</span>x<span class="token punctuation">;</span>o2<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"张三"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">person</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 JavaScript 中，var、let、const 有什么区别？</p><p><code>var</code>、<code>const</code>、<code>let</code> 是 JavaScript 中用于声明变量的关键字，它们之间的主要区别在于作用域和是否可重新赋值。</p><ol><li><p><code>var</code> 声明的变量具有函数作用域（function scope），这意味着它们在整个函数体内都可见。</p><p><code>var</code> 可以在任何时候重新赋值，也可以在声明之前使用（hoisted）。</p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">testVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "undefined"，因为 var 变量会提升（hoisted）</span>  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "Hello"</span>  foo <span class="token operator">=</span> <span class="token string">"World"</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "World"</span><span class="token punctuation">}</span><span class="token function">testVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p><code>let</code> 声明的变量具有块级作用域（block scope），这意味着它们只在定义它们的代码块内可见。</p><p><code>let</code> 可以在任何时候重新赋值，不能在声明之前使用。</p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">testLet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// console.log(bar); 在此时使用会报错，因为 let 变量不会提升</span>  <span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "Hello"</span>  bar <span class="token operator">=</span> <span class="token string">"World"</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "World"</span>  <span class="token punctuation">{</span>    <span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">"Inside block"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "Inside block"，因为这是一个新的作用域</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "World"</span><span class="token punctuation">}</span><span class="token function">testLet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><code>const</code> 用于声明一个常量，它具有与 <code>let</code> 相同的块级作用域，但在声明时必须初始化，且之后不能重新赋值。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">testConst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// console.log(baz); 在此时使用会报错，因为 const 变量不会提升</span>  <span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "Hello"</span>  <span class="token comment">// baz = "World"; // 如果尝试重新赋值，将会导致错误</span>  <span class="token punctuation">{</span>    <span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token string">"Inside block"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "Inside block"，因为这是一个新的作用域</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "Hello"</span><span class="token punctuation">}</span><span class="token function">testConst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在现代 JavaScript 开发中，一般建议尽量使用 <code>let</code> 和 <code>const</code>，以避免因 <code>var</code> 变量提升和函数作用域可能导致的意外行为。</p><h2 id="02-typeof-运算符"><a href="#02-typeof-运算符" class="headerlink" title="02. typeof 运算符"></a>02. typeof 运算符</h2><p>typeof 运算符可以识别所有的基本数据类型、函数、可以识别是否是引用数据类型。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"Hello JavaScript"</span><span class="token punctuation">;</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">let</span> isMarry <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">let</span> unique <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"unique"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"张三"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> empty <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "string"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "number"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> isMarry<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "boolean"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> unique<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "symbol"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "undefined"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "function"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "object"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "object"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "object"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="03-深拷贝"><a href="#03-深拷贝" class="headerlink" title="03. 深拷贝"></a>03. 深拷贝</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 如果要拷贝的数据不是引用数据类型或要拷贝的数据为 null</span>  <span class="token comment">// 表示不需要深拷贝, 直接返回该数据即可</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">!==</span> <span class="token string">"object"</span> <span class="token operator">||</span> target <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token punctuation">;</span>  <span class="token comment">// 创建新的变量用于保存拷贝结果 区分要拷贝的数据是数组还是对象</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> target <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// 遍历要拷贝的数据</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 拷贝时排除原型对象中的属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 递归拷贝</span>      result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 返回拷贝结果</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写一个方法用于比较两个对象是否深度相等。</p><p>在 JavaScript 中，可以使用递归方法来实现深度比较两个对象是否相等。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token parameter">obj1<span class="token punctuation">,</span> obj2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 如果两个对象引用地址相同意为这两个变量指向了同一个对象, 不需要比较就是相等</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 如果 obj1 和 obj2 是基本数据类型, 不需要比较, 直接返回 false</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>    <span class="token keyword">typeof</span> obj1 <span class="token operator">!==</span> <span class="token string">"object"</span> <span class="token operator">||</span>    <span class="token keyword">typeof</span> obj2 <span class="token operator">!==</span> <span class="token string">"object"</span> <span class="token operator">||</span>    obj1 <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>    obj2 <span class="token operator">===</span> <span class="token keyword">null</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 获取 obj1 对象的key, 将 key 放置到数组中</span>  <span class="token keyword">const</span> keys1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取 obj2 对象的key, 将 key 放置到数组中</span>  <span class="token keyword">const</span> keys2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果两个对象的属性数量不相同, 那么肯定不相等</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>keys1<span class="token punctuation">.</span>length <span class="token operator">!==</span> keys2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 遍历 obj1 对象对应的 key 值</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> keys1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 判断当前遍历的 obj1 对象的 key , obj2 是否拥有</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keys2<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 返回 false 不相等</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 判断属性值是否相同</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEqual</span><span class="token punctuation">(</span>obj1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个 <code>isEqual</code> 方法首先比较两个对象的引用是否相等，如果相等则返回 true。然后，检查两个参数是否都是对象类型，如果不是，则返回 false。接下来，比较两个对象的键的数量，如果不相等，则返回 false。最后，使用递归方法逐个比较键值，如果存在不相等的键值，则返回 false。如果所有键值都相等，则返回 true。</p><h2 id="04-数据类型转换规则"><a href="#04-数据类型转换规则" class="headerlink" title="04. 数据类型转换规则"></a>04. 数据类型转换规则</h2><p>① 其他类型的值转换为字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "null"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "undefined"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "true"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "false"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "10"</span><span class="token comment">// 数组转为字符串是将数组中的所有元素按照 "," 连接起来</span><span class="token comment">// 相当于调用数组的 Array.prototype.join(",") 方法</span><span class="token comment">// 如 [1, 2, 3] 转为 "1,2,3"</span><span class="token comment">// 空数组 [] 转为空字符串</span><span class="token comment">// 数组中的 null 或 undefined, 会被当做空字符串处理</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "1,2,3"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ""</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ""</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "1,,3"</span><span class="token comment">// 普通对象转为字符串相当于直接使用 Object.prototype.toString() 方法</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object Object]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>② 其他类型的值转换为数值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"10px"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span class="token comment">// 数组会先被转换为原始类型, 然后再将转换后的原始类型转换为数值类型</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③ 其他类型转换为布尔值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>④ 对象、数组转换为基本类型</p><p>当对象类型需要被转为原始类型时，它会先调用对象的 valueOf 方法，如果 valueOf 方法返回了对应的原始类型的值，就使用这个值作为转换结果。</p><p>如果 valueOf 方法返回的不是对应的原始类型的值，继续尝试调用对象的 toString 方法，使用该方法的返回值作为转换结果。</p><p>valueOf 方法用于返回对象的原始类型，一般由系统自动调用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建字符串对象</span><span class="token keyword">let</span> strObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出字符串对象</span>strObject<span class="token punctuation">;</span> <span class="token comment">// String { 0: "H", 1: "e", 2: "l", 3: "l", 4: "o" }</span><span class="token comment">// 输出它字符串对象的类型</span><span class="token keyword">typeof</span> strObject<span class="token punctuation">;</span> <span class="token comment">// "object"</span><span class="token comment">// 获取字符串对象 strObject 的原始值</span>strObject<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">valueOf</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 将数组转换为数值类型</span><span class="token comment">// 系统会先调用数组下的 valueOf 方法, 但是当前 valueOf 方法返回的就是数组, 所以系统去调用 toString 方法</span><span class="token comment">// toString 方法调用之后返回了一个空字符串, 将空字符串转换为数值会得到 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在以下运算式中由于 + 号两边都不是数值, 所以要进行字符串连接操作</span><span class="token comment">// 系统会先调用对象下的 valueOf 方法, 但是当前 valueOf 方法返回的就是对象, 所以系统去调用 toString 方法</span><span class="token comment">// toString 方法调用后返回了 '[object Object]', 所以最终连接的结果就是 '[object Object][object Object]'</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="05-宽松比较中的隐式转换"><a href="#05-宽松比较中的隐式转换" class="headerlink" title="05. 宽松比较中的隐式转换"></a>05. 宽松比较中的隐式转换</h2><p>在 JavaScript 中宽松比较会发生隐式类型转换，严格比较不会发生隐式类型转换。</p><p>① 布尔类型和其他类型的相等比较</p><p>布尔类型的值在参与比较时值会被转换为数值类型，true 转换为 1，false 转换为 0</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ? 是否会被输出</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>② 数值类型和字符串类型的相等比较</p><p>当数值类型和字符串类型做相等比较时，字符串类型会被转换为数值类型。</p><p>如果字符串为数值字符串，则将其转换为对应的数值，如果是空字符串转换为 0，其他一律转换为 NaN。</p><p>NaN 和任何值比较都不相等，包括它自己。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③ 对象类型和原始类型的相等比较</p><p>当对象类型和基本类型做相等比较时，对象类型要被转换为原始类型。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"[object Object]"</span> <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token string">"1,2,3"</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在以下比较中, 数组需要被转换为原始类型, 系统先调用 valueOf 方法, 但返回值不是原始值</span><span class="token comment">// 系统继续调用 toString 方法, 得到 "2"</span><span class="token comment">// "2" == 2 比较, 字符串会被转换为数值 2, 所以 2 == 2 比较, 得到的结果是 true</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// "" == 0</span><span class="token comment">// 0 == 0</span><span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment">// true</span><span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment">// true</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// "" == !true</span><span class="token comment">// "" == false</span><span class="token comment">// "" == 0</span><span class="token comment">// 0 == 0</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// "[object Object]" == false</span><span class="token comment">// "[object Object]" == 0</span><span class="token comment">// NaN == 0</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 当两个操作数都是对象时，JavaScript 会比较其内存中的引用地址</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>④ null、undefined 和其他类型的比较</p><p>null 和 undefined 宽松相等的结果为 true，null 和 null 相等，undefined 和 undefined 相等。</p><p>null 和 undefined 和其他值比较时都不相等。</p><p>null 和 undefined 都是假值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>总结：在日常工作中进行相等比较时一律使用严格比较避免隐式类型转换产生的不可预知问题。</p><p>只有一种情况除外，当我们要判断对象中是否存在某一个属性时，可以使用宽松比较。</p><p>如果一个对象中的属性的值是 null 或是 undefined，我们都认为这个属性是不存在的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 因为 x 无论是 null 还是 undefined, 和 null 进行比较时都会相等</span><span class="token keyword">if</span> <span class="token punctuation">(</span>object<span class="token punctuation">.</span>x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="06-运算中的隐式转换"><a href="#06-运算中的隐式转换" class="headerlink" title="06. 运算中的隐式转换"></a>06. 运算中的隐式转换</h2><p>在使用 + - * / 进行运算时，数据类型会发生隐式类型转换。</p><p>+ 号两边只要有一个运算数是字符串类型，其他运算数都会被转换成字符串类型。</p><p>除了 + 号以外的其他运算符，比如 - * / 等都会将运算数转换为数值类型。</p><p>+ 作为正号使用会将运算数转换为数值类型。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"11"</span> <span class="token operator">+</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token string">"11"</span> <span class="token operator">-</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token number">11</span> <span class="token operator">+</span> <span class="token operator">+</span><span class="token string">"11"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="07-原型对象基本使用"><a href="#07-原型对象基本使用" class="headerlink" title="07. 原型对象基本使用"></a>07. 原型对象基本使用</h2><p>在 JavaScript 中每一个构造函数都会配备一个名字叫做 prototype 的对象，我们称它为原型对象。</p><p>原型对象的作用是为了在实例对象之间进行属性共享。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Person 构造函数</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// Person 构造函数的原型对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Person 构造函数</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 在 Person 构造函数的原型对象中添加 sayHello 方法</span><span class="token comment">// 所有通过 Person 构造函数创建出来的实例对象都可以调用该方法</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, 我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 创建 p1 实例</span><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建 p2 实例</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 验证 p1 实例是否可以调用 sayHello 方法</span>p1<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 验证 p2 实例是否可以调用 sayHello 方法</span>p2<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 验证 p1 和 p2 调用的是否是同一个 sayHello 方法</span><span class="token function">alert</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>sayHello <span class="token operator">===</span> p2<span class="token punctuation">.</span>sayHello<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/15/js-mian-shi-ti-zheng-li/03.png" align="left" width="50%"><p>实例对象在查找属性时，先在自身进行查找，自身如果找不到再去构造函数的原型对象中查找。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">p1<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, 我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, 我是实例对象自身身上的 sayHello 方法</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在实例对象身上有一个属性叫做 __proto__，它指向了实例的构造函数的原型对象，实例对象在查找属性时就是通过它找到的原型对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>__proto__ 被称之为隐式原型对象，实例会自动通过它去原型对象中查找，开发者不需要显式的去调用它。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>sayHello <span class="token operator">===</span> p1<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>sayHello<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在每一个原型对象中都会有一个名字叫做 constructor 的属性，该属性指向了构造函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="08-原型对象进阶"><a href="#08-原型对象进阶" class="headerlink" title="08. 原型对象进阶"></a>08. 原型对象进阶</h2><p>Person.prototype 对象是 Object 构造函数的实例。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 以下代码不需要开发者编写</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2023/03/15/js-mian-shi-ti-zheng-li/04.png" align="left" width="85%"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 此处 p1 调用的 hasOwnProperty 方法以及 toString 方法均来自 Object 构造函数的原型对象</span><span class="token function">alert</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/15/js-mian-shi-ti-zheng-li/05.png" align="left" width="85%"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="09-继承"><a href="#09-继承" class="headerlink" title="09. 继承"></a>09. 继承</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 继承父类实例属性</span>  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 继承父类原型属性</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// ES6 语法糖</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, 我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">sayNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, 我的学号是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "function"</span><span class="token keyword">const</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tom<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tom<span class="token punctuation">.</span><span class="token function">sayNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-instanceof"><a href="#10-instanceof" class="headerlink" title="10. instanceof"></a>10. instanceof</h2><p>instanceof 运算符用于检查对象的类型，它返回一个布尔值，如果为真则表示该对象是特定类的实例，如果为假则不是。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">tom <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">;</span> <span class="token comment">// true</span>tom <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">;</span> <span class="token comment">// true</span>tom <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>   <span class="token comment">// true</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>  <span class="token comment">// true</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>  <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="11-作用域"><a href="#11-作用域" class="headerlink" title="11. 作用域"></a>11. 作用域</h2><p>作用域是指变量和函数的可访问范围。</p><p>JavaScript 中有全局作用域、局部作用域和块级作用域。</p><p>(1) 全局作用域</p><p>在全局作用域中声明的变量和函数可以在代码中的任何位置被访问。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 全局作用域中声明变量</span><span class="token keyword">var</span> globalVariable <span class="token operator">=</span> <span class="token string">"global variable"</span><span class="token punctuation">;</span><span class="token comment">// 全局作用域中声明函数</span><span class="token keyword">function</span> <span class="token function">globalFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"global function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 在函数中访问全局变量和函数</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">globalFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 输出：global variable 和 global function</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 局部作用域</p><p>局部作用域是指在函数内部声明的变量和函数，只能在函数内部访问。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 在函数内部声明局部变量</span>  <span class="token keyword">var</span> localVariable <span class="token operator">=</span> <span class="token string">"local variable"</span><span class="token punctuation">;</span>  <span class="token comment">// 在函数内部声明局部函数</span>  <span class="token keyword">function</span> <span class="token function">localFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"local function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">localFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：local variable 和 local function</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localVariable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错：localVariable is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3) 块级作用域</p><p>块级作用域是指在 if、for、while 等语句中产生的作用域，在其中声明的变量和函数只在该代码块内部有效。</p><p>在 ES6 中使用关键字 let 和 const 声明的变量具有块级作用域。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 使用 let 和 const 声明变量具有块级作用域</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错：x is not defined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错：y is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/15/js-mian-shi-ti-zheng-li/06.png" align="left" width="100%"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 在函数内部查找变量和函数在哪调用没有关系, 只和函数在哪定义有关系</span><span class="token function">print</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  a <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  a <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 在条件判断中声明的变量是参与预解析的</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>  b <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span>  c <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">"a"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>  <span class="token comment">// 在 JS 非严格模式下实参集合与形参变量存在映射关系, 严格模式下该关系比切断了</span>  arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span><span class="token punctuation">}</span>a <span class="token operator">=</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> foo <span class="token operator">=</span> foo <span class="token operator">||</span> <span class="token string">"world"</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-闭包"><a href="#12-闭包" class="headerlink" title="12. 闭包"></a>12. 闭包</h2><p>闭包就是一个函数，一个引用了上级作用域链中的变量的函数，即使外部函数已不存在，也可以通过作用域链访问到外部函数中声明的变量。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> testVar <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testVar<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用闭包实现私有变量。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">setAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newAge</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    age <span class="token operator">=</span> newAge<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> john <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>john<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>john<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用闭包来创建一个缓存函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 私有的缓存对象</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">cacheFunction</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 如果未提供值，则返回该键的缓存值</span>      <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment">// 否则，缓存值并返回缓存的值</span>      cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 创建一个缓存函数实例</span><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">createCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 缓存一个值</span><span class="token function">cache</span><span class="token punctuation">(</span><span class="token string">"exampleKey"</span><span class="token punctuation">,</span> <span class="token string">"exampleValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取已缓存的值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cache</span><span class="token punctuation">(</span><span class="token string">"exampleKey"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：exampleValue</span><span class="token comment">// 试图获取不存在的键值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cache</span><span class="token punctuation">(</span><span class="token string">"nonexistentKey"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用闭包实现计数器功能</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> privateCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">changeBy</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    privateCounter <span class="token operator">+=</span> val<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">changeBy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">decrement</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">changeBy</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> privateCounter<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用闭包实现一次性函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">singleUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> isUsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"执行一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      isUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"无法执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> useFunc <span class="token operator">=</span> <span class="token function">singleUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">useFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行一次</span><span class="token function">useFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无法执行！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>面试题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    n<span class="token operator">++</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-this"><a href="#13-this" class="headerlink" title="13. this"></a>13. this</h2><p>JavaScript 中的 this 是一个指向当前执行环境的关键字，用来访问当前执行环境的上下文。</p><p>this 具体指向的对象要取决于当前调用方式(非箭头函数)。</p><p>(1) 默认绑定：函数调用时没有明确指定 this 的指向，或者使用的是独立的函数调用方式时，this 会绑定到全局对象上。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Window (浏览器) / global (Node.js)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 隐式绑定：函数作为对象的属性调用时，this 会绑定到该对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span>  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Alice</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3) 显式绑定：使用 apply、call、bind 等函数显式调用时，可以指定 this 的指向。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Alice"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Bob"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">greet</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, Alice!</span><span class="token function">greet</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, Bob!</span><span class="token keyword">const</span> boundGreet <span class="token operator">=</span> <span class="token function">greet</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bind 方法返回一个新函数</span><span class="token function">boundGreet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, Alice!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(4) new 绑定：使用 new 关键字创建对象时，this 会绑定到新创建的对象上。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Alice</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(5) 箭头函数：箭头函数没有自己的 this 绑定，会继承上一层作用域中的 this。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span>  <span class="token function-variable function">logMyName</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">logMyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，箭头函数中的 this 不可以被显式地绑定或修改，因为箭头函数根本没有自己的 this。</p><h2 id="14-手写-bind-方法"><a href="#14-手写-bind-方法" class="headerlink" title="14. 手写 bind 方法"></a>14. 手写 bind 方法</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// bind 方法的作用: 更改函数的 this 指向</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> newFn <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">newFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一个自定义的bind函数</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 保存调用 myBind() 函数的函数对象</span>  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment">// 获取 myBind() 函数调用时传入的参数，不包括第一个参数（即需要绑定的 this 值或上下文对象）</span>  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回一个新函数</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取新函数调用时的参数</span>    <span class="token keyword">var</span> newArgs <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将新函数的参数和调用myBind()函数时传入的参数合并</span>    <span class="token keyword">var</span> allArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>newArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回调用原函数时的结果</span>    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> allArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/*  上述代码首先在 Function.prototype 上添加了一个 myBind 方法，以实现自定义的 bind 方法。  当我们使用 myBind() 函数的时候，需要传入一个上下文对象（即需要绑定的 this 值），  以及可以传入一系列参数，稍后会与新函数的参数合并。在myBind()函数中，先将调用myBind()  函数的原函数对象保存下来，并获取传入myBind()函数的参数数组，去除第一个参数（即上下文对象）。然后返回一个新函数，  新函数的作用是将调用新函数的参数与新函数之前已经传入myBind()函数中的参数合并起来，再通过 apply() 方法来调用原函数，  同时将上下文对象和所有参数传递给apply()方法，确保原函数能够正确的使用上下文和参数。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-获取元素索引"><a href="#15-获取元素索引" class="headerlink" title="15. 获取元素索引"></a>15. 获取元素索引</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ul<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">// 获取 ul</span>  <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取 ul 的所有子元素</span>  <span class="token keyword">var</span> lis <span class="token operator">=</span> ul<span class="token punctuation">.</span>children<span class="token punctuation">;</span>  <span class="token comment">// 获取 ul 子元素的个数</span>  <span class="token keyword">var</span> length <span class="token operator">=</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment">// 遍历所有 li</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 为 li 添加点击事件</span>    lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 弹出 i 的值</span>      <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 解决办法一: 使用 let 关键字声明变量 i, 使其产生块级作用域</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 解决办法二: 使用闭包使局部变量 i 不销毁</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 为 li 添加点击事件</span>    lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 弹出 i 的值</span>      <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-同步和异步"><a href="#16-同步和异步" class="headerlink" title="16. 同步和异步"></a>16. 同步和异步</h2><p>在 JavaScript 中，同步和异步是指代码的执行方式。</p><p>同步代码会按照代码的书写顺序一行一行地执行，每行代码必须等待前一行代码执行完成后才能执行。</p><p>在同步代码中如果某个操作需要执行的时间较长，代码的执行会被阻塞，直到操作完成才能继续执行下一行代码。</p><p>异步代码则是在某些代码执行完成前(ajax 请求、定时器等) ，允许继续执行其他的代码。</p><p>异步代码的执行结果不会立即得到，异步操作完成后再通过回调函数获取执行结果。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 同步代码</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Step 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Step 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Step 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Step 1Step 2Step 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 异步代码</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Step 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Step 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Step 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Step 1Step 3Step 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>JavaScript 是单线的，这意味着它只能在一个时间点执行一个任务，无法同时执行多个任务。</p><p>如果某一个任务的执行需要耗费比较长的时间，那么程序将会被卡住，所以异步应运而生。</p><p>所有的同步代码都在主线程(单线程)中完成，web API 都是在浏览器提供的其他线程中完成的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-JavaScript-运行原理"><a href="#17-JavaScript-运行原理" class="headerlink" title="17. JavaScript 运行原理"></a>17. JavaScript 运行原理</h2><p>(1) JavaScript 为单线程语言</p><p>JavaScript 是单线程语言，这意味着 JavaScript 在同一个时间点只能执行一项任务，该项任务未完成之前其他任务需要等待。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"开始任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 同步任务</span><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> start <span class="token operator">+</span> ms<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"同步任务完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"结束任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) JavaScript 是如何实现异步的?</p><p>既然 JavaScript 是单线程的，那么它是怎样实现非阻塞(异步)的呢?</p><p>上面我们所说的 JavaScript 指的是 EcmaScript，所有 EcmaScript 代码都在同一个线程中执行，这个单线程通常我们称它为主线程。</p><p>但是当 JavaScript 在浏览器中运行时，它不仅包含了 EcmaScript 还包含了浏览器提供的 web API，比如 window、document、setInterval、fetch 等，浏览器提供的 web API 不能在主线程中执行，浏览器提供了另外的线程供它们执行。</p><p>所以更加准确的说，JavaScript 本身可以只在一个线程中执行，但是运行在浏览器中的 JavaScript 由多个线程共同的执行。</p><img src="/2023/03/15/js-mian-shi-ti-zheng-li/07.png" align="left" width="100%"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Learning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"About"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The Event Loop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">recursion</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/03/15/js-mian-shi-ti-zheng-li/08.png" align="left" width="100%"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"🐹"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"🐹🐹"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"🐹🐹🐹"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 如果调用堆栈为空并且任务队列中有待执行任务</span><span class="token comment">// 依次将任务函数移动到调用堆栈中执行</span><span class="token keyword">if</span> <span class="token punctuation">(</span>callStack<span class="token punctuation">.</span>isEmpty <span class="token operator">&amp;&amp;</span> taskQueue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3) 宏任务与微任务</p><p>宏任务包括 script（整体代码），setTimeout, setInterval, setImmediate, requestAnimationFrame 等。</p><p>微任务包括 Promise.then/catch/finally、process.nextTick (NodeJS)、MutationObserver 等。</p><p>微任务执行的优先级高于宏任务，因为微任务都是 ECMAScript，宏任务都是 WebAPI。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"开始执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"setTimeout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Promise 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Promise 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"结束执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18-Promise"><a href="#18-Promise" class="headerlink" title="18. Promise"></a>18. Promise</h2><p>JavaScript 的异步编程中最常见的问题之一就是回调地狱。</p><p>即一个异步操作完成后，需要执行另一个异步操作，而这个异步操作完成后又需要执行另一个异步操作，如此往复嵌套下去，代码变得十分冗长和难以维护。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getData</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">getMoreData</span><span class="token punctuation">(</span>data1<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">getMoreData</span><span class="token punctuation">(</span>data2<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">getMoreData</span><span class="token punctuation">(</span>data3<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 继续嵌套下去...</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了避免回调地狱的问题，我们可以使用 Promise 来简化异步调用链。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getData</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getData</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getData</span><span class="token punctuation">(</span>data3<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data4</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getData</span><span class="token punctuation">(</span>data4<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Promise 解决回调地狱问题，它是一种用于异步编程的语法结构，可以使异步操作变得更加简单、易读和可维护。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function-variable function">onReadyStateChange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"请求失败，错误码："</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"网络请求错误"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"https://jsonplaceholder.typicode.com/todos/1"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"成功获取数据："</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"获取数据失败："</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>封装 loadImage 方法使用 Promise 加载图片。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    img<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// https://img95.699pic.com/photo/50046/5562.jpg_wh300.jpg</span><span class="token comment">// https://img95.699pic.com/photo/50136/1351.jpg_wh300.jpg</span><span class="token comment">// 使用方法</span><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">"https://img95.699pic.com/photo/50136/1351.jpg_wh300.jpg"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">img</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 加载成功</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Image loaded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 加载失败</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题一：Promise 的基本用法是什么？如何使用 Promise 处理异步操作？</p><p>答：Promise 是用于异步编程的一种解决方案，它可以更加优雅和可读地处理异步操作。Promise 有三种状态：Pending（等待态）、Resolved（成功态）和 Rejected（失败态）。在 Promise 构造函数中，可以传入一个 executor（执行器）函数，该函数接受两个参数，resolve 和 reject，代表 Promise 的成功和失败。在 executor 函数中，我们可以执行异步操作，并在操作成功或失败时调用相应的回调函数，例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"failure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Promise resolved: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Promise rejected: "</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题二：如何使用 Promise.all 处理多个异步操作？</p><p>答：Promise.all 方法接受一个 Promise 对象数组作为参数，将返回一个新的 Promise 对象。只有当数组中所有 Promise 对象都成功时，该 Promise 对象才会被 resolved；如果数组中任一个 Promise 对象失败，该 Promise 对象立即被 rejected，并返回失败的原因。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Promise.all resolved: "</span> <span class="token operator">+</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Promise.all rejected: "</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题三：如何使用 Promise.race 处理多个异步操作？</p><p>答：Promise.race 方法接受一个 Promise 对象数组作为参数，将返回一个新的 Promise 对象。只要有一个 Promise 对象率先改变状态，该 Promise 对象就会采用第一个率先改变状态的 Promise 对象的状态。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Promise.race resolved: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Promise.race rejected: "</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题四：说出输出结果。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> promise2 <span class="token operator">=</span> promise1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"resolve"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"timerStart"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"timerEnd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 4 timerStart timerEnd success</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"timer1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"timer3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"timer2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// start timer1 timer2 timer3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"timer1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"timer2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// start timer1 promise timer2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> timer2 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"timer2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> timer1 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"timer1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// start promise1 timer1 promise2 timer2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> promise2 <span class="token operator">=</span> promise1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"error!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一个异步任务的回调执行报错并不会影响其他异步任务的回调函数的执行</span><span class="token comment">// promise1 promise2 error!!! promise1 promise2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"success1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"success2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"then: "</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"catch: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"success2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"then1: "</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"then2: "</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"catch: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"then3: "</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 透传</span><span class="token comment">// then 方法期望接收的是函数, 如果接收的不是函数则会发生透传</span><span class="token comment">// 第一个 then 和第二个then 接收的都不是函数, 则将 1 直接传递到了最后一个 then 中</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-async-await"><a href="#19-async-await" class="headerlink" title="19. async await"></a>19. async await</h2><p>(1) async/await 概述</p><p>async/await 是 ECMAScript 2017 中引入的新的异步编程特性。它是建立在 Promise 基础之上的，主要的不同是它提供了更为简单直接的语法机制来处理异步操作，并且可以让异步代码看起来像同步代码，这样可以提高代码的可读性和可维护性。</p><p>对于一个函数，只要在它的声明前面使用 async 关键字来修饰，那么它就可以使用 await 来等待异步操作的结果。以下是一个简单的例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchRemoteData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.example.com/data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中，fetchRemoteData 函数声明了 async，这意味着它可以通过 await 等待异步函数 fetch 的返回值。fetchRemoteData 函数等待 fetch 函数的响应，然后再等待它的 JSON 内容，最后返回包含 JSON 消息的数据对象。</p><p>(2) async/await 原理</p><p>async 函数是 Promise 对象的语法糖，async 函数本身返回的是一个 Promise 对象，因此可以与其他 Promise 对象进行链式调用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncFunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncFunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asyncFunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">asyncFunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -&gt; 'HELLO WORLD'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 async 函数中使用 await 表达式时，它的作用就是将异步调用的结果分割开来，使得后面的代码可以在异步调用返回结果之后继续执行。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">demo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'step 1'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://api.example.com/data'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'step 2'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在以上例子中，当我们调用 demo() 函数时，第一行代码会打印一个“step 1”的消息，但注意此时代码并不会阻塞。随后，代码中的 await 表达式会发起一个异步调用，该调用需要一些时间来完成，我们称为“await point”。</p><p>(3) 异常处理</p><p>await 操作符也可以捕获异步操作产生的异常，就像 Promise.catch() 方法一样。因此，建议在 async 函数中使用 try-catch 块来处理可能出现的异常。以下是一个例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">divide</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>x <span class="token operator">/</span> y<span class="token punctuation">)</span>    <span class="token keyword">return</span> result  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(4) 异步函数代码执行顺序说明</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"async1 start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// await 关键字后面的代码你可以将它看成是一个新的微任务</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"async1 end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"async2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>m <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">double</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20-优化-DOM-操作性能"><a href="#20-优化-DOM-操作性能" class="headerlink" title="20. 优化 DOM 操作性能"></a>20. 优化 DOM 操作性能</h2><p>(1) 优化操作 DOM 的频率</p><p>操作 DOM 的次数越少，页面反应就越快。</p><p>比如，我们使用一个 for 循环向一个 ul 列表里添加 1000 个 li 元素，这会导致 1000 次 DOM 操作，对页面性能的影响很大。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  li<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Item </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用 DocumentFragment 来高效地添加大量的 DOM 元素。</p><p>DocumentFragment 是一个虚拟的节点，可以将多个节点添加到 DocumentFragment 中，再将它一次性添加到 DOM 中，减少 DOM 操作的次数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  li<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Item </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 缓存 DOM 元素的引用</p><p>每次获取 DOM 对象都会造成一定的性能浪费，所以我们可以使用变量来缓存 DOM 对象的引用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 未优化</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#myButton"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"Button clicked"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 优化后</span><span class="token keyword">const</span> myButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#myButton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> myDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myButton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  myDiv<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"Button clicked"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3) 使用事件委托</p><p>添加事件监听器也会影响性能，我们可以使用事件委托的方式来减少事件监听器的数量。</p><p>事件委托就是利用事件冒泡，将事件监听器添加到父元素上，然后根据事件冒泡的原理，在父元素上捕获事件，从而减少事件监听器的数量。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 未优化</span><span class="token keyword">const</span> listItems <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listItems<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  listItems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Item </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> clicked</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 优化后</span><span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">"LI"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Item </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>textContent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> clicked</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(4) 使用 classList 代替 className</p><p>className 常用于添加、删除、替换元素的 CSS 类，但是每次操作都会重新渲染元素，影响性能。</p><p>所以我们可以使用 classList 来代替 className 属性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 未优化</span><span class="token keyword">const</span> myDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myDiv<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span><span class="token comment">// 优化后</span><span class="token keyword">const</span> myDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myDiv<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(5) 避免多次修改样式</p><p>在 JavaScript 代码中频繁修改样式也会影响性能，我们可以将多个样式合并成一个字符串，然后一次性修改。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 未优化</span><span class="token keyword">const</span> myDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>myDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">;</span>myDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">"20px"</span><span class="token punctuation">;</span><span class="token comment">// 优化后</span><span class="token keyword">const</span> myDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token string">"background-color: red; color: white; font-size: 20px;"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-property-与-attribute"><a href="#21-property-与-attribute" class="headerlink" title="21. property 与 attribute"></a>21. property 与 attribute</h2><p>在 HTML 中，attribute 是指 HTML 标签属性，property 是指 DOM 对象属性。</p><p>HTML 中的 attribute：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDiv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">data-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>This is a box<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用 JavaScript 获取 attribute 的值：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myDiv<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"data-value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "123"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以使用 JavaScript 动态设置 attribute 的值：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">myDiv<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"data-value"</span><span class="token punctuation">,</span> <span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>DOM 对象属性通过 DOM 对象点上属性的方式进行访问：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myDiv<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "myDiv"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myDiv<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "box"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myDiv<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "This is a box"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过赋值语句来修改它们的值：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">myDiv<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"new-box"</span><span class="token punctuation">;</span>myDiv<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"This is a new box"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>HTML 标签属性和 DOM 对象属性都是为 HTML 元素提供附加信息的方式。它们之间有一定的联系，但在使用和目的方面有所不同。</p><ol><li>HTML 标签属性：</li></ol><p>HTML 标签属性主要用于在 HTML 文档中为元素提附加信息。</p><p>例如，<code>id</code> 属性用于为一个 HTML 元素分配唯一的标识符，<code>class</code> 属性可以分配一个或多个类名，以便使用 CSS 进行样式设置。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>DOM 对象属性：</li></ol><p>DOM 即文档对象模型（Document Object Model），是一个编程接口，允许我们使用 JavaScript 操作 HTML 文档的结构、样式和内容。</p><p>浏览器在读取 HTML 标签时，会生成标签对应的 DOM 对象，标准的 HTML 标签属性会成为 DOM 对象属性。</p><p>DOM 对象属性是我们在 JavaScript 中与 HTML 元素互动时所使用的属性，它不仅包括 HTML 属性，还包括其他与元素相关的属性。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出元素的标签名称</span>element<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 将输入框设置为禁用状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>不同点：</li></ol><ul><li><p>HTML 标签属性仅仅存在于 HTML 文档中，而 DOM 对象属性是我们在 JavaScript 中使用的属性。</p></li><li><p>DOM 对象属性包含更多信息，除了标准的 HTML 标签属性以外还包括元素事件处理、元素宽高等。</p></li><li><p>有时，DOM 对象属性和 HTML 标签属性可能有区别。</p><ul><li><p><code>checked</code> 和 <code>selected</code> 在 HTML 中是布尔属性，但在 DOM 中是布尔值。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">checked</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>默认值<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> input.value = '值'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>value</code> 属性，HTML 标签的 value 属性始终存储的是设置属性时赋的默认值，而 DOM 对象中的 value 属性保存的是用户输入的内容。</p></li><li><p><code>class</code> 属性用于在 HTML 标签中为元素设置类名，<code>className</code> 属性用于在 DOM 对象中设置元素类名。</p></li></ul></li><li><p>一些 HTML 标签属性没有对应的 DOM 对象属性, 比如 aria-*, colspan 等</p></li><li><p>一些 DOM 对象属性没有对应的 HTML 标签属性, 比如 textContent 等</p></li></ul><p>在实际项目中，你应该根据需要进行选择：</p><ul><li>在 HTML 标签中，使用 HTML 属性定义元素的特征和基础数据。</li><li>在 JavaScript 代码中，通过操作 DOM 对象属性实现动态交互和修改元素状态。</li></ul><p>代码示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 设置HTML标签属性 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggleBtn<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>切换禁用状态<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">// JavaScript访问和操作DOM对象属性</span>  <span class="token keyword">const</span> toggleBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"toggleBtn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> inputElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  toggleBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    inputElement<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token operator">!</span>inputElement<span class="token punctuation">.</span>disabled<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中，我们在 HTML 中设置了基本的属性，然后在 JavaScript 中操作 DOM 对象属性实现点击按钮时切换输入框的禁用状态。</p><h2 id="22-通用的绑定事件的方法"><a href="#22-通用的绑定事件的方法" class="headerlink" title="22. 通用的绑定事件的方法"></a>22. 通用的绑定事件的方法</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> eventType<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    el<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"on"</span> <span class="token operator">+</span> eventType<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    el<span class="token punctuation">[</span><span class="token string">"on"</span> <span class="token operator">+</span> eventType<span class="token punctuation">]</span> <span class="token operator">=</span> callback<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>el 是要绑定事件的元素，eventType 是要绑定的事件类型，callback 是事件处理程序。</p><p>这个方法支持现代浏览器、IE8+及更低版本的 IE 浏览器，以及不支持 addEventListener 的其他浏览器。</p><p>说出 onLoad (window) 事件与 DOMContentLoaded (document) 事件的区别？</p><h2 id="23-事件冒泡"><a href="#23-事件冒泡" class="headerlink" title="23. 事件冒泡"></a>23. 事件冒泡</h2><p>事件冒泡是指当一个元素上的事件被触发时，该事件会向父元素传递，如果父元素也绑定了该事件，则会接着触发父元素上的事件，以此类推直至到达最外层的祖先元素为止。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Click me!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> outer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"outer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Outer div clicked!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> middle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"middle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>middle<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Middle div clicked!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> inner <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"inner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inner<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  event<span class="token punctuation">.</span><span class="token function">stopPropergation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Button clicked!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当点击按钮时，控制台会打印以下内容：</p><pre class="line-numbers language-none"><code class="language-none">Button clicked!Middle div clicked!Outer div clicked!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="24-事件委托"><a href="#24-事件委托" class="headerlink" title="24. 事件委托"></a>24. 事件委托</h2><p>事件委托是指将事件处理程序绑定在某一元素的祖先元素上，通过祖先元素处理该事件，这能够优化性能并减少事件处理程序的数量。</p><p>下面是一个示例，当单击一个 ul 元素的下拉菜单项时，会执行相应的操作：</p><p>HTML 代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>菜单项 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>菜单项 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>菜单项 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JavaScript 代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> menu <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".menu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>menu<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">"LI"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"你点击了菜单项："</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25-Ajax"><a href="#25-Ajax" class="headerlink" title="25. Ajax"></a>25. Ajax</h2><p>在原生 JavaScript 中，我们可以使用 XMLHttpRequest 对象发送 Ajax 请求。</p><p>一、概述</p><p>Ajax 是 Asynchronous JavaScript and XML 的缩写，它是一种使用 JavaScript 在不刷新页面的情况下与服务器交换数据的技术。</p><p>二、创建 XMLHttpRequest 对象</p><p>要使用 XMLHttpRequest，首先需要创建一个 XMLHttpRequest 对象的实例。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>三、设置请求</p><p>当实例创建完毕后，可以使用 XMLHttpRequest 对象的 open() 方法来设置请求，open() 方法接受三个参数：</p><ul><li>请求的类型（GET 或 POST）</li><li>请求的 URL</li><li>请求是否异步（true 表示异步，false 表示同步）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"https://api.example.com/data"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>四、发送请求</p><p>设置好请求之后，可以使用 XMLHttpRequest 对象的 send() 方法来发送请求。</p><p>如果是 GET 请求，send() 方法不需要参数；</p><p>如果是 POST 请求，send() 方法需要传递一个字符串或 FormData 对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>五、处理响应</p><p>要处理服务器返回的响应，可以使用 XMLHttpRequest 对象的 onreadystatechange 事件处理程序。</p><p>当请求的状态（readyState）发生变化时，onreadystatechange 事件处理程序将被触发。</p><p>readyState 的可能值包括：</p><ul><li>0：请求未初始化（已创建 XMLHttpRequest 实例，但尚未调用 open() 方法）</li><li>1：请求已经设置（已调用 open() 方法，但尚未调用 send() 方法）</li><li>2：请求已发送（已调用 send() 方法，但尚未收到响应）</li><li>3：请求处理中（已收到部分响应数据）</li><li>4：请求已完成（已收到所有的响应数据）</li></ul><p>当 readyState 等于 4 且 HTTP 状态码为 200 时，表示请求成功，此时可以获取并处理服务器返回的数据。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"https://api.example.com/data"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际项目中的代码示例：</p><ol><li>获取 GitHub 用户信息：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"GitHub 用户名："</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>login<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"https://api.github.com/users/octocat"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>从 API 中获取一条随机笑话：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> joke <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"随机笑话："</span> <span class="token operator">+</span> joke<span class="token punctuation">.</span>value<span class="token punctuation">.</span>joke<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"https://api.icndb.com/jokes/random"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="26-跨域"><a href="#26-跨域" class="headerlink" title="26. 跨域"></a>26. 跨域</h2><p>(1) 跨域概述</p><p>跨域是指跨越原始访问控制(domains)的访问。</p><p>在 Web 应用中，浏览器出于安全考虑一般情况下是只允许同源请求。</p><p>所谓同源就是协议、域名以及端口号相同，如果请求的资源来自于不同的源（域名、端口、协议），则会出现跨域。</p><p>这种安全策略被称为 “同源策略”，同源策略的主要目的是为了保证用户信息的安全，阻止恶意攻击。</p><p>如果没有同源策略，攻击者可以通过编写脚本，从一个网站发送请求绕过用户认证，获取用户的隐私数据。</p><p>(2) 如何解决跨域问题</p><p>① JSONP</p><p>JSONP (JSON with Padding) 是一种通过 script 标签跨域访问数据的方式，因为 script 标签本身就允许跨域。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 客户端</span><span class="token keyword">function</span> <span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callbackName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?callback=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>callbackName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">handleData</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"https://example.com/jsonp"</span><span class="token punctuation">,</span> <span class="token string">"handleData"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 服务端</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>http  <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> query <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>query<span class="token punctuation">;</span>    <span class="token keyword">const</span> callback <span class="token operator">=</span> query<span class="token punctuation">.</span>callback<span class="token punctuation">;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span>      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/javascript"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>callback<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，JSONP 总是发起一个 GET 请求，所以仅仅适用于请求数据，而不能发送数据。</p><p>② CORS (跨域资源共享)</p><p>CORS 是一种更为现代化的跨域方案，它允许浏览器与服务器之间进行跨域通信。</p><p>服务端需要在响应头中添加 CORS 相关配置，例如 Access-Control-Allow-Origin，这样客户端就可以跨域访问该资源。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 客户端</span><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"https://example.com/api/data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 服务端</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>http  <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>      <span class="token string-property property">"Access-Control-Allow-Origin"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token comment">// "*" 表示允许任何域名跨域访问，也可以设置指定域名</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Lily"</span><span class="token punctuation">,</span>      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了以上两种方法，还有其他一些常用的跨域解决方案，如使用代理服务器、postMessage 通信等。</p><h2 id="27-本地存储"><a href="#27-本地存储" class="headerlink" title="27. 本地存储"></a>27. 本地存储</h2><p>cookie 是浏览器保存用户数据的一种方式。</p><p>localStorage 和 sessionStorage 是 HTML5 引入的 Web Storage，同样是用于在浏览器中保存数据。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 设置cookie</span>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span>  <span class="token string">"name=John Doe; expires=Thu, 18 Dec 2022 12:00:00 UTC; path=/"</span><span class="token punctuation">;</span><span class="token comment">// 获取cookie</span><span class="token keyword">let</span> name <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 存储数据</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"John Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取数据</span><span class="token keyword">let</span> name <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> age <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 存储数据</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"John Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取数据</span><span class="token keyword">let</span> name <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> age <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>cookie 保存数据的容量较小，只有 4KB 左右，而 localStorage 和 sessionStorage 可以存储更多数据。</p><p>cookie 可以设置过期时间，不过需要手动管理，而 localStorage 和 sessionStorage 可以无限期保存数据。</p><p>cookie 可以跨域传递数据，而 localStorage 和 sessionStorage 只能在同源页面之间共享数据。</p><p>cookie 保存在浏览器的 cookie 文件夹中，localStorage 和 sessionStorage 保存在浏览器中的特定位置，更安全。</p><p>如果需要跨域传递数据，建议使用 cookie。</p><p>如果需要在同源页面中保存少量数据，建议使用 localStorage。</p><p>如果需要在同源页面中保存临时数据，建议使用 sessionStorage。</p><h2 id="28-HTTP-协议"><a href="#28-HTTP-协议" class="headerlink" title="28. HTTP 协议"></a>28. HTTP 协议</h2><p>(1) HTTP 协议概述</p><p>HTTP (Hypertext Transfer Protocol) 是一种在 Web 应用中进行数据通信的协议。</p><p>在客户端和服务器之间交换的所有数据（例如 HTML 文件、图像文件、查询结果等）都必须遵循 HTTP 协议中规定的格式。</p><pre class="line-numbers language-none"><code class="language-none">mimetext/plaintext/htmltext/csstext/javascriptimage/jepgimage/pngapplication/jsonapplication/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HTTP 协议基于客户端服务器模型，客户端发送请求，服务器发送响应。</p><p>通常，Web 浏览器是作为客户端出现的。当您在浏览器中输入一个 URL 时，这实际上向服务器发出了一个请求，以获取网页。</p><p>服务器将响应包含在一个 HTTP 格式的消息中，并将其发送回给浏览器。浏览器将消息解析并显示响应的文本、图像等内容。</p><p>HTTP 格式的消息分为两类：请求和响应。</p><p>(2) HTTP 请求</p><p>HTTP 请求由三个部分组成：请求行 请求头、请求体 响应行 响应头、响应体</p><ol><li>请求方法：指定对服务器执行的操作类型。常用方法包括 GET、POST、PUT、DELETE 等。</li><li>请求 URI：指定要操作的资源的 URI。</li><li>HTTP 版本：该消息所使用的 HTTP 版本。</li></ol><p>例如，以下是一个 HTTP GET 请求的示例：</p><pre class="line-numbers language-none"><code class="language-none">GET /index.html HTTP/1.1Host: www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个请求由 GET 方法（请求获取资源）组成，请求的 URI 是 <code>/index.html</code>，HTTP 版本是 1.1。</p><p>请求消息可以包含其他信息，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">GET /search?q=example HTTP/1.1Host: www.google.comAccept-Encoding: gzip, deflate, brUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中，Accept-Encoding 和 User-Agent 是请求首部。</p><p>(3) HTTP 响应</p><p>HTTP 响应也由三个部分组成：</p><ol><li>状态码：指定执行该请求后服务器的状态。常见的状态码包括 200 OK（请求成功）、404 Not Found（未找到请求的资源）等。</li><li>响应首部：包含与响应相关的元数据，如服务器类型、响应时间等。</li><li>实体：包含响应的实际内容，例如网页、图像等。</li></ol><p>以下是一个 HTTP 响应的示例：</p><pre class="line-numbers language-none"><code class="language-none">HTTP/1.1 200 OKContent-Type: text/html; charset=UTF-8Content-Length: 138Date: Tue, 06 Jun 2017 09:45:32 GMT&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to Example.com&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Hello World!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>状态码为 200（请求成功），并且响应实体中包含一个 HTML 页面。</p><p>(4) HTTP 方法</p><p>HTTP 协议支持多种请求方法。以下是一些常见的方法：</p><ol><li>GET：请求获取资源。应该只用于获取数据，不应更改数据。</li><li>POST：请求向服务器提交数据。该请求可能导致服务器更改状态或执行其他操作。</li><li>PUT：请求更新服务器上的资源。</li><li>DELETE：请求删除服务器上的资源。</li></ol><p>(5) HTTP 状态码</p><p>HTTP 响应状态码指示 HTTP 请求是否已成功完成。以下是一些常见的状态码及其含义：</p><ol><li>200 OK：请求已成功完成。</li><li>201 Created：服务器已成功创建新资源。</li><li>400 Bad Request：请求无效，例如缺少一些必需的参数。</li><li>401 Unauthorized：未授权，需要身份验证。</li><li>404 Not Found：请求的资源不存在。</li><li>500 Internal Server Error：服务器遇到了错误，无法完成请求。</li></ol><h2 id="29-restful-API"><a href="#29-restful-API" class="headerlink" title="29. restful API"></a>29. restful API</h2><p><a href="https://restfulapi.cn/">RESTful API</a>是一种软件架构风格，主要用于网络上的 web 服务。</p><p>RESTful API 按照资源进行设计，使用标准的 HTTP 方法，如 GET、POST、PUT 和 DELETE，实现资源的创建、读取、更新和删除操作（CRUD 操作）。</p><p>资源：RESTful API 中的资源可以是一篇文章、用户信息或者商品等，这些资源可以通过 URI（统一资源标识符）进行标识，例如：/users、/articles 等。</p><p>方法：RESTful API 中的方法是 HTTP 请求动词，例如：GET、POST、PUT、DELETE 等。不同的动词表示对资源的不同操作。</p><p>状态：资源的状态表示请求操作的结果，使用 HTTP 状态码来传达，如 200 表示操作成功，404 表示资源未找到，500 表示服务器内部错误等。</p><hr><p>以下是一个使用 Node.js 的 Express 框架创建的简单 RESTful 风格的 API 的代码示例。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导入模块</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 资源：用户</span><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 方法：</span><span class="token comment">// 1. 获取所有用户：GET /users</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 创建用户：POST /users</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> newUser <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> users<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>name<span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>age<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  users<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newUser<span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>newUser<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. 获取单个用户：GET /users/:id</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/users/:id"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> user <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">u</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"用户未找到。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4. 修改用户信息：PUT /users/:id</span>app<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/users/:id"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> user <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">u</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"用户未找到。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span>name <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>name<span class="token punctuation">;</span>  user<span class="token punctuation">.</span>age <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>age<span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5. 删除用户：DELETE /users/:id</span>app<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"/users/:id"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> user <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">u</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"用户未找到。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> index <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  users<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">204</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> port <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">3000</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Listening on port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="30-数组-splice、slice"><a href="#30-数组-splice、slice" class="headerlink" title="30. 数组 splice、slice"></a>30. 数组 splice、slice</h2><p>在 JavaScript 中，数组的 splice 和 slice 是两个用于操作数组的方法，它们的用法和区别如下：</p><p>splice 方法用于在数组内插入、删除或替换元素。语法如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> deleteCount<span class="token punctuation">,</span> item1<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> itemN<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>startIndex：开始变更的索引（包括该位置的元素）</p><p>deleteCount：要删除的元素个数，可选。如果省略该参数，那么 startIndex 之后的所有元素都会被删除。</p><p>item1, …, itemN：要插入到数组中的元素，可选。</p><p>splice 方法的返回值是一个包含被删除元素的数组。如果没有元素被删除，则返回一个空数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> removed <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 7, 8, 4, 5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>removed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>slice 方法用于对数组中的元素进行截取。它不会修改原数组，而是返回一个新的数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>startIndex：起始索引（包含），可选。默认值为 0。</p><p>endIndex：结束索引（不包含），可选。默认值为数组的长度。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5] （原数组不变）</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>splice 和 slice 区别：</p><ol><li>splice 方法会修改原数组，而 slice 方法不会修改原数组，而是返回一个新数组。</li><li>splice 方法可以插入、删除、替换元素，而 slice 方法用于截取子数组。</li><li>endIndex 参数在 slice 中是不包含在返回数组中的，而 splice 的 deleteCount 则是包含在被删除的元素个数中。</li></ol><h2 id="31-map-与-parseInt"><a href="#31-map-与-parseInt" class="headerlink" title="31. map 与 parseInt"></a>31. map 与 parseInt</h2><p>请说出下列代码的返回值是什么</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [10, NaN, NaN]</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码是想将数组 [10, 20, 30] 中的每个元素用 parseInt 函数解析成整数，然而实际执行结果却与预期不符：执行后的结果是 [10, NaN, NaN]。</p><p>为了理解这个现象，我们需要深入了解 map 和 parseInt 函数的工作原理。</p><p>map 是数组的一个方法，它接收一个函数作为参数。map 会遍历数组的每一个元素，并对每个元素执行传入的函数。</p><p>传入的函数有三个参数：当前元素、当前元素的索引和整个数组。</p><p>map 函数返回一个新的数组，这个新数组中的元素是原数组每个元素经过传入函数处理后的结果。</p><p>parseInt 是一个全局函数，用于将字符串转换为整数。</p><p>它接受两个参数：要解析的字符串和一个可选的基数（例如 2 表示二进制，10 表示十进制等）。</p><p>当提供基数时，parseInt 会按照给定的进制把字符串转换为对应的整数。</p><p>当我们将 parseInt 传入 map 函数时，map 函数会依次为数组中每个元素调用 parseInt 函数，并把当前元素值、索引和整个数组分别传给 parseInt 的第一个、第二个和第三个参数。然而此时 parseInt 函数的第二个参数并非作为解析的基数，而是把数组索引作为基数了。这就导致了实际执行结果与预期不符。</p><p>当处理第一个元素（10）时，<code>parseInt</code> 接收到的参数是 <code>parseInt(10, 0)</code>（0 是数组索引）。基数为 0 时，<code>parseInt</code> 会默认按照十进制进行解析，因此结果是 10。</p><p>当处理第二个元素（20）时，<code>parseInt</code> 接收到的参数是 <code>parseInt(20, 1)</code>（1 是数组索引）。此时基数为 1，但 1 是一个无效的基数，因此 <code>parseInt</code> 函数会返回 <code>NaN</code>。</p><p>当处理第三个元素（30）时，<code>parseInt</code> 接收到的参数是 <code>parseInt(30, 2)</code>（2 是数组索引）。此时基数为 2，即二进制，而 30 并不符合二进制表示，所以 <code>parseInt</code> 返回 <code>NaN</code>。</p><p>因此，<code>[10, 20, 30].map(parseInt)</code> 的执行结果是 <code>[10, NaN, NaN]</code>。</p><p>如果你想用 map 函数将 [10, 20, 30] 中的每个元素转换为整数，可以这样做：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以得到预期的结果 <code>[10, 20, 30]</code>。</p><h2 id="32-函数声明与函数表达式"><a href="#32-函数声明与函数表达式" class="headerlink" title="32. 函数声明与函数表达式"></a>32. 函数声明与函数表达式</h2><p>函数声明（Function Declaration）和函数表达式（Function Expression）都是在 JavaScript 中定义和创建函数的两种方法。</p><p><strong>1. 函数声明（Function Declaration）</strong></p><p>函数声明是使用 <code>function</code> 关键字后跟函数名称和函数体来定义函数的方法。</p><p>函数声明会在代码执行前被初始化，因此可以在声明之前调用。这种行为被称为函数提升（hoisting）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 函数声明</span><span class="token keyword">function</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 调用函数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 函数表达式（Function Expression）</strong></p><p>函数表达式是将一个函数赋值给一个变量。函数表达式在执行到其所在行时，通过变量名进行调用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 函数表达式</span><span class="token keyword">const</span> <span class="token function-variable function">greeting</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 调用函数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>函数声明与函数表达式的区别：</strong></p><ol><li>提升：函数声明在执行前会被提升，这意味着你可以在声明之前调用它。而函数表达式需要等到其所在行被执行后，才可被调用。</li><li>语法：函数声明需要提供一个函数名，而函数表达式可以是命名的也可以是匿名的。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 函数声明提升示例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：25</span><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 函数表达式提升示例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 会抛出 TypeError: square is not a function</span><span class="token keyword">const</span> <span class="token function-variable function">square</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="33-手写-trim-方法"><a href="#33-手写-trim-方法" class="headerlink" title="33. 手写 trim 方法"></a>33. 手写 trim 方法</h2><p>在 JavaScript 中，字符串对象自带了 trim() 方法，可以用来去除字符串两端的空格。</p><p>但是如果需要自己手动实现一个 trim() 方法，可以使用正则表达式来去除字符串两端的空格。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">trim</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s+|\s+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 使用自定义的 trim() 方法</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"   Hello, World!   "</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：'Hello, World!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们扩展了 String.prototype 对象，添加了一个名为 trim() 的方法。该方法使用正则表达式来去除字符串两端的空格，并返回处理后的字符串。</p><p>正则表达式 <code>/^\s+|\s+$/g</code> 匹配字符串两端的空格。其中：</p><ul><li><code>^</code> 表示匹配字符串开头；</li><li><code>\s+</code> 表示匹配一个或多个空格；</li><li><code>|</code> 表示或者；</li><li><code>$</code> 表示匹配字符串结尾；</li><li><code>g</code> 表示全局匹配。</li></ul><p>因此，<code>/^\s+|\s+$/g</code> 可以匹配字符串开头和结尾的空格，并将其替换为空字符串。</p><h2 id="34-手写-max-方法"><a href="#34-手写-max-方法" class="headerlink" title="34. 手写 max 方法"></a>34. 手写 max 方法</h2><blockquote><p>目标：编写 myMax 方法模拟 Math.max 方法的功能</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> max <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>      max <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> maxNum <span class="token operator">=</span> <span class="token function">myMax</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>maxNum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="35-捕获异常"><a href="#35-捕获异常" class="headerlink" title="35. 捕获异常"></a>35. 捕获异常</h2><p>在 JavaScript 中，可以使用 try-catch 语句来捕获异常。</p><p>try-catch 语句包含两个关键字：try 和 catch。try 代码块中包含可能会引发异常的代码，而 catch 代码块用于处理异常情况。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token comment">// 可能会引发异常的代码</span>  <span class="token keyword">let</span> x <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 处理异常情况</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"发生了异常："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>onerror 事件：用于捕获全局范围内发生的异常。可以使用 window.onerror 事件来捕获全局范围内的异常。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 该事件会在发生异常时自动触发，并将异常信息作为参数传递给事件处理函数。</span>window<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> url<span class="token punctuation">,</span> line<span class="token punctuation">,</span> column<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"发生了异常："</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="36-JSON-介绍"><a href="#36-JSON-介绍" class="headerlink" title="36. JSON 介绍"></a>36. JSON 介绍</h2><p>JSON 是一种轻量级的数据交换格式，它的全称是 JavaScript Object Notation。</p><p>JSON 最初是由 Douglas Crockford 在 2001 年提出的，它是一种基于文本的数据格式，具有易于阅读和编写的特点。</p><p>JSON 格式通常用于通过网络传输数据，因为它可以被多种编程语言解析和生成。</p><p>JSON 与 JavaScript 密切相关，因为 JSON 的语法是 JavaScript 对象的子集。</p><p>这意味着在 JavaScript 中，我们可以轻松地将 JSON 格式的数据转换为 JavaScript 对象，反之亦然。</p><p>JavaScript 提供了两个内置方法来解析和生成 JSON 数据：JSON.parse() 和 JSON.stringify()。</p><p>序列化：将对象转换为 JSON 字符串</p><p>反序列化：将 JSON 字符串转换为 JSON 对象。</p><h2 id="37-获取查询参数"><a href="#37-获取查询参数" class="headerlink" title="37. 获取查询参数"></a>37. 获取查询参数</h2><p>编写一个方法用于获取 url 中的查询参数并返回其对象格式。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> queryParams <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> queryString <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> pairs <span class="token operator">=</span> queryString<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pairs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> pair <span class="token operator">=</span> pairs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key <span class="token operator">||</span> <span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> queryParams<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      queryParams<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>queryParams<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      queryParams<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      queryParams<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>queryParams<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> queryParams<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当用户需要从 URL 中获取查询参数时，可以使用以下 JavaScript 函数来实现：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getUrlParams</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([^&amp;?+]+)=([^&amp;?+]+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>  url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    params<span class="token punctuation">[</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> params<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数使用正则表达式来匹配 URL 中的查询参数，然后将它们存储在一个对象中并返回。</p><pre class="line-numbers language-none"><code class="language-none">https://example.com/search?q=javascript&amp;lang=en&amp;page=2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以调用 getUrlParams 函数来获取查询参数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> urlParams <span class="token operator">=</span> <span class="token function">getUrlParams</span><span class="token punctuation">(</span>  <span class="token string">"https://example.com/search?q=javascript&amp;lang=en&amp;page=2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>urlParams<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这将输出以下内容：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token literal-property property">q</span><span class="token operator">:</span> <span class="token string">"javascript"</span><span class="token punctuation">,</span>  <span class="token literal-property property">lang</span><span class="token operator">:</span> <span class="token string">"en"</span><span class="token punctuation">,</span>  <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="38-拍平多维数组"><a href="#38-拍平多维数组" class="headerlink" title="38. 拍平多维数组"></a>38. 拍平多维数组</h2><p>例如，调用 flatten([1, [2, 3], [4, [5, 6]]]) 将返回 [1, 2, 3, 4, 5, 6]。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">flat<span class="token punctuation">,</span> toFlatten</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> flat<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>      Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>toFlatten<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flatten</span><span class="token punctuation">(</span>toFlatten<span class="token punctuation">)</span> <span class="token operator">:</span> toFlatten    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="39-数组去重"><a href="#39-数组去重" class="headerlink" title="39. 数组去重"></a>39. 数组去重</h2><p>以下是使用 JavaScript 编写的一个函数，可以对数组进行去重，包括三种不同的去重方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">uniqueArray</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 方法一：使用 Set 数据结构</span>  <span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> uniqueArr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 方法二：使用 indexOf() 方法</span>  <span class="token keyword">const</span> uniqueArr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueArr2<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      uniqueArr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 方法三：使用 filter() 方法</span>  <span class="token comment">// indexOf 方法用于查找参数在数组中第一次出现的位置</span>  <span class="token comment">// ["a", "a", "b", "a"]</span>  <span class="token keyword">const</span> uniqueArr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> uniqueArr1<span class="token punctuation">,</span> uniqueArr2<span class="token punctuation">,</span> uniqueArr3 <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数接收一个数组作为参数，并返回一个包含三种不同去重方法结果的对象。其中：</p><ul><li>方法一使用了 ES6 中的 Set 数据结构，将数组转换为 Set，然后再将 Set 转换为数组。</li><li>方法二使用了 for 循环和 indexOf() 方法来遍历数组，如果元素在新数组中不存在，就将其添加到新数组中。</li><li>方法三使用了 filter() 方法来遍历数组，只保留第一次出现的元素。</li></ul><h2 id="40-判断字符串是否为回文字符串"><a href="#40-判断字符串是否为回文字符串" class="headerlink" title="40. 判断字符串是否为回文字符串"></a>40. 判断字符串是否为回文字符串</h2><p>实现一个函数，判断输入的字符串是否为回文字符串。</p><p>回文字符串是一个正读和反读都一样的字符串。</p><p>例如: aba、rttr</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 反转字符串并判断是否与原字符串相等</span>  <span class="token keyword">return</span> str <span class="token operator">===</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="41-合并两个有序数组并排序"><a href="#41-合并两个有序数组并排序" class="headerlink" title="41. 合并两个有序数组并排序"></a>41. 合并两个有序数组并排序</h2><p>实现一个函数，合并两个有序数组并排序。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mergeAndSort</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> mergedArr <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>  mergedArr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> mergedArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> mergedArr <span class="token operator">=</span> <span class="token function">mergeAndSort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mergedArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="42-字符串手写题"><a href="#42-字符串手写题" class="headerlink" title="42. 字符串手写题"></a>42. 字符串手写题</h2><p>实现一个函数，找出字符串中出现次数最多的字符和出现的次数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getMaxChar</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 该变量用于记录每一个字符出现的数量 {a: 3, b: 2}</span>  <span class="token keyword">const</span> charMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// 用于记录出现次数最多的字符</span>  <span class="token keyword">let</span> maxChar <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token comment">// 用于记录出现次数最多的字符出现的数量</span>  <span class="token keyword">let</span> maxCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 检查 charMap 对象中是否存在当前遍历的字符</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>charMap<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 不存在</span>      <span class="token comment">// 将当前遍历的字符串作为 charMap 对象的属性</span>      <span class="token comment">// 并将值设置为1, 记录该字符出现的次数</span>      charMap<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment">// 存在</span>      <span class="token comment">// 递增该字符出现的次数</span>      charMap<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 判断当前遍历的字符串出现的次数是否是最多的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>charMap<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> maxCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 替换 maxChar 变量, 记录当前出现次数最多的字符</span>      maxChar <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// 替换 maxChar 变量的值, 将当前字符串出现的次数作为最大次数</span>      maxCount <span class="token operator">=</span> charMap<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 返回出现次数最多的字符以及出现的数量</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> maxChar<span class="token punctuation">,</span> maxCount <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMaxChar</span><span class="token punctuation">(</span><span class="token string">"aaabb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="40-vue2-组件声明周期函数"><a href="#40-vue2-组件声明周期函数" class="headerlink" title="40. vue2 组件声明周期函数"></a>40. vue2 组件声明周期函数</h2><p>在 Vue2 中，生命周期函数是 Vue 组件会经历的一系列依次触发的函数。它们在特定时候执行，并允许开发者执行响应逻辑。</p><p>这些生命周期函数主要包括以下几种:</p><ol><li><p>beforeCreate：在 Vue 实例初始化之后，数据观测和事件配置之前被调用。</p><p>表示含义：Vue 实例已经创建，但数据观测和事件还未设置。</p><p>执行时机：页面渲染前。</p><p>应用：这个阶段不能访问到 data、methods 等，通常用得较少。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeCreate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>created：在 Vue 实例创建完成后被立即调用，此时已完成数据观测，方法和计算属性的运算。</p><p>表示含义：Vue 实例创建完成，数据观测以及 data、methods 等已设置。</p><p>执行时机：页面渲染前。</p><p>应用：可以用于转换数据格式、初始化、扩展 methods 方法等。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"Hello Vue!"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"created"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>beforeMount：在挂载开始之前被调用，相关的 render 函数首次被调用。</p><p>表示含义：模板编译完成，但 DOM 还没有挂载。</p><p>执行时机：页面渲染前。</p><p>应用：一般不会在这个阶段操作，因为没有渲染出 DOM。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeMount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>mounted：在 Vue 实例挂载完成时调用。此时已完成模板到 DOM 的挂载。</p><p>表示含义：完成 DOM 挂载，可以操作 DOM。</p><p>执行时机：页面渲染后。</p><p>应用：你可以在这里操作 DOM，比如插入插件或者调用接口。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mounted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>beforeUpdate：数据发生变化时，且发生在虚拟 DOM 重新渲染和打补丁之前调用。</p><p>表示含义：数据已更新，但 DOM 还没有更新。</p><p>执行时机：页面更新前。</p><p>应用：应用较少。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"Hello Vue!"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeUpdate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>updated：在虚拟 DOM 重新渲染和打补丁后调用，表示 DOM 已完成更新。</p><p>表示含义：DOM 更新完成。</p><p>执行时机：页面更新后。</p><p>应用：可以执行依赖于 DOM 的操作，但要注意避免无限循环更新。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"Hello Vue!"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"updated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>beforeDestroy：在 Vue 实例销毁之前调用。此时实例仍然可以完全正常使用。</p><p>表示含义：实例即将销毁，但仍可正常使用。</p><p>执行时机：销毁前。</p><p>应用：可以用来解绑事件或者清除定时器等。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeDestroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>destroyed：在 Vue 实例销毁完成后调用。此时所有的绑定、实例方法等均已解除。<br>表示含义：实例已完全销毁。<br>执行时机：销毁后。<br>应用：这个阶段实例已被销毁，很少会用到。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"destroyed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>以上就是 Vue2 中的生命周期函数及其作用和应用。在实际项目中，我们可以根据不同需求选择合适的生命周期函数来执行相应操作。</p><h2 id="41-vue2-父子组件生命周期调用顺序"><a href="#41-vue2-父子组件生命周期调用顺序" class="headerlink" title="41. vue2 父子组件生命周期调用顺序"></a>41. vue2 父子组件生命周期调用顺序</h2><p>在 Vue2 中，父子组件的生命周期调用顺序如下：</p><ol><li><p>挂载阶段（Mounting）</p><ul><li>父组件：beforeCreate</li><li>父组件：created</li><li>父组件：beforeMount</li><li>子组件：beforeCreate</li><li>子组件：created</li><li>子组件：beforeMount</li><li>子组件：mounted</li><li>父组件：mounted</li></ul></li><li><p>更新阶段（Updating）</p><ul><li>父组件：beforeUpdate</li><li>子组件：beforeUpdate</li><li>子组件：updated</li><li>父组件：updated</li></ul></li><li><p>卸载阶段（Unmounting）</p><ul><li>父组件：beforeDestroy</li><li>子组件：beforeDestroy</li><li>子组件：destroyed</li><li>父组件：destroyed</li></ul></li></ol><h2 id="42-vue2-keep-alive-组件"><a href="#42-vue2-keep-alive-组件" class="headerlink" title="42. vue2 keep-alive 组件"></a>42. vue2 keep-alive 组件</h2><p>在 Vue2 中，keep-alive 是一个抽象组件，它的作用是缓存非活动的组件实例，以避免反复重渲染，提高性能。</p><p>keep-alive 自身实际上不会渲染成一个 DOM 元素。</p><p>(1) 应用场景</p><ol><li>列表切换渲染时：当有多个列表页面时，用户在不同的列表页面之间切换，需要保持每个列表页面的滚动位置、数据状态等。</li><li>页面级别的缓存：SPA 应用中，用户在不同页面之间切换时，需要保持一些页面的缓存，以提升性能并减少页面加载时间。</li></ol><p>(2) 特有生命周期函数</p><p>activated：当被包裹的组件激活时，执行此钩子函数。这个钩子函数表示组件被缓存后，再次被渲染到页面时调用。</p><p>deactivated：当被包裹的组件被缓存时，执行此钩子函数。这个钩子函数表示组件被缓存时调用。</p><p>(3) 实现原理</p><p>keep-alive 的实现原理主要基于 Vue 的虚拟 DOM 和组件的生命周期函数。</p><ol><li><p>当一个组件被包裹在 keep-alive 中时，keep-alive 会监听它的 activated 和 deactivated 钩子函数，缓存/激活/子组件。</p></li><li><p>keep-alive 使用了 Vue 的虚拟 DOM 实现，通过创建一个 &lt;keep-alive&gt; 的虚拟节点将对应组件的虚拟节点放入属性对应的缓存，为被包裹的组件额外添加 activated 和 deactivated 的生命周期处理，以达到激活和停用组件的目的。</p></li><li><p>当组件被激活时，keep-alive 会使用缓存中的组件 VNode 进行渲染，而不是重新创建一个新的 VNode。</p><p>这样，缓存的组件实例仍然保持之前的状态，不需要进行重新渲染。</p></li><li><p>当组件被停用时，keep-alive 会将其放入缓存，组件实例并未销毁，可用来再次激活组件。</p></li><li><p>可以使用 include 和 exclude 属性来指定哪些组件需要被缓存或排除。</p></li></ol><p>(4) 示例代码</p><p>假设我们有两个组件： Home.vue 和 About.vue。当导航从 Home 组件切换到 About 组件时，我们希望保留 Home 组件的状态。</p><ol><li>首先，创建两个组件文件：<code>Home.vue</code> 和 <code>About.vue</code>。</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- Home.vue --&gt;&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;Home Page&lt;/h2&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "Home",};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- About.vue --&gt;&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;About Page&lt;/h2&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "About",};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>接下来，在<code>App.vue</code>文件中设置我们的路由视图以及<code>keep-alive</code>组件。</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- App.vue --&gt;&lt;template&gt;  &lt;div&gt;    &lt;nav&gt;      &lt;router-link to="/"&gt;Home&lt;/router-link&gt;      &lt;router-link to="/about"&gt;About&lt;/router-link&gt;    &lt;/nav&gt;    &lt;keep-alive&gt;      &lt;router-view&gt;&lt;/router-view&gt;    &lt;/keep-alive&gt;  &lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>然后，在<code>router.js</code>文件里配置我们的路由。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// router.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"./components/Home.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">"./components/About.vue"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"history"</span><span class="token punctuation">,</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> Home<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/about"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"about"</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> About<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>最后，在项目入口文件<code>main.js</code>中导入路由配置。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  router<span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，当你在 <code>Home</code> 和 <code>About</code> 组件之间切换时，组件的状态应该被保留在 <code>keep-alive</code> 组件中。</p><h2 id="43-vue2-生命周期与异步请求"><a href="#43-vue2-生命周期与异步请求" class="headerlink" title="43. vue2 生命周期与异步请求"></a>43. vue2 生命周期与异步请求</h2><p>在 Vue2 中，可以执行异步请求的生命周期函数有以下几个：</p><ol><li>created：组件实例被创建后，在渲染 DOM 之前执行。</li><li>mounted：组件实例被挂载到 DOM 元素上之后执行。</li><li>updated：组件数据更新导致的虚拟 DOM 重新渲染后执行。</li><li>beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave：在路由导航守卫中执行。</li></ol><p>在这些生命周期里，通常推荐在 created 生命周期进行异步请求。理由如下：</p><ol><li><p>created 生命周期会在渲染 DOM 之前执行。这意味着，在数据请求返回前，可以进行其他的逻辑处理，例如展示加载状态等。</p></li><li><p>如果在 mounted 生命周期发起异步请求，可能会让用户在等待数据返回时看到一个空的页面，影响用户体验。</p></li><li><p>在 updated 生命周期发起异步请求会增加不必要的更新，因为每次数据更新都会触发这个生命周期。</p><p>通常情况下，我们需要根据具体需求调用和更新数据。</p></li><li><p>在路由导航守卫中进行异步请求适用于那些依赖特定路由参数的场景，如需要在页面跳转前获取数据。</p></li></ol><p>综上，对于普通的异步请求推荐使用 created 生命周期。当然，在特定情况下，请根据具体需求选择合适的生命周期。</p><h2 id="44-Vue2-v-if-vs-v-show"><a href="#44-Vue2-v-if-vs-v-show" class="headerlink" title="44. Vue2 v-if vs v-show"></a>44. Vue2 v-if vs v-show</h2><p>在 Vue2 中，v-show 和 v-if 是两个用于条件渲染的指令。</p><p>下面分别介绍这两个指令的相同点和不同点，以及哪个指令的性能更好。</p><p>相同点：</p><ol><li>都是用于条件渲染。v-show 和 v-if 这两个指令都可以根据条件去渲染或者隐藏某个 HTML 元素。</li></ol><p>不同点：</p><ol><li><p>v-if 是”真正”的条件渲染指令，它会根据表达式的值在 DOM 树中插入或者删除对应的元素。</p><p>v-show 只是简单地切换元素的 CSS 属性 display，控制元素的显示和隐藏。</p></li><li><p>当表达式的值为 false 时，v-if 不会渲染元素到 DOM 树中</p><p>v-show 无论表达式的值为何始终都会渲染元素，在元素的 display 属性中设置为 none 来控制隐藏。</p></li><li><p>v-if 由于需要插入和删除 DOM 元素，当条件切换频繁时，对性能消耗较大。</p><p>v-show 只是简单地修改 CSS 属性，性能消耗较小。</p></li></ol><p>如果需要频繁切换显示隐藏的场景，建议使用 v-show，因为它只需要修改 CSS 属性，性能开销较小。</p><p>如果元素不需要频繁切换，或者切换时需要重新获取数据、处理逻辑等，建议使用 v-if，因为它不会多次渲染不需要的元素，从而减少性能消耗。</p><h2 id="45-v-for-key"><a href="#45-v-for-key" class="headerlink" title="45. v-for key"></a>45. v-for key</h2><p>问题：v-for 为什么要配合 key 一起使用？</p><p>在 Vue2 中，v-for 和 key 被一起使用是出于性能优化的考虑，有助于提高列表渲染的性能。</p><p>v-for 指令是 Vue.js 中用于循环渲染列表元素的一个重要特性。在数据发生变化时，Vue 将更新 DOM 来匹配新的数据。</p><p>然而，有时候我们只是对列表进行简单的添加或删除操作，如果每次都重新计算整个列表并重新渲染，则会造成浪费，降低性能。</p><p>为解决此问题，Vue 实现了一种名为“就地复用”的策略。</p><p>当列表发生变化时，它会尽可能地减少重新创建和销毁 DOM 元素的次数。如果一个元素没有 key，Vue 将尝试使用 tag 复用现有元素。</p><p>然而，这种复用策略可能会导致一些问题。例如当列表元素的顺序发生变化时，它可能会导致不必要的更新，从而导致性能问题。</p><p>这时我们需要使用 key 属性来指定一个唯一标识符，使得 Vue 可以准确地识别每一个列表项。</p><p>key 属性应该为每一个列表项分配一个唯一的值，便于 Vue 知道如何对应新旧元素。</p><p>这样，当数据发生变化时，Vue 可以通过 key 属性来识别哪个元素被添加、修改或者删除，从而实现更有效的局部更新，提高列表渲染性能。</p><h2 id="46-Vue2-组件通讯"><a href="#46-Vue2-组件通讯" class="headerlink" title="46. Vue2 组件通讯"></a>46. Vue2 组件通讯</h2><p>在 Vue2 中，我们可以使用以下方式实现组件之间的通信：</p><p>(1) 父组件向子组件传递数据：通过 props</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 父组件 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-component</span> <span class="token attr-name">:parent-data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-component</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> ChildComponent <span class="token keyword">from</span> <span class="token string">"./ChildComponent.vue"</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>      ChildComponent<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">"父组件数据"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 子组件 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ parentData }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">parentData</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>        <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 子组件向父组件传递数据，通过自定义事件和 $emit</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 父组件 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-component</span> <span class="token attr-name">@child-event</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleChildEvent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-component</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> ChildComponent <span class="token keyword">from</span> <span class="token string">"./ChildComponent.vue"</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>      ChildComponent<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">handleChildEvent</span><span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"子组件传递的数据："</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 子组件 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendDataToParent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>发送数据至父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">sendDataToParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"child-event"</span><span class="token punctuation">,</span> <span class="token string">"来自子组件的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3) 兄弟组件之间通信需要通过共同的父组件，或者使用事件总线（Event Bus）</p><p>首先创建一个新的事件总线实例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// event-bus.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> EventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>组件 A 发送数据至组件 B：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendDataToSibling<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>发送数据至兄弟组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> EventBus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/event-bus.js"</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">sendDataToSibling</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EventBus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"sibling-event"</span><span class="token punctuation">,</span> <span class="token string">"来自组件 A 的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件 B 接收数据：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>接收到的数据：{{ receivedData }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> EventBus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/event-bus.js"</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">receivedData</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      EventBus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"sibling-event"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSiblingData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      EventBus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">"sibling-event"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSiblingData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">handleSiblingData</span><span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>receivedData <span class="token operator">=</span> payload<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：使用事件总线时，不要忘记在组件销毁时移除对应的事件监听，避免内存泄漏。</p><h2 id="47-v-model-的实现原理"><a href="#47-v-model-的实现原理" class="headerlink" title="47. v-model 的实现原理"></a>47. v-model 的实现原理</h2><p>Vue.js 中的 v-model 是实现表单控件与数据双向绑定的指令。</p><p>其实现原理主要基于两个部分：数据到视图的绑定（数据驱动视图更新）和视图到数据的绑定（视图驱动数据更新）。</p><p>数据到视图的绑定：当数据发生变化时，通过数据劫持（Vue.js 2.x 使用 Object.defineProperty，Vue.js 3.x 使用 Proxy）触发数据变化的侦听函数，然后通过订阅者模式通知相应的指令更新，最后视图更新。</p><p>视图到数据的绑定：当用户与视图交互（如输入文本、选择选项等）时，通过监听视图的 input 事件，获取视图的最新值，然后将其赋值给相应的数据，实现视图到数据的绑定。</p><p>下面是一个 Vue.js 的代码示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 使用 v-model 进行双向数据绑定 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们使用 v-model 指令将输入框与 data 中的 message 属性进行双向绑定。当用户输入文本时，视图到数据的绑定将用户的输入赋值给 message 属性；同时，数据到视图的绑定会自动将 message 的最新值更新到视图上，展示在 <code>&lt;p&gt;</code> 标签中。</p><p>在原生 JavaScript 中，你可以使用事件监听器和数据代理来实现一个简单的双向数据绑定。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>output<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">      <span class="token comment">// 1. 获取 DOM 元素</span>      <span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> output <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 2. 初始化一个数据对象</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment">// 3. 代理数据对象，监听数据变化</span>      <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>          <span class="token comment">// 更新 DOM</span>          output<span class="token punctuation">.</span>innerText <span class="token operator">=</span> value<span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 4. 监听 input 事件，并更新数据对象</span>      input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        proxy<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 初始更新</span>      proxy<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个示例中，我们创建了一个简单的数据代理，使用 Proxy 对象来代理一个初始数据对象并在数据对象的值被设置时更新 DOM。然后，我们使用事件监听器监听 input 元素的输入事件，并在输入值发生变化时更新数据代理对象的值。通过这样的方式，我们实现了一个简单的双向数据绑定。</p><h2 id="48-如何理解-MVVM"><a href="#48-如何理解-MVVM" class="headerlink" title="48. 如何理解 MVVM"></a>48. 如何理解 MVVM</h2><p>MVVM（Model-View-ViewModel）模式是一种软件架构设计模式，主要用于分离应用程序的界面表示层（View）和业务逻辑层（Model）。它的核心思想是基于数据驱动的视图更新。ViewModel 作为 View 和 Model 之间的连接器，负责将 Model 中的数据转换成 View 可以显示的数据，并处理从 View 接收到的用户交互事件。MVVM 让应用程序的不同部分更容易分离、测试和维护。</p><p>MVVM 的优点如下：</p><ol><li>解耦：MVVM 模式可以将 UI（用户界面）和业务逻辑分离，在一定程度上简化了代码编写和程序设计。</li><li>双向数据绑定：ViewModel 和 View 之间的数据同步是自动完成的，这意味着当数据发生变化时，不需要手动更新视图，从而减少了很多重复和繁琐的工作。</li><li>可维护性：由于 UI 和业务逻辑分离，维护成本较低。当需要更新视图或业务逻辑时，可以只关注对应的部分，而不会对其他部分产生影响。</li><li>可测试性：可以对 ViewModel 进行单元测试，提高应用程序的可靠性和健壮性。</li><li>可重用性：可以重用 ViewModel 中的代码，提高开发效率。</li></ol><p>MVVM 的缺点如下：</p><ol><li>过度抽象：当应用程序的功能或逻辑不是很复杂时，MVVM 可能会导致过度抽象，增加了代码的复杂性和学习成本。</li><li>内存占用：由于持续监听数据变化和双向绑定，可能导致更高的内存占用和性能损失。</li><li>依赖框架：为实现 MVVM，通常需要依赖于特定的框架（如：Vue.js、Angular、React 等），在某种程度上限制了技术选型。</li></ol><p>总结一下，MVVM 为前端应用带来了更好的可维护性、可测试性和解耦。它尤其适用于复杂数字、逻辑复杂的大型应用程序。但对于简单的应用程序来说，可能会导致过度抽象和依赖于特定框架。</p><img src="/2023/03/15/js-mian-shi-ti-zheng-li/09.png" align="left" width="70%"><h2 id="49-computed-计算属性"><a href="#49-computed-计算属性" class="headerlink" title="49 computed 计算属性"></a>49 computed 计算属性</h2><p>Vue 中的计算属性（Computed properties）是一种特殊类型的属性，它依赖其他属性值的变化进行自动计算和更新。</p><p>计算属性的主要作用是将一些复杂的逻辑和计算放入独立的属性中，使 Vue 模板更简洁、可读性更强。</p><p>计算属性具有以下特性：</p><ol><li>响应式依赖：计算属性依赖其他响应式属性值，当依赖属性值发生变化时，计算属性自动更新。</li><li>缓存优化：计算属性具有缓存机制，只有当依赖的属性值发生变化时，计算属性才重新计算值。否则，直接使用缓存的值。</li><li>可读性：通过计算属性可以将复杂数值计算和转换逻辑移到独立的属性中，使 Vue 模板更简洁、便于理解和维护。</li><li>支持 getter 和 setter：计算属性默认只有 getter 方法，但也可以指定一个 setter 方法，实现对计算属性的赋值操作。</li></ol><p>实际项目中，计算属性的应用主要包括：</p><ul><li>动态计算属性值：当一个属性值依赖于其他属性值时，可以使用计算属性。</li><li>格式化显示数据：当需要对数据进行格式化或转换时，可以使用计算属性。</li><li>过滤数组或对象：当需要根据一定条件筛选出数据列表或对象的子集时，可以使用计算属性。</li></ul><p>以下是一个代码示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstName<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>First Name<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Last Name<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Full name: {{ fullName }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>        <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token comment">// 计算属性 fullName 依赖于 firstName 和 lastName</span>      <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们有两个输入框，用于填写名和姓。我们定义了一个计算属性 fullName，它的值依赖于 firstName 和 lastName。当我们在输入框中更改名字或姓氏时，fullName 自动更新，显示完整的名字。这使我们的模板非常简洁，便于理解。</p><h2 id="50-vue-data-函数"><a href="#50-vue-data-函数" class="headerlink" title="50. vue data 函数"></a>50. vue data 函数</h2><p>为什么 vue 中的 data 配置项必须是一个函数?</p><p>在 Vue 中，data 配置项必须是一个函数，主要原因是为了避免组件实例之间共享数据。</p><p>若不是一个函数，那么所有组件实例将引用相同的数据对象，这样当其中一个组件实例改变数据时，其他组件实例中的数据也将受到影响。</p><p>假设我们有一个简单的组件，用于显示一个计数器：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"counter"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;{{ count }}&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们将 <code>data</code> 配置项定义为一个函数，它返回一个对象，包含该组件实例的初始数据。</p><p>在这个例子中，我们为每个 <code>counter</code> 组件实例定义了一个 <code>count</code> 属性，并将其初始值设置为 0。</p><p>当我们在应用程序中多次使用 <code>counter</code> 组件时：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>counter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>counter</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>counter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>counter</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>counter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>counter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个组件实例都会拥有自己独立的 <code>count</code> 数据。可以想象，如果我们将 <code>data</code> 直接定义为一个对象，如下所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"counter"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;{{ count }}&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么所有的 <code>counter</code> 组件实例将共享同一个 <code>count</code> 数据，并且当一个实例的 <code>count</code> 值发生变化时，其他实例的 <code>count</code> 值也会受到影响。</p><p>因此，将 <code>data</code> 定义为一个函数，确保了每个组件实例都能拥有独立的数据副本，从而避免了潜在的问题。</p><h2 id="51-vue2-抽取逻辑"><a href="#51-vue2-抽取逻辑" class="headerlink" title="51. vue2 抽取逻辑"></a>51. vue2 抽取逻辑</h2><p>如何将多个组件中的公共逻辑抽取出来？</p><p>在 Vue2 中，有两种主要的方式可以将多个组件中的相同逻辑抽取出来： Mixins（混入） 和高阶组件（Higher-Order Components，简称 HOC）。</p><ol><li>Mixins（混入）</li></ol><p>Mixins 是一种在多个组件之间共享可复用的功能的方法。一个 mixin 的方法可以被其他组件混入，这样这些组件就可以获得 mixin 中定义的数据、组件、指令、生命周期方法等。</p><p>假设我们有以下相同逻辑需要在多个组件中使用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// commonLogic.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"Hello from mixin!"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">showAlert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在其他组件中使用 Mixin：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ComponentA.vue</span><span class="token keyword">import</span> commonLogic <span class="token keyword">from</span> <span class="token string">"./commonLogic.js"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>commonLogic<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ComponentB.vue</span><span class="token keyword">import</span> commonLogic <span class="token keyword">from</span> <span class="token string">"./commonLogic.js"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>commonLogic<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>高阶组件（Higher-Order Components）</li></ol><p>高阶组件（HOC）是一个接收组件作为参数并返回一个新组件的函数。该新组件包含了原组件的所有功能，并且可以向原组件注入新的逻辑。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// withCommonLogic.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">withCommonLogic</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">withCommonLogic(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>WrappedComponent<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"Hello from HOC!"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">showAlert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$props<span class="token punctuation">,</span>        <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$listeners<span class="token punctuation">,</span>        <span class="token literal-property property">scopedSlots</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$scopedSlots<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在其他组件中使用 HOC：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ComponentA.vue</span><span class="token keyword">import</span> withCommonLogic <span class="token keyword">from</span> <span class="token string">"./withCommonLogic.js"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCommonLogic</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"ComponentA"</span><span class="token punctuation">,</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ComponentB.vue</span><span class="token keyword">import</span> withCommonLogic <span class="token keyword">from</span> <span class="token string">"./withCommonLogic.js"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCommonLogic</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"ComponentB"</span><span class="token punctuation">,</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上两种方法都可以在 Vue2 中将多个组件中的相同逻辑抽取出来。你可以根据具体的需求和项目场景决定使用哪种方式。</p><h2 id="52-vue2-异步组件"><a href="#52-vue2-异步组件" class="headerlink" title="52. vue2 异步组件"></a>52. vue2 异步组件</h2><p>异步组件在 Vue.js 中可以帮助我们实现代码分割和按需加载，优化性能和加载速度。这对于大型应用程序是非常有用的。以下是 4 个场景的例子：</p><p>(1) 路由懒加载</p><p>可以把某个路由对应的组件编写成异步组件，这样在初始加载时，只需要加载首页的组件，其他页面的组件可以在实际访问时按需加载。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">Foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/Foo.vue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">Bar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/Bar.vue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/foo"</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Foo <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/bar"</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Bar <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 按需加载弹窗组件</p><p>某些场景下，我们需要在用户点击某个按钮后展示一个弹窗组件。这种组件在页面加载时可能并不需要，可以使用异步组件按需加载。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>openModal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>打开弹窗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Modal</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showModal<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> <span class="token function-variable function">Modal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/Modal.vue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">showModal</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> Modal <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">openModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>showModal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3) 大型选项卡式应用</p><p>在一个包含多个选项卡的应用中，可以将每个选项卡对应的组件编写为异步组件，这样可以在切换选项卡时按需加载相应的组件。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tabs</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tab</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span> <span class="token attr-name">:component</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tab</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tab</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span> <span class="token attr-name">:component</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tab</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tab</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>C<span class="token punctuation">"</span></span> <span class="token attr-name">:component</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>C<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tab</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tabs</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> <span class="token function-variable function">A</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/A.vue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">B</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/B.vue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">C</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/C.vue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token constant">A</span><span class="token punctuation">,</span>      <span class="token constant">B</span><span class="token punctuation">,</span>      <span class="token constant">C</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(4) 根据不同设备加载不同组件</p><p>当我们需要根据不同设备展示不同的组件时，可以在运行时动态加载相应的异步组件。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentComponent<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> <span class="token function-variable function">DesktopComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/DesktopComponent.vue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">MobileComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/MobileComponent.vue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">currentComponent</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth <span class="token operator">&lt;</span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentComponent <span class="token operator">=</span> MobileComponent<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentComponent <span class="token operator">=</span> DesktopComponent<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="53-vue-作用域插槽"><a href="#53-vue-作用域插槽" class="headerlink" title="53. vue 作用域插槽"></a>53. vue 作用域插槽</h2><p>Vue 中的作用域插槽（Scoped Slots）是一种特殊类型的插槽，它允许父组件向子组件传递数据，同时还允许子组件在其插槽中使用该数据。这使得子组件可以更灵活地渲染父组件传递的数据，而不仅仅是简单地显示它们。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 父组件 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-component</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        {{ slotProps.message }} World!      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-component</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> ChildComponent <span class="token keyword">from</span> <span class="token string">"./ChildComponent.vue"</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>      ChildComponent<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 子组件 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，父组件包含一个名为 child-component 的子组件。父组件使用 v-slot 指令来定义一个默认插槽，并将其绑定到一个名为 slotProps 的变量上。该变量是一个对象，其中包含子组件需要使用的数据。在这种情况下，子组件需要使用名为 message 的数据。</p><p>子组件包含一个名为 message 的数据属性，并将其传递给插槽。父组件中的模板使用 slotProps.message 来访问该数据，并将其与字符串 World!连接起来。</p><h2 id="54-vuex-action-mutation"><a href="#54-vuex-action-mutation" class="headerlink" title="54. vuex action mutation"></a>54. vuex action mutation</h2><p>在 Vuex 中，mutation 和 action 都是用于管理应用程序状态的重要概念。</p><p>它们的作用是不同的，mutation 用于修改状态，而 action 用于处理异步逻辑。</p><p>mutation 是 Vuex 中用于修改状态的方法。它们必须是同步的，这意味着它们不能包含异步逻辑。mutation 只能通过提交(commit)来调用。</p><p>下面是一个简单的示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>action 是 Vuex 中用于处理异步逻辑的方法。它们可以包含任何异步代码，例如 API 调用或 setTimeout()函数。action 可以通过 dispatch 来调用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">incrementAsync</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"incrementAsync"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="55-vue-router-路由模式"><a href="#55-vue-router-路由模式" class="headerlink" title="55. vue router 路由模式"></a>55. vue router 路由模式</h2><p>Vue Router 提供了三种路由模式：hash 模式、history 模式和 abstract 模式。</p><p>(1) Hash 模式</p><p>Hash 模式使用 URL 的 hash 部分（即#号后面的内容）来管理路由。在这种模式下，当 URL 的 hash 部分发生变化时，Vue Router 会自动更新视图。Hash 模式不需要服务器配置，因此它非常适合在静态文件服务器上部署单页应用程序。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'hash'</span><span class="token punctuation">,</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>(2) History 模式</p><p>History 模式使用 HTML5 History API 来管理路由。在这种模式下，URL 的路径部分被用来管理路由。当 URL 的路径部分发生变化时，Vue Router 会自动更新视图。History 模式需要服务器配置，以便在用户直接访问页面时正确地响应请求。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>(3) Abstract 模式</p><p>Abstract 模式不会改变浏览器的 URL，而是将路由信息保存在内存中。这种模式常用于服务器端渲染或单元测试中。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'abstract'</span><span class="token punctuation">,</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在选择路由模式时，需要考虑以下几个因素：</p><ol><li><p>服务器配置：如果你的应用程序需要在服务器上运行，则需要选择支持 HTML5 History API 的路由模式。</p></li><li><p>SEO 优化：如果你的应用程序需要进行 SEO 优化，则需要选择支持 HTML5 History API 的路由模式。</p></li><li><p>兼容性：如果你的应用程序需要在旧版浏览器上运行，则需要选择支持 Hash 模式的路由模式。</p></li></ol><p>综上所述，选择哪种路由模式取决于你的应用程序的需求和服务器配置。</p><p>在大多数情况下，我们建议使用 History 模式，因为它可以提供更好的用户体验和 SEO 优化。</p><h2 id="55-JavaScript-模拟前端路由"><a href="#55-JavaScript-模拟前端路由" class="headerlink" title="55. JavaScript 模拟前端路由"></a>55. JavaScript 模拟前端路由</h2><p>前端路由可以通过监听 URL 的变化，并根据 URL 的不同渲染不同的视图来实现。下面是使用 JavaScript 模拟前端路由的示例代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string-property property">"/"</span><span class="token operator">:</span> home<span class="token punctuation">,</span>  <span class="token string-property property">"/about"</span><span class="token operator">:</span> about<span class="token punctuation">,</span>  <span class="token string-property property">"/contact"</span><span class="token operator">:</span> contact<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">router</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> path <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"popstate"</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">"A"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> href <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> href<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们首先定义了一个 routes 对象，其中包含了不同路径对应的视图。</p><p>然后，我们定义了一个 render 函数，用于根据 URL 渲染不同的视图。</p><p>接下来，我们定义了一个 router 函数，用于监听 popstate 事件并根据 URL 的变化渲染不同的视图。我们还在 DOMContentLoaded 事件中添加了一个事件监听器，用于处理用户点击链接时的行为。当用户点击链接时，我们使用 pushState 方法将新的 URL 添加到浏览器历史记录中，并调用 router 函数来渲染新的视图。</p><p>最后，在 DOMContentLoaded 事件中调用 router 函数来初始化路由，并开始监听 popstate 事件的触发。</p><h2 id="56-虚拟节点描述-DOM-结构"><a href="#56-虚拟节点描述-DOM-结构" class="headerlink" title="56. 虚拟节点描述 DOM 结构"></a>56. 虚拟节点描述 DOM 结构</h2><p>使用 VNode 描述一段 DOM 结构。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> tree <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">"div"</span><span class="token punctuation">,</span>  <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">"container"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">"h1"</span><span class="token punctuation">,</span>      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Hello, world!"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">"ul"</span><span class="token punctuation">,</span>      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span>          <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Item 1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span>          <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Item 2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span>          <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Item 3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们使用了一个 JavaScript 对象来表示一个 DOM 结构。该对象包含三个属性：</p><ul><li><code>tag</code> 表示该节点的标签名，如 <code>div</code>、<code>h1</code>、<code>ul</code>、<code>li</code> 等。</li><li><code>attrs</code> 表示该节点的属性，如 <code>id</code>、<code>class</code> 等。</li><li><code>children</code> 表示该节点的子节点，可以是多个子节点，每个子节点都是一个虚拟节点对象。</li></ul><h2 id="57-Vue2-数据响应式原理"><a href="#57-Vue2-数据响应式原理" class="headerlink" title="57. Vue2 数据响应式原理"></a>57. Vue2 数据响应式原理</h2><p>在 Vue 2 中，数据响应式的实现原理是通过 Object.defineProperty() 方法对数据进行劫持来实现的，包括基本数据类型和引用数据类型。</p><p>对于基本数据类型（如字符串、数字、布尔值等），Vue 会将其包装成一个对象，并为其添加一个名为 <code>__ob__</code> 的属性，用来标记该对象已经被观察过了。</p><p>然后，对于这个对象的每个属性，Vue 都会为其添加一个 getter 和一个 setter，用来监听该属性的读取和修改操作。</p><p>当属性被读取时，getter 会将当前的订阅者添加到一个订阅列表中，当属性被修改时，setter 会通知订阅者进行更新操作。</p><p>对于引用数据类型（如数组、对象等），Vue 会对其进行递归遍历，对其中的每个属性都进行劫持。</p><p>当数组中的元素被修改时，Vue 会通过重写数组的一些方法（如 push、pop、shift、unshift、splice 等）来监听这些修改操作，并通知订阅者进行更新操作。</p><p>当对象中的属性被添加或删除时，Vue 会通过 Object.defineProperty() 方法重新定义该对象的属性，并为其添加 getter 和 setter，用来监听该属性的读取和修改操作。</p><p>通过这种方式，Vue 实现了数据的响应式更新，使得当数据发生变化时，相关的视图也能够自动更新。</p><h2 id="58-vue-nextTick"><a href="#58-vue-nextTick" class="headerlink" title="58. vue $nextTick"></a>58. vue $nextTick</h2><p>在 Vue 中，$nextTick 方法的作用是在下次 DOM 更新循环结束之后执行回调函数。</p><p>这个方法可以用来确保在 DOM 更新之后再执行一些操作，比如获取更新后的 DOM 元素的位置或尺寸等。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在 Vue 实例中使用 $nextTick 方法</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// DOM 更新之后执行的操作</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在普通 JavaScript 中使用 $nextTick 方法</span>Vue<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// DOM 更新之后执行的操作</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是一个完整的示例代码，演示了如何使用 $nextTick 方法获取更新后的 DOM 元素的位置和尺寸：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>      <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span>      <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span>    <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>moveBox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Move Box<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">moveBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取更新前的 DOM 元素位置和尺寸</span>        <span class="token keyword">const</span> box <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>box<span class="token punctuation">;</span>        <span class="token keyword">const</span> x1 <span class="token operator">=</span> box<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>        <span class="token keyword">const</span> y1 <span class="token operator">=</span> box<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>        <span class="token keyword">const</span> width1 <span class="token operator">=</span> box<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span>        <span class="token keyword">const</span> height1 <span class="token operator">=</span> box<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">;</span>        <span class="token comment">// 修改 DOM 元素位置</span>        box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">"translate(100px, 100px)"</span><span class="token punctuation">;</span>        <span class="token comment">// 获取更新后的 DOM 元素位置和尺寸</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> x2 <span class="token operator">=</span> box<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>          <span class="token keyword">const</span> y2 <span class="token operator">=</span> box<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>          <span class="token keyword">const</span> width2 <span class="token operator">=</span> box<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span>          <span class="token keyword">const</span> height2 <span class="token operator">=</span> box<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Before: x=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, y=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, width=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>width1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, height=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>height1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">After: x=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, y=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, width=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>width2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, height=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>height2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们定义了一个红色的正方形框，并为其添加了一个按钮。当点击按钮时，我们会先获取更新前的框的位置和尺寸，然后将框向右下方移动 100 像素，最后在 $nextTick 回调函数中获取更新后的框的位置和尺寸，并将其打印出来。通过这种方式，我们可以确保获取到的位置和尺寸是更新后的值，而不是更新前的值。</p><h2 id="59-Vue-性能优化"><a href="#59-Vue-性能优化" class="headerlink" title="59. Vue 性能优化"></a>59. Vue 性能优化</h2><ol><li>使用 Vue CLI 创建项目时，选择合适的项目模板，避免不必要的依赖和配置。</li><li>合理使用路由懒加载和组件懒加载，减少首屏加载时间。</li><li>使用 CDN 引入 Vue.js 和其他常用库，减少打包体积。</li><li>避免在模板中使用复杂的表达式和过滤器，尽量使用计算属性和方法。</li><li>对于频繁更新的数据，使用 v-once 指令或者手动缓存结果，避免重复计算。</li><li>合理使用 v-if 和 v-show 指令，根据具体情况选择性能更好的一种。</li><li>对于列表渲染，尽量使用 v-for 的 key 属性，避免不必要的渲染。</li><li>使用 v-cloak 指令或者 CSS 样式控制，避免页面闪烁。</li><li>对于大量数据的渲染，使用虚拟滚动或分页加载等技术，避免一次性渲染过多数据。</li><li>使用 keep-alive 缓存组件实例，避免多次创建和销毁组件。</li><li>对于频繁变化的样式，使用 CSS 动画或者过渡效果，避免频繁操作 DOM。</li><li>对于复杂的计算和渲染，使用 Web Worker 或者 Service Worker 进行异步处理。</li><li>对于大型项目，使用 Vuex 进行状态管理，避免组件之间频繁传递数据。</li><li>使用 vue-router 的懒加载和异步组件，避免不必要的路由和组件加载。</li><li>对于静态资源，使用 CDN 或者缓存技术，减少网络请求和加载时间。</li><li>使用 Webpack 的代码分割和按需加载功能，减少打包体积和加载时间。</li><li>对于频繁使用的函数和变量，使用闭包或者缓存技术，避免重复计算和创建。</li><li>合理使用 Vue.js 的生命周期函数，优化组件的初始化和销毁过程。</li><li>对于频繁操作的 DOM 元素，使用 refs 属性进行缓存，避免频繁查询和操作 DOM。</li><li>使用 Chrome 开发者工具进行性能分析和调试，及时发现和解决性能问题。</li></ol><h2 id="60-vue3-vs-vue2-优势"><a href="#60-vue3-vs-vue2-优势" class="headerlink" title="60. vue3 vs vue2 优势"></a>60. vue3 vs vue2 优势</h2><p>Vue3 相比 Vue2 有以下几个优势：</p><ol><li><p>更好的性能：Vue3 在编译和运行时都进行了优化，性能更好。</p></li><li><p>更小的体积：Vue3 的体积更小，同时支持 Tree-shaking，可以更好地减少代码冗余。</p></li><li><p>更好的 TypeScript 支持：Vue3 对 TypeScript 的支持更好，可以提供更好的类型检查和提示。</p></li><li><p>更好的组合式 API：Vue3 引入了 Composition API，可以更好地组织和复用逻辑代码。</p></li></ol><p>假设我们需要实现一个计数器组件，点击按钮可以增加或减少计数值：</p><p>Vue2 实现：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Count: {{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>increment<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>decrement<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Vue3 实现：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Count: {{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>increment<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>decrement<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token function-variable function">decrement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        count<span class="token punctuation">.</span>value<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        count<span class="token punctuation">,</span>        increment<span class="token punctuation">,</span>        decrement<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，Vue3 使用了 Composition API，通过 <code>ref</code> 函数创建响应式数据，并通过 <code>setup</code> 函数暴露出需要使用的数据和方法。</p><p>相比之下，Vue2 的实现需要在 <code>data</code> 属性中定义数据，并在 <code>methods</code> 中定义方法，代码结构更为分散。</p><h2 id="61-vue3-生命周期"><a href="#61-vue3-生命周期" class="headerlink" title="61. vue3 生命周期"></a>61. vue3 生命周期</h2><p>在 Vue3 中，常用的生命周期函数有以下几个：</p><p>beforeCreate：在实例被创建之前调用，此时组件的数据观测和初始化事件还未开始。</p><p>created：在实例创建完成后调用，此时已完成数据观测，属性和方法的运算，初始化事件等，但尚未挂载到 DOM 上。</p><p>beforeMount：在挂载开始之前被调用，即将开始编译模板并将其插入到 DOM 中。</p><p>mounted：在挂载完成后被调用，此时组件已经被渲染到页面中，可以进行 DOM 操作。</p><p>beforeUpdate：在数据更新之前被调用，发生在虚拟 DOM 重新渲染和打补丁之前，可以在这进一步地更改状态，不会触发附加的重渲染过程。</p><p>updated：在数据更新之后被调用，发生在虚拟 DOM 重新渲染和打补丁之后。当该钩子被调用时，组件 DOM 已经更新。</p><p>beforeUnmount：在卸载之前被调用，在这里可以进行一些清理工作，比如清除定时器、取消订阅等。</p><p>unmounted：在卸载完成后调用，此时组件已经从页面中删除，可以进行一些清理工作。</p><h2 id="62-vue3-组合式-API"><a href="#62-vue3-组合式-API" class="headerlink" title="62. vue3 组合式 API"></a>62. vue3 组合式 API</h2><p>Vue 3 中引入的组合式 API（Composition API）为开发者带来了许多好处，主要包括以下几点：</p><p>(1) 代码逻辑更加清晰：组合式 API 使得逻辑复用变得简单明了。</p><p>你可以根据功能划分代码，而不是按照 Vue 2 的选项式 API 的方式来组织，这使得代码逻辑更加清晰和易于理解。</p><p>(2) 逻辑复用和封装：组合式 API 允许将公共逻辑提取到单独的函数中，这使得逻辑重用和封装更加简单，可以让你编写可维护的、可测试的代码。</p><p>(3) 更好的类型推断：通过组合式 API，TypeScript 类型推断得到了更好的支持。</p><p>这使得 Vue.js 3 支持 TypeScript 变得更加完善，为开发者提供了更好的开发体验。</p><hr><p>假设我们有一个 Vue 项目需要处理用户的增删改查，使用 Composition API 可以使得代码更模块化、易于维护：</p><p>首先，我们可以创建一个名为 useUser.js 的组合式 API 函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// useUser.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> userList <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    userList<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    userList<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    userList<span class="token punctuation">,</span>    addUser<span class="token punctuation">,</span>    deleteUser<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，在组件中使用 useUser:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(user, index) in userList<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      {{ user.name }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteUser(index)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>newUser.name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addUser(newUser)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> useUser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./useUser"</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> newUser <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">""</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> userList<span class="token punctuation">,</span> addUser<span class="token punctuation">,</span> deleteUser <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的示例展示了使用 Composition API 的相关优势，包括模块化、可维护性和易于理解。</p><p>同时，<code>useUser</code> 函数可以在其他组件中复用，提高了代码的复用性。</p><p>在 JavaScript 中，执行顺序是由事件循环（Event Loop）来实现的。事件循环中主要有两种任务：宏任务（Macro-task）和微任务（Micro-task）。DOM 渲染通常在宏任务和微任务之间执行。</p><p>执行顺序如下：</p><ol><li>首先处理宏任务（例如整个 script 代码执行完毕）</li><li>完成 DOM 渲染。</li><li>处理微任务队列中的所有微任务</li><li>进行下一轮的宏任务（例如 setTimeout）</li></ol><p>依赖注入（Dependency Injection，简称 DI）是一种软件设计模式，它通过将对象的依赖关系从对象内部解耦，使得对象实例在运行时可以更加灵活地接收依赖项。依赖注入主要有以下好处：</p><ol><li>提高了代码的可维护性，使得组件之间的耦合度降低。</li><li>提高了代码的可测试性，因为依赖关系可以根据测试需求动态注入。</li></ol><p>下面举一个简单的 TypeScript 代码例子说明依赖注入的工作方式。</p><p>假设我们需要为一个电子商务系统设计一个购物车功能。购物字功能内部需要调用一系列子服务，例如库存服务、付款服务和邮寄服务。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 定义子服务</span><span class="token keyword">interface</span> <span class="token class-name">IStockService</span> <span class="token punctuation">{</span>  <span class="token function">checkStock</span><span class="token punctuation">(</span>product<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IPayService</span> <span class="token punctuation">{</span>  <span class="token function">pay</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IShippingService</span> <span class="token punctuation">{</span>  <span class="token function">ship</span><span class="token punctuation">(</span>products<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 创建依赖于子服务的购物车类</span><span class="token keyword">class</span> <span class="token class-name">ShoppingCart</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> stockService<span class="token operator">:</span> IStockService<span class="token punctuation">;</span>  <span class="token keyword">private</span> payService<span class="token operator">:</span> IPayService<span class="token punctuation">;</span>  <span class="token keyword">private</span> shippingService<span class="token operator">:</span> IShippingService<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>    stockService<span class="token operator">:</span> IStockService<span class="token punctuation">,</span>    payService<span class="token operator">:</span> IPayService<span class="token punctuation">,</span>    shippingService<span class="token operator">:</span> IShippingService  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stockService <span class="token operator">=</span> stockService<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>payService <span class="token operator">=</span> payService<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>shippingService <span class="token operator">=</span> shippingService<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">purchase</span><span class="token punctuation">(</span>products<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> product <span class="token keyword">of</span> products<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>stockService<span class="token punctuation">.</span><span class="token function">checkStock</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">库存不足: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>product<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> amount <span class="token operator">=</span> products<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>payService<span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"付款失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>shippingService<span class="token punctuation">.</span><span class="token function">ship</span><span class="token punctuation">(</span>products<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"邮寄失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"购物成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，购物车类（ShoppingCart）的实例需要接收三个子服务实例作为创建实例的输入。这样做的好处是：</p><ul><li>查看购物车类，可以很明显地看到它依赖于哪些子服务，便于理解和维护。</li><li>在运行时，可以根据需要灵活地为购物车类注入不同版本的子服务，例如在测试环境中使用模拟数据的子服务。</li></ul><p>为了完成依赖注入，你需要创建子服务的实现类并将它们传递给购物车类。例如，你可以这样使用购物车类：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 定义子服务的实现类</span><span class="token keyword">class</span> <span class="token class-name">StockService</span> <span class="token keyword">implements</span> <span class="token class-name">IStockService</span> <span class="token punctuation">{</span>  <span class="token function">checkStock</span><span class="token punctuation">(</span>product<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 在实际项目中，此处应从数据库或其他来源检查库存</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PayService</span> <span class="token keyword">implements</span> <span class="token class-name">IPayService</span> <span class="token punctuation">{</span>  <span class="token function">pay</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 在实际项目中，此处应调用支付接口完成付款</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ShippingService</span> <span class="token keyword">implements</span> <span class="token class-name">IShippingService</span> <span class="token punctuation">{</span>  <span class="token function">ship</span><span class="token punctuation">(</span>products<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 在实际项目中，此处应调用物流接口完成邮寄</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 实例化子服务</span><span class="token keyword">const</span> stockService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StockService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> payService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PayService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> shippingService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShippingService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 依赖注入：实例化购物车类，并将子服务的实例注入</span><span class="token keyword">const</span> shoppingCart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShoppingCart</span><span class="token punctuation">(</span>  stockService<span class="token punctuation">,</span>  payService<span class="token punctuation">,</span>  shippingService<span class="token punctuation">)</span><span class="token punctuation">;</span>shoppingCart<span class="token punctuation">.</span><span class="token function">purchase</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"product-1"</span><span class="token punctuation">,</span> <span class="token string">"product-2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"北京市海淀区"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，我们首先实现了子服务的实现类，接着创建了子服务的实例，最后将他们注入到购物车类中。这样就实现了购物车类对子服务的灵活依赖。</p><p><code>lodash</code> 中的 <code>get</code> 方法主要作用是用于从一个对象中安全地获取嵌套属性。如果获取的属性不存在，它将返回 <code>undefined</code>，而不是抛出错误。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">myGet</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> path<span class="token punctuation">,</span> defaultValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> path <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> obj<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> result <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> defaultValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    result <span class="token operator">=</span> result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> defaultValue <span class="token operator">:</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 使用示例</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myGet</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"a.b.c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 42</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myGet</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"a.b.nonexistent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myGet</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"a.b.nonexistent"</span><span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 'default'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myGet</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个 <code>myGet</code> 方法接受三个参数：</p><ol><li><code>obj</code>：要查询的对象。</li><li><code>path</code>：要获取的属性路径，可以是字符串（如 <code>'a.b.c'</code>）或数组（如 <code>['a', 'b', 'c']</code>）。</li><li><code>defaultValue</code>：（可选）如果属性不存在，返回的默认值。</li></ol><p>方法首先将路径转换为数组（如果传入的是字符串），然后遍历路径数组，逐级获取对象的属性。如果在获取过程中遇到 <code>undefined</code> 或 <code>null</code>，则立即返回默认值。最后，根据查询结果返回值或默认值。</p><p>在 JavaScript 中，两个叹号（<code>!!</code>）是将一个变量转换为布尔值的快捷方法。第一个叹号（<code>!</code>）将变量转换为与其原始值相反的布尔值，第二个叹号（<code>!</code>）再次对其取反，从而得到与原始值相对应的布尔值。这在 if 语句中特别有用，因为它可以确保您始终在处理布尔值。</p><p>以下是使用两个叹号的示例代码：</p><pre class="line-numbers language-none"><code class="language-none">let userName = "John";// 使用 !! 转换为布尔值if (!!userName) {  console.log("User name is not empty.");} else {  console.log("User name is empty.");}// 如果不使用 !!，效果相同，但代码不那么明确if (userName) {  console.log("User name is not empty.");} else {  console.log("User name is empty.");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，将 <code>userName</code> 变量用两个叹号 <code>!!</code> 转换为布尔值。如果 <code>userName</code> 不为空，则 <code>!!userName</code> 为 <code>true</code>，否则为 <code>false</code>。这使得在进行 if 判断时更加清晰。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用文档</title>
      <link href="/2022/03/29/hexo-shi-yong-wen-dang/"/>
      <url>/2022/03/29/hexo-shi-yong-wen-dang/</url>
      
        <content type="html"><![CDATA[<p>Hexo 框架使用</p><h2 id="通过-npm-来安装-Hexo"><a href="#通过-npm-来安装-Hexo" class="headerlink" title="通过 npm 来安装 Hexo"></a>通过 npm 来安装 Hexo</h2><pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建网站"><a href="#创建网站" class="headerlink" title="创建网站"></a>创建网站</h3><p>在电脑里新建一个文件夹作为博客的目录，通过 Hexo 命令初始化并安装。<br>例如这里我将博客目录设置为 hexoblog</p><pre class="line-numbers language-none"><code class="language-none">hexo init hexoblogcd hexoblognpm install # 这一步也可以不执行，init操作时已经安装了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="网站本地效果"><a href="#网站本地效果" class="headerlink" title="网站本地效果"></a>网站本地效果</h3><p>终端执行 hexo server</p><pre class="line-numbers language-none"><code class="language-none">hexo server // 简写 hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="去官网找一个好看的主题"><a href="#去官网找一个好看的主题" class="headerlink" title="去官网找一个好看的主题"></a>去官网找一个好看的主题</h3><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>在博客的 themes 目录下执行<br>git clone 主题 ssh 地址</p><pre class="line-numbers language-none"><code class="language-none">例如：git clone git@github.com:smackgg/hexo-theme-smackdown.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h4><p>把 hexo 配置文件 _config.yml 里的 theme 字段内容改为 hexo-theme-smackdown</p><h3 id="博客-Github-部署"><a href="#博客-Github-部署" class="headerlink" title="博客 Github 部署"></a>博客 Github 部署</h3><h4 id="创建储存桶"><a href="#创建储存桶" class="headerlink" title="创建储存桶"></a>创建储存桶</h4><p>新建一个仓库，项目名一定要是用户名.github.io 的形式(README.md 可选可不选)<br>比如，我的用户名是 xinghan-666，则我的仓库名必须是 xinghan-666.github.io<br><img src="/2022/03/29/hexo-shi-yong-wen-dang/02.png"></p><h4 id="配置-SSH-Key"><a href="#配置-SSH-Key" class="headerlink" title="配置 SSH-Key"></a>配置 SSH-Key</h4><p>没有 SSH-Key 的话，git 是不能将本地的代码部署到 GitHub 的。所以需要先创建 SSH-Key。<br>本地生成秘钥：这里的用户名和邮箱仅做演示，根据自己的修改</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name "geekmubai"git config --global user.email geekmubai@example.comssh-keygen -t rsa -C "youremail@example.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时在用户文件夹下有一个隐藏文件夹，里面会有相关的秘钥文件。<br>以文本方式打开 id_rsa.pub 文件，将内容复制到 GitHub。<br><img src="/2022/03/29/hexo-shi-yong-wen-dang/04.png"></p><p>标题随便起，将文本内容复制到 Key，最后添加 Key<br><img src="/2022/03/29/hexo-shi-yong-wen-dang/05.png"></p><h4 id="同步代码"><a href="#同步代码" class="headerlink" title="同步代码"></a>同步代码</h4><p>使用 hexo deploy 部署需要安装一个插件</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到 blog 目录下的配置文件_config.yml,用编辑器打开此文件找到此文件中的 deploy 字段，按照以下配置 deploy:</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: git@github.com:xinghan-666/xinghan-666.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>repo 在 GitHub 获取：<br><img src="/2022/03/29/hexo-shi-yong-wen-dang/06.png"></p><p>然后在命令行中执行</p><pre class="line-numbers language-none"><code class="language-none">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2022/03/29/hexo-shi-yong-wen-dang/07.png"><p>此时已经同步代码到 GitHub 了<br><img src="/2022/03/29/hexo-shi-yong-wen-dang/08.png"></p><h4 id="开启-Github-Pages"><a href="#开启-Github-Pages" class="headerlink" title="开启 Github-Pages"></a>开启 Github-Pages</h4><p>当你按照项目名是用户名.github.io 的形式创建仓库的时候，GitHub 应该是默认开启了 github-pages。<br>进入仓库的设置，往下拉：<br><img src="/2022/03/29/hexo-shi-yong-wen-dang/09.png"></p><p>此时打开网址就可以看到 Hexo 博客了</p><h3 id="hexo-搭建博客后显示图片"><a href="#hexo-搭建博客后显示图片" class="headerlink" title="hexo 搭建博客后显示图片"></a>hexo 搭建博客后显示图片</h3><p>1.要添加图片，先 npm install 一个 hexo-asset-image 的依赖</p><pre class="line-numbers language-none"><code class="language-none">npm install https://github.com/CodeFalling/hexo-asset-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.然后把_config.yml 中的 post_asset_folder 设为 true，这个配置的意思是每次 new post 一个博客，会增加一个和博客同名的文件夹。</p><p>比如我将 post_asset_folder 设为 true 之后 hexo new post “first-page”之后新建了一篇文章，就会同时在 hexo/source/_post 文件夹下生成一个.md 文件和一个同名文件夹，文件夹存放文章中的图片<br><img src="/2022/03/29/hexo-shi-yong-wen-dang/01.png"></p><p>3.把图片放到.md 文件的同名文件夹”first-page”里，最后在.md 文件中引用图片</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 两种写法选一种 --&gt;![图片描述](./包名/01.jpg)&lt;img src="./包名/01.png" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.保存文件的修改之后，在命令行输入 hexo clean,接着输入 hexo g –d。在浏览器输入域名后查看相关文章，显示图片成功！！！</p><pre class="line-numbers language-none"><code class="language-none">hexo cleanhexo ghexo d&lt;!-- 或者本地查看 --&gt;hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>指令说明<br>hexo server #启动本地服务器，用于预览主题。Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p><p>hexo server -s #以静态模式启动</p><p>hexo server -p 5000 #更改访问端口 (默认端口为 4000，’ctrl + c’关闭 server)</p><p>hexo server -i IP 地址 #自定义 IP</p><p>hexo clean #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的 public 文件夹</p><p>hexo g #生成静态网页 (执行 $ hexo g 后会在站点根目录下生成 public 文件夹, hexo 会将”/blog/source/“ 下面的.md 后缀的文件编译为.html 后缀的文件,存放在”/blog/public/ “ 路径下)</p><p>hexo d #自动生成网站静态文件，并将本地数据部署到设定的仓库(如 github)</p><p>hexo init 文件夹名称 #初始化 XX 文件夹名称</p><p>npm update hexo -g#升级</p><p>npm install hexo -g #安装</p><p>node-v #查看 node.js 版本号</p><p>npm -v #查看 npm 版本号</p><p>git –version #查看 git 版本号</p><p>hexo -v #查看 hexo 版本号</p><h2 id="简写指令"><a href="#简写指令" class="headerlink" title="简写指令"></a>简写指令</h2><pre class="line-numbers language-none"><code class="language-none">hexo n "我的第一篇文章"` 等价于 `hexo new "我的第一篇文章"` 还等价于 `hexo new post "我的第一篇文章"hexo p` 等价于 `hexo publishhexo g` 等价于 `hexo generatehexo s`等价于 `hexo serverhexo d` 等价于 `hexo deployhexo g -d`等价于`hexo generate --deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
